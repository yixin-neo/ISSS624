[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangle Geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below is installed to load sf and tidyverse packages into R environment.\n\n#pacman::p_load(sf,tidyverse)\nlibrary(sf)\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(dplyr)"
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-a-importing-geospatial-data",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-a-importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section A: Importing Geospatial Data",
    "text": "Section A: Importing Geospatial Data\nThe shapefile format can spatially describe vector features: (1) polygons, (2) polylines or (3) points.\n\nImporting polygon feature data\nThe st_read() function requires two input arguments ; dsn to define data path and layer to define the shapefile name.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex01\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting polyline feature data\n\ncyclingpath <- st_read(dsn=\"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex01\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nclass(cyclingpath)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\nImporting GIS data in kml format\n\npreschool <- st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex01\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nClick here or here for explanation on coordinate systems!\nDifferent projection can help to achieve:\n\nminimize distortion in shape\nminimize distortion in distance\nminimize distortion in area\nminimize distortion in direction.\n\nGoogle maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.\n“Projected coordinate system flattens the globe whereas the geodesic one is still a spherical/ellipsoid globe” (Zhu, 2022)"
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-b-checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-b-checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section B: Checking the content of a Simple Feature Data Frame",
    "text": "Section B: Checking the content of a Simple Feature Data Frame\n\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nBasic information like type of geometry, geographic extent of the features and the coordinate system (syv21) of the data is displayed.\n\n\nWorking with glimpse() of dplyr\nShows the data type of each field.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\nWorking with head()\nReveals complete information of a feature object; show first 5 rows.\n\nhead(mpsz, n =5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-c-plotting-the-geospatial-data",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-c-plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section C: Plotting the Geospatial Data",
    "text": "Section C: Plotting the Geospatial Data\nThe amazing part about Choropleth map is that it is able to plot both numerical and categorical data!\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nTo plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, to plot the sf object by using only a specific attribute PLN_AREA_N:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n*Note: plot() is mean for plotting the Geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-d-working-with-projection",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-d-working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section D: Working with Projection",
    "text": "Section D: Working with Projection\nTo perform Geoprocessing using two Geospatial data, both sets of Geospatial data need to be projected using similar coordinate system. In this section, a simple feature data frame will be projected from one coordinate system to another coordinate system. This process is called projection transformation.\n\nAssigning EPSG code to a simple feature data frame\ncrs - coordinate reference system\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nNote that the EPSG code for svy21 should be 3414, lets get it right.\n\nmpsz3414 <- st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21\nWe transform original data in geographic coordinate system to projected coordinate system if the analysis requires the use of distance / area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7009 1.338325 0)\n\n\nPOINT Z (103.8987 1.39044 0)\n\n\nPOINT Z (103.8068 1.438017 0)\n\n\nPOINT Z (103.7874 1.433436 0)\n\n\nPOINT Z (103.8886 1.395647 0)\n\n\npreschool simple feature data frame is in WSG84 coordinate system. To re-project preschool data frame to another coordinate system mathematically, use the st_transform() function of sf package.\n\npreschool3414 <- st_transform(preschool,crs=3414)\n\n\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (13258.34 35611.04 0)\n\n\nPOINT Z (35272.09 41373.42 0)\n\n\nPOINT Z (25050.54 46634.14 0)\n\n\nPOINT Z (22892.48 46127.66 0)\n\n\nPOINT Z (34155.79 41949.13 0)"
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-e-importing-and-converting-an-aspatial-data-and-save-it-as-tibble-data-frame-then-simple-feature-data-frame",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-e-importing-and-converting-an-aspatial-data-and-save-it-as-tibble-data-frame-then-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section E: Importing and converting an Aspatial Data and save it as tibble data frame, then simple feature data frame",
    "text": "Section E: Importing and converting an Aspatial Data and save it as tibble data frame, then simple feature data frame\n\nlibrary(readr)\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExamine whether data file has been imported correctly using list()\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\n*note the latitude and longitude are in decimal degree format. It suggests the data in in WSG84 Geographic Coordinate System.\n\nCreating a simple feature data frame from an aspatial data frame\nTo convert listings data frame into a simple feature data frame, use the st_as_sf() of the sf packages.\n\nlibrary(dplyr)\nlibrary(sf)\nlibrary(tidyverse)\nlistings_sf <- st_as_sf(listings, coords=c(\"longitude\",\"latitude\"),crs=4326) %>% \n  st_transform(crs=3414)\n\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nA new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\nplot(listings_sf)\n\nWarning: plotting the first 9 out of 16 attributes; use max.plot = 16 to plot\nall"
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-f-geoprocessing-with-sf-package",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-f-geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section F: Geoprocessing with sf package",
    "text": "Section F: Geoprocessing with sf package\n\nBuffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nSolution:\n\nst_buffer()\ncalculate buffer area using st_area() & create new column in sf data frame\nsum AREA column\n\n\nbuffer_cycling <- st_buffer(cyclingpath, dist= 5, nQuadSegs=30)\n\n\nplot(st_geometry(cyclingpath))\n\n\n\n\n\nplot(st_buffer(cyclingpath, dist= 5, nQuadSegs=30))\n\n\n\n\n\n# add a new and calculate new column AREA\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\n# Sum the column AREA\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\nclass(buffer_cycling)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nUnderstanding st_buffer() <- page 29\n\nl1 = st_as_sfc(\"LINESTRING(0 0,1 5,4 5,5 2,8 2,9 4,4 6.5)\")\nop = par(mfrow=c(2,3))\nplot(st_buffer(l1, dist = 1, endCapStyle=\"ROUND\"), reset = FALSE, main = \"endCapStyle: ROUND\")\nplot(l1,col='blue',add=TRUE)\nplot(st_buffer(l1, dist = 1, endCapStyle=\"FLAT\"), reset = FALSE, main = \"endCapStyle: FLAT\")\nplot(l1,col='blue',add=TRUE)\nplot(st_buffer(l1, dist = 1, endCapStyle=\"SQUARE\"), reset = FALSE, main = \"endCapStyle: SQUARE\")\nplot(l1,col='blue',add=TRUE)\nplot(st_buffer(l1, dist = 1, nQuadSegs=1), reset = FALSE, main = \"nQuadSegs: 1\")\nplot(l1,col='blue',add=TRUE)\nplot(st_buffer(l1, dist = 1, nQuadSegs=2), reset = FALSE, main = \"nQuadSegs: 2\")\nplot(l1,col='blue',add=TRUE)\nplot(st_buffer(l1, dist = 1, nQuadSegs= 5), reset = FALSE, main = \"nQuadSegs: 5\")\nplot(l1,col='blue',add=TRUE)\n\n\n\n\n\n\nHow to create simple feature (sf) object?\nhttps://mgimond.github.io/Spatial/anatomy-of-simple-feature-objects.html\n\n\n\nPoint-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nSolution:\n\nst_intersects() The ST_Intersects() function returns t (TRUE) if the intersection of two geometries does not result in an empty set; otherwise, returns f (FALSE).\n*For intersection on pairs of simple feature geometries (two polygons), use the function st_intersection instead of st_intersects\nlengths() of base R\nGet or set the length of vectors (including lists) and factors, and of any other R object for which a method has been defined.\ntop_n() of dplyr package\n\nCode below shows the points lying in the polygons\n\n#mpsz3414 is polygon (323 entries) but preschool3414 is points (1925 entries)\ntest1 <- st_intersects(mpsz3414, preschool3414)\ntest1\n\nSparse geometry binary predicate list of length 323, where the\npredicate was `intersects'\nfirst 10 elements:\n 1: (empty)\n 2: 703, 1361, 1409, 1663, 1722\n 3: (empty)\n 4: 290, 687, 1071, 1780\n 5: 465, 1901\n 6: 65, 84, 88, 111, 120, 474, 518, 912, 1853, 1899\n 7: 705, 1250, 1407, 1544\n 8: 106, 489\n 9: 325, 793, 1577, 1604, 1803, 1843\n 10: 1656\n\n\nCode below sums the number of points in each polygon\n\nlengths(st_intersects(mpsz3414, preschool3414))\n\n  [1]  0  5  0  4  2 10  4  2  6  1  6  2  0  1  6  0  0  0  0  2  0  1  0  4  3\n [26]  1  7  2  9  7  0  0  4  0  3 10  1  3  0  5  0  3  1  0  3  0  3  1  6  0\n [51]  1  2  1  2  3  0  1  1  2  0  3  0  2  5  1  0 11  3 10  1  2  6  1  4  0\n [76]  0  2 10  0  0  1  0  4  1  2  0  0  3  0  5  3  3  0  0  5  0  0  2  0  3\n[101]  7  0 13  0  3  2  2 23 15 18  0  0  5  5  0  7 20 15  6  1  1  0  0  0  5\n[126]  5  3  0  0  7  4  4  8  5  5  3 11  8  6  0  3  6  2  0  1 21  0  5 14 10\n[151]  7 23 10  4  0  6  4  0  2  7  5  0 30  3 15  0 27 12  3 14  8 10  4  5  9\n[176] 10 25  0  0 11 11 30  8  0  7 17  4  4 58  8  0  3 28  7  2  2  9  3 31 14\n[201]  0 11  0 11  4 10 18 14  0  6 22 16  8 17 13 18  6 18 12  6  0 11  4 10 10\n[226]  7  5  8  1  7 17  3  8  0  0 16 10  9 14  7  7 14  4  1  3 19  2 10  5  9\n[251]  3  0 15  9  4  0  0  7 13 26  0 13 19 14  0 12 21  0  2  0  0 30 17  0 19\n[276]  6  6  5  5  0  0 12 17 18  1  0 16  1  0 47 23  1  7  0  0  9  0  0  0 10\n[301]  0  0  1  0 17 16  8 10  2 13  0  0  0  1  0  0  2  0  0  3  0  0  0\n\n\nCombining all together and creating a new column in mpsz3414\n\n#mpsz3414 is polygon but preschool3414 is points\nmpsz3414$`Presch Count` <- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`Presch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nFind subzone with most number of preschools in Singapore\n\ntop_n(mpsz3414, 1,`Presch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry Presch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nNext task: Calculate the density of pre-school by planning subzone.\nSolution:\n\nuse st_area() of sf package to derive the area of each planning subzone\nNext, mutate() of dplyr package is used to compute the density\n\n\nmpsz3414$AREA <- mpsz3414 %>% st_area()\n\n\nmpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = `Presch Count`/AREA *100000)\n\n\ntop_n(mpsz3414, 5,`PreSch Density`)\n\nSimple feature collection with 5 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25594.22 ymin: 28623.75 xmax: 32860.5 ymax: 48182.13\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO         SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N\n1       27          8             CECIL    DTSZ08      Y DOWNTOWN CORE\n2       37          4           PHILLIP    DTSZ04      Y DOWNTOWN CORE\n3      253          3   SERANGOON NORTH    SGSZ03      N     SERANGOON\n4      278          3     MANDAI ESTATE    MDSZ03      N        MANDAI\n5      291          3 SEMBAWANG CENTRAL    SBSZ03      N     SEMBAWANG\n  PLN_AREA_C          REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         DT    CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.20\n2         DT    CENTRAL REGION       CR 615D4EDDEF809F8E 2014-12-05 29706.72\n3         SG NORTH-EAST REGION      NER C685042EC58E5C55 2014-12-05 32458.80\n4         MD      NORTH REGION       NR F6266F7368DBB9AB 2014-12-05 27082.70\n5         SB      NORTH REGION       NR 772A64AB9A93FC3A 2014-12-05 26268.73\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry Presch Count\n1 29011.33  2116.0947  196619.86 MULTIPOLYGON (((29808.18 28...            7\n2 29744.91   871.5549   39437.94 MULTIPOLYGON (((29814.11 29...            1\n3 39597.64  3610.7324  684704.30 MULTIPOLYGON (((32860.5 397...           15\n4 45367.46  1633.7084  143137.94 MULTIPOLYGON (((27119.56 45...            5\n5 47558.08  3955.1176  962437.40 MULTIPOLYGON (((26311.14 46...           23\n             AREA   PreSch Density\n1 196619.86 [m^2] 3.560169 [1/m^2]\n2  39437.94 [m^2] 2.535630 [1/m^2]\n3 684704.30 [m^2] 2.190727 [1/m^2]\n4 143137.94 [m^2] 3.493134 [1/m^2]\n5 962437.40 [m^2] 2.389766 [1/m^2]\n\n\n\nplot(mpsz3414[\"PreSch Density\"])"
  },
  {
    "objectID": "Hands-on_Ex01/Hands-on_Ex01.html#section-g-exploratory-data-analysis-eda",
    "href": "Hands-on_Ex01/Hands-on_Ex01.html#section-g-exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Section G: Exploratory Data Analysis (EDA)",
    "text": "Section G: Exploratory Data Analysis (EDA)\nUsing ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\n\nhist(mpsz3414$`PreSch Density` ,main = \"Histogram of PreSch Density in Planning subzones\", xlab = \"Density\")\n\n\n\n\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(`PreSch Density`))) + \n  geom_histogram(bins=20,\n                 color='black',\n                 fill =\"light blue\") +\n  labs(title= 'Are Pre-schools evenly distributed in Singapore?',\n       subtitle = 'There are many planning subzones with a single pre-school, on the other hand, \\nthere are two planning subzones with at least 20 pre-schools',\n       x='Pre-School Density (per km sq)',\n       y= 'Frequency')\n\n\n\n\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(`PreSch Density`), y= as.numeric(`Presch Count`))) + \n  geom_point(color='blue') +\n  labs(title= 'Scatterplot of Pre-school Count against Density',\n       x='Pre-school Density (per km sq)',\n       y= 'Pre-School Count')"
  },
  {
    "objectID": "Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this hands-on exercise, I learn how to plot functional and truthful choropleth maps by using r packages called tmap package.\nBeside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\n\n#pacman::p_load(sf,tmap, tidyverse)\nlibrary(sf)\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(tmap)"
  },
  {
    "objectID": "Hands-on_Ex02/Hands-on_Ex02.html#import-geospatial-data-into-r",
    "href": "Hands-on_Ex02/Hands-on_Ex02.html#import-geospatial-data-into-r",
    "title": "Hands-on_Ex02",
    "section": "2.3.2 Import Geospatial Data into R",
    "text": "2.3.2 Import Geospatial Data into R\n\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex02\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex02/Hands-on_Ex02.html#import-attribute-data-into-r",
    "href": "Hands-on_Ex02/Hands-on_Ex02.html#import-attribute-data-into-r",
    "title": "Hands-on_Ex02",
    "section": "2.3.3 Import attribute data into R",
    "text": "2.3.3 Import attribute data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npopdata %>% head()\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011"
  },
  {
    "objectID": "Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "href": "Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "title": "Hands-on_Ex02",
    "section": "2.3.4 Data preparation",
    "text": "2.3.4 Data preparation\nPrepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\n\n\n2.3.4.1 Data Wrangling\n\npivot_wider() (rows to column headers) of tidyr package, and\nmutate() (create new cal col), filter() (subset rows), group_by() and select() (select cols) of dplyr package\n\n\npopdata2020 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA,SZ,AG) %>% \n  summarise(POP = sum(Pop)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = AG,values_from = POP) %>% \n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15])) %>%\n  mutate(AGED = rowSums(.[16:21])) %>%\n  mutate(TOTAL = rowSums(.[3:21])) %>% \n  mutate(DEPENDENCY = (YOUNG + AGED)/`ECONOMY ACTIVE`) %>% \n  select(PA,SZ,YOUNG,`ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopdata2020 \n\n# A tibble: 332 × 7\n   PA         SZ                     YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPEND…¹\n   <chr>      <chr>                  <dbl>            <dbl> <dbl> <dbl>    <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre  1290             2760   760  4810    0.743\n 2 Ang Mo Kio Cheng San               5640            16460  6050 28150    0.710\n 3 Ang Mo Kio Chong Boon              5100            15000  6470 26570    0.771\n 4 Ang Mo Kio Kebun Bahru             4620            13010  5120 22750    0.749\n 5 Ang Mo Kio Sembawang Hills         1880             3630  1310  6820    0.879\n 6 Ang Mo Kio Shangri-La              3330             9050  3610 15990    0.767\n 7 Ang Mo Kio Tagore                  1940             4480  1530  7950    0.775\n 8 Ang Mo Kio Townsville              4190            11950  5100 21240    0.777\n 9 Ang Mo Kio Yio Chu Kang               0                0     0     0  NaN    \n10 Ang Mo Kio Yio Chu Kang East       1110             2410   750  4270    0.772\n# … with 322 more rows, and abbreviated variable name ¹​DEPENDENCY\n\n\nRefer to this link for difference between group_by() - mutate() and group_by() - summarise()\nungroup() usually done after performing calculation in group()\n\npopdata20201 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA,SZ,AG) %>% \n  summarise(POP = sum(Pop))\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopdata20201\n\n# A tibble: 6,308 × 4\n# Groups:   PA, SZ [332]\n   PA         SZ                     AG         POP\n   <chr>      <chr>                  <chr>    <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4     170\n 2 Ang Mo Kio Ang Mo Kio Town Centre 10_to_14   280\n 3 Ang Mo Kio Ang Mo Kio Town Centre 15_to_19   340\n 4 Ang Mo Kio Ang Mo Kio Town Centre 20_to_24   270\n 5 Ang Mo Kio Ang Mo Kio Town Centre 25_to_29   260\n 6 Ang Mo Kio Ang Mo Kio Town Centre 30_to_34   310\n 7 Ang Mo Kio Ang Mo Kio Town Centre 35_to_39   330\n 8 Ang Mo Kio Ang Mo Kio Town Centre 40_to_44   400\n 9 Ang Mo Kio Ang Mo Kio Town Centre 45_to_49   480\n10 Ang Mo Kio Ang Mo Kio Town Centre 5_to_9     230\n# … with 6,298 more rows\n\n\n\n\n2.3.4.2 Joining the attribute data and geospatial data\nConvert PA and SZ fields in popdata2020 into all uppercase using:\n\ntoupper() <- to upper case\nmutate.at()<- mutate multiple columns\nargument: .var <- list of columns generated by vars()\nargument: .funs <- a function fun, a quosure style lambda\n\n\npopdata2020 <- popdata2020 %>% \n  mutate_at(.var= vars(PA,SZ),\n            .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` >0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n#write_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex02/Hands-on_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex02/Hands-on_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on_Ex02",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm() (Quick thematic plot)\nPlotting highly customisable thematic map by using tmap elements.\n\n\n2.4.1 Plotting a choropleth map quickly using qtm()\n\ntop_n(mpsz_pop2020, 1,`DEPENDENCY`)\n\nSimple feature collection with 1 feature and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 42513.65 ymin: 38644.89 xmax: 44163.44 ymax: 41072.58\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO   SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      229          6 LOYANG WEST    PRSZ06      N  PASIR RIS         PR\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 05FD555397CBEE7A 2014-12-05 43294.83 39888.77   6203.002\n  SHAPE_Area        PA YOUNG ECONOMY ACTIVE AGED TOTAL DEPENDENCY\n1    2114789 PASIR RIS     0             10  190   200         19\n                        geometry\n1 MULTIPOLYGON (((43756.39 39...\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\nCreating a Choropleth map by using tmap’s elements\ntm_shape() <- define input data and specify the shape object / spatial data object\ntm_fill() <- fills polygons (no border)\n\nstyle: method to process the color scale when col (data variable) is a numeric variable. To process numeric and categorical use “cat”\npalette : palettes names or vectors of colors. default is taken from tm_layout’s aes.paletttes argument. To reverse the colour scheme , add a “-” prefix.\n\ntm_borders() <- draws the borders of polygons (alpha is 0-1, transparency)\ntm_polygons() (= tm_fill() + tm_borders() )<- fills the polygon and draws the polygon borders\n*qtm = shape + polygon or * qtm = shape + fill + border\ntm_layout() <- specify map layout\n\naes.palette <- ‘seq’ (sequential palettes), ‘div’ (diverging palettes) , ‘cat’ (categorical palettes)\n\ntm_compass() <- create map compass\ntm_scale_bar() <- creates scale bar\ntm_grid() <- creates grid lines (alpha is 0-1, transparency of grid lines)\ntm_credits() <- create a text for credits\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n2.4.2.1 Drawing a base map\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons()\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons('DEPENDENCY')\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n2.4.2.3. Drawing a choropleth map using tm_fill() and tm_border()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY')\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY')+\n  tm_borders(alpha = 1 , lwd = 0.5)\n\n\n\n\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\n2.4.3 Data classification methods of tmap\nThe point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\nQuantile classification with 5 classes The Jenks method clusters data into groups that minimize the within-group variance and maximize the between-group variance.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", n = 5, style = 'jenks') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual data classification\n\ntm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'equal') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\ntm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'kmeans') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'sd') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'fisher') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", n = 3, style = 'jenks') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", n = 10, style = 'jenks') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.3.2 Plotting choropleth maps with custome break\nThe breakpoints can be set explicitly by means of the breaks argument to the tm_fill().\n\nbreaks include min and max\nto have n categories, n+1 elements to be specified in breaks option\nvalues must be in increasing order\n\nGood practise: descriptive statistics on variable before setting break points\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\nboxplot(mpsz_pop2020$DEPENDENCY, outline=FALSE)\n\n\n\n\nWith reference to summary stats and boxplot above,\n\nbreak points are 0.6, 0.7, 0.8, 0.9\nmin = 0 and max = 1.0\nbreak vector is thus c(0, 0.6, 0.7, 0.8, 0.9, 1.0)\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", breaks = c(0, 0.6, 0.7, 0.8, 0.9, 1.0)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n2.4.4 Colour scheme\n\n2.4.4.1 Using ColourBrewer palette\nAssign the preferred colour to palette argument of tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReverse the colour scheme by adding “-”\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.4.5 Map Layouts\n\ncustomise title, scale bar, compass, margins, aspect ratios\nother than colour palette and data classification (breaks) which is done in tm_fill()\n\n\n2.4.5.1 Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style()\nPredefined styles: ‘white’, ‘gray’, ‘natural’, ‘bw’, ‘classic’, ‘cobalt’, albatross’, ‘beaver’, ‘col_blind’, ‘watercolor’\nBelow is an example of classic style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('natural')\n\ntmap style set to \"natural\"\n\n\nother available styles are: \"white\", \"gray\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n2.4.5.3 Cartographic Furniture\nCan include other map furniture like compass, scale bar, and grid lines\ntmap_style has to be used at the last, think cannot mix with tm\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\")) +\n  tmap_style('natural')\n\ntmap style set to \"natural\"\n\n\nother available styles are: \"white\", \"gray\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nTo reset the default style, refer below\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n2.4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\n2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\ndefine ncols in tm_fill() : c(‘YOUNG’, ‘AGED’ , ‘TOTAL’)\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c('YOUNG', 'AGED','TOTAL'),\n          style='equal',\n          palette='Blues') +\n  tm_layout(legend.position = c('right','bottom')) +\n  tm_borders(alpha = 0.5) +\n  tmap_style('white')\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\nAssigning multiple values to at least one of the aesthetic arguments\n\n\nshape + polygon method (Prof’s)\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tmap_style('white')\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n#from hands- on 5\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\nshape + fill + borders method (YX’s)\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c('YOUNG', 'AGED','TOTAL'),\n          style=c('equal', 'quantile', 'equal'),\n          palette= list('Blues', 'Greens', 'Reds')) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c('right','bottom'))\n\n\n\n#  tmap_style('white')\n\n\n\n2.4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\nthres.poly: number that specifies the threshold at which polygons are taken into account. The number itself corresponds to the proportion of the area sizes of the polygons to the total polygon size. By default, all polygons are drawn.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style= 'quantile',\n          palette = 'Blues',\n          thres.poly = 0) +\n  tm_facets(by = 'REGION_N',\n            free.coords = TRUE,\n            drop.shapes = TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c('center','center'),\n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nCreating multiple stand-alone maps with tmap_arrange() asp : aspect ratio\nnrow : number of rows (ncols)\n\nyoungmap <- tm_shape(mpsz_pop2020) + \n  tm_polygons('YOUNG',\n              style= 'quantile',\n              palette = 'Blues')\n\nagedmap <- tm_shape(mpsz_pop2020) + \n  tm_polygons('AGED',\n              style= 'quantile',\n              palette = 'Blues')\n\ntmap_arrange(youngmap,agedmap, asp = 3, nrow=2)\n\n\n\n\n\n\n\n2.4.7 Mappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\",]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Mapping spatial obj with conditions \\n(Central Region)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\n\n\n\n\n\n2.4.8. Tmap summary\nFrom chap 2, using tmap package to plot\n1. tm_shape+ tm_polygon\n2. tm_shape+ tm_fill + tm_borders _ tm_layout\n3. qtm\nChap 2: To plot small multiple chloroplath maps via qtm or tmap elements:\n1. Add multiple values to tm_polygon or tm_fill\n2. Tm_facets\n3. Tm_arrange\nChap 3: To plot small multiple layered chloroplath maps via plot() method:\n 4. To arrange the maps via plot(),\npar(mfrow=c(2,2)) <- 2x2 layout\nFrom chap 3: to add layers to a plot\n1. just keep repeating plot(weight matrix ,coords,add=TRUE)\nhttps://rstudio-pubs-static.s3.amazonaws.com/730482_d7889d9c65c8422f843b3d4e0196633c.html"
  },
  {
    "objectID": "Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on_Ex02",
    "section": "2.5 Reference",
    "text": "2.5 Reference\n\n2.5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n2.5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n2.5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html",
    "href": "Hands-on_Ex03/Hands-on_ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "In this hands-on exercise, I will learn how to compute spatial weights."
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#the-study-area-and-data",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#the-study-area-and-data",
    "title": "Hands-on_Ex03",
    "section": "3.2 The Study Area and Data",
    "text": "3.2 The Study Area and Data\n\nHunan country boundary layer -geospatial data in ESRI shapefile format\nhunan_2012.csv - contains local development indicators in 2012\n\n\n3.2.1 Getting Started (ctrl-atl-i)\n\nlibrary(sf)\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\nlibrary(spdep)\n\nLoading required package: sp\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\nlibrary(tmap)\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#getting-the-data-into-r-environment",
    "title": "Hands-on_Ex03",
    "section": "3.3 Getting the Data Into R Environment",
    "text": "3.3 Getting the Data Into R Environment\n\n3.3.1 Import shapefile into r environment\n\nhunan <- st_read(dsn='data/geospatial' ,\n                 layer = 'Hunan')\n\nReading layer `Hunan' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex03\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.3.2 Import csv file into r environment\n\nhunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n3.3.3 Performing relational join\nUpdate attribute table of Hunan’s SpatialPolygonDataFrame (dbf) with attribute field of hunan2012 dataframe. (csv)\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\n\nhunan ’s coordinate system is WGS 84. Does it mean that we are nut using projected system here?\n\nst_geometry(hunan)\n\nGeometry set for 88 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOLYGON ((112.0625 29.75523, 112.069 29.74544, ...\n\n\nPOLYGON ((112.2288 29.11684, 112.2339 29.11214,...\n\n\nPOLYGON ((111.8927 29.6013, 111.8906 29.59811, ...\n\n\nPOLYGON ((111.3731 29.94649, 111.3737 29.94167,...\n\n\nPOLYGON ((111.6324 29.76288, 111.6312 29.75165,..."
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#visualising-regional-development-indicator",
    "title": "Hands-on_Ex03",
    "section": "3.4 Visualising Regional Development Indicator",
    "text": "3.4 Visualising Regional Development Indicator\n\nprepare basemap and choropleth map showing distribution of GDPCC 2012 by using qtm() of tmap package\n\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text('NAME_3', size = 0.3)\n\ngdppc <- qtm(hunan, 'GDPPC')\n\ntmap_arrange(basemap, gdppc, asp = 1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#computing-contiguity-spatial-weights",
    "title": "Hands-on_Ex03",
    "section": "3.5 Computing Contiguity Spatial Weights",
    "text": "3.5 Computing Contiguity Spatial Weights\n\nuse poly2nb() of spdep package to compute contiguity weight matrices\nthis weight matrices has class of ‘nb’\nthis function builds a neighbour list based on regions with contiguous boundaries\nthe ‘queen’ argument’s default value is set to FALSE (first order neighbours). Might need to set to TRUE when needed\n\n\n3.5.1 Computing (QUEEN) contiguity based neighbours\n\nwm_q <- poly2nb(hunan, queen=TRUE) #wm_q is class 'nb'\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n88 area units in Hunan\nmost connected unit (88) has 11 neighbours\ntwo area units (30 & 65) with only one neighbour\nThe ‘link number distribution’ tells us the frequency distribution ( 2 county has 1 neighbour, 2 county has 2 neighbours, 12 county has 3 neighbours)\n\nTo see the neighbours of the first polygon, use code chunk below:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nclass(wm_q[[1]])\n\n[1] \"integer\"\n\n\nYX tried to show the neighbours of first 2 polygons\n\nwm_q[1:2]\n\n[[1]]\n[1]  2  3  4 57 85\n\n[[2]]\n[1]  1 57 58 78 85\n\n\nTo retrieve the country name of the Polygon ID = 1, use code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the country names of the five neighbouring polygons,\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nTo retrieve the GDPPC of the five neighbour countries,\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nYX’s practise (use c(2,3,4,57,85)) instead of wm_q[[1]]\n\nnb1 <- wm_q[[1]] #neighbours of polygon ID=1\nnb1 <- hunan$GDPPC[c(2,3,4,57,85)] #retrieve GDPPC of neighbours of polygon ID= 1\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nTo display the complete weight matrix, use str()\n\nrow 1: neighbours of polygon ID =1\nrow 2: neighbours of polygon ID =2 etc..\n\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n3.5.2 Creating (ROOK) contiguity based neighbours\nTo compute the Rook contiguity weight matrix,\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n88 area units in Hunan\nmost connected unit (85) has 11 neighbours\ntwo area units (30 & 65) with only one neighbour\n\n\n\n3.5.3 Visualising contiguity weights (find centroid coords first)\n\na connectivity graph takes a point and displays a line to each neighbouring point\nneed a point in polygon via polygon centroids <- calculate using the sf package first\n\nTo obtain coordinates in a separate data frame\n\ninput vector is the geometry column of us.bound, an sf object <- a polygon\napply mapping function (st_centroid) on input vector <- find the CG of this polygon\nuse map_dbl variation of map from the purrr package\n\nAfter finding centroid, to access longitude values\n\ndouble bracket notation [[ ]] and 1\n\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nTo access the latitude value\n\ndouble bracket notation [[ ]] and 2\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nWith both longitude and latitude, use cbind() to combine both in the same object,\n\ncoords <- cbind(longitude, latitude)\n\nCheck the first few observations,\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n3.5.3.1 Plotting Queen contiguity based neighbours map\nUse the plot() function\n\nThe shape of the markers: The plot markers are by default small, empty circles. These are also known as plot characters - denoted by pch. You can change these by adding a new pch value in the plot function. Pch values 0 to 25 are valid and give several different symbols on the graph. Pch 0 is for a square, 1 is for a circle, 3 is for a triangle, 4 is for a cross and so on.\nSize of the plot markers: This aspect of a graph can be controlled using the cex parameter. The cex parameter can be set to 0.5 if you want the markers to be 50% smaller and 1.5 if you want them to be 50% larger.\nColor of the plot markers: The symbols can be assigned one or many colors. These colors can be selected from a list provided by R under the colors() function.\n\nwm_ q is weight matrix using queen method (88 rows of list of neighbours)\ncoords is an array of x,y coordinates for each of the 88 counties\n\nplot(hunan$geometry, border = 'lightgrey')\nplot(wm_q, coords, pch = 19, cex = 0.6, add= TRUE, col='red')\n\n\n\n\n\n\n3.5.3.2 Plotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border = 'lightgrey')\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col =\"blue\")\n\n\n\n\n\n\n3.5.3.3 Plotting both Queen and Rook contiguity based neighbours maps\nUse the par(mfrow) function\n\npar(mfrow = c(1,2))  # by 1 by 2 plotting matrix\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#computing-distance-based-neighbours",
    "title": "Hands-on_Ex03",
    "section": "3.6 Computing distance based neighbours",
    "text": "3.6 Computing distance based neighbours\n\nIn this section, I will derive distance-based weight matrices by using dnearneigh() of spdep package.\ndnearneigh(x, d1, d2, row.names = NULL, longlat = NULL, bounds=c(\"GE\", \"LE\"),\n use_kd_tree=TRUE, symtest=FALSE, use_s2=packageVersion(\"s2\") > \"1.0.7\", k=200,\n dwithin=TRUE)\nidentifies neighbours using distance band with lower d1= and upper d2= bounds controlled by the bounds= argument\nIf unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\n3.6.1 First, determine the cut-off distance (upper distance threshold to be considered a neighbour)\nFirst, determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. Output: NN of poly1 = poly3, NN of poly2 = poly 78 etc…. The output iz a knn object with class ‘knn’.\n$nn\n[,1]\n[1,] 3\n[2,] 78\n[3,] 1\nAfter applying knearneigh() , convert the knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\n\nNeighbour list object:\nNumber of regions: 88\nNumber of nonzero links: 88\nPercentage nonzero weights: 1.136364\nAverage number of links: 1\nNon-symmetric neighbours list\n\nReturn the length of neighbour relationship edges by using nbdists() of spdep. <- returns the distance to one’s nearest neighbour? 88 polygons means 88 nearest neighbours. The function returns in the units of the coordinates if the coordinates are projected (in km if unprojected)\n\n[[1]]\n[1] 25.53398\n[[2]]\n[1] 43.03114\n[[3]]\n[1] 25.53398\n\nRemove the list structure of the returned object by using unlist(). The output is in numeric format.\n\nOutput: 25.53398 43.03114 25.53398 29.28480 29.28480 45.98097 58.52704 28.95985 34.45062 37.99885 44.49442 33.48816 35.98123\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords)) # nb class with 1 NN\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE)) #dist to 1 NN, class numeric\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79. So using this as the upper threshold will help to ensure that all units (polygons) will have at least one neighbour.\n\nclass (k1)\n\n[1] \"nb\"\n\n\n\nclass(k1dists)\n\n[1] \"numeric\"\n\n\n\n\n3.6.2 Computing fixed distance weight matrix\n(Earlier, we had used poly2nb(hunan, queen=TRUE/FALSE) to find neighbours using Queen or Rook method)\nNow, to find neighbours using distance, we use the dnearneigh() ,\n\nlonglad argument: TRUE if point coordinates are geographical longitude-latitude decimal degrees\n\nDoes the average number of links mean that each polygon has average number of 3.6 nearest neighbours with upper bound of 62?\n\nwm_d62 <- dnearneigh(coords,0, 62, longlat=TRUE)  #class 'nb' by upper bound distance\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n3.6.2.1 Plotting fixed distance weight matrix\n\nwm_d62 is the fixed distance weight matrix,\ncoords refers to long, lat coordinates for CG of each polygon\nk1 is the integer ID of the polygon which is the nearest neighbour to me\n\n\nplot(hunan$geometry, border = 'lightgrey')\nplot (wm_d62, coords,add=TRUE)\nplot(k1, coords, add=TRUE, col ='red', length=0.08)\n\n\n\n\nThe red lines shows the links of 1st nearest neighbours and the black lines show the lines of neighbours within the cut-off distance of 62km.\nTo plot red and black side by side,\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border='light grey', main=\"1st NN\")\nplot(k1, coords, add=TRUE, col=\"red\", length='0.08')\nplot(hunan$geometry, border='light grey', main='Distance Link')\nplot(wm_d62, coords, add=TRUE, pch=19, cex=0.6)\n\n\n\n\n\n\n\n3.6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k = 6)) # class nb by fixed NN\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n*as seen above, each polygon has strictly six neighbours\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n3.6.3.1 Plotting distance based neighbours\n\nplot(hunan$geometry, border=\"light grey\")\nplot(knn6, coords, pch= 19, cex=0.6, add=TRUE, col='red')"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#weights-based-on-idw",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#weights-based-on-idw",
    "title": "Hands-on_Ex03",
    "section": "3.7 Weights based on IDW",
    "text": "3.7 Weights based on IDW\nCompute the spatial weight matrix using the Inversed Distance Method\n\nrecall from lecture that closer polygon has greater weightage if we take inverse\n\nFirst compute distance between areas using y using nbdists() of spdep.\n\nGiven a list of spatial neighbour links (a neighbours list of object type nb), the function returns the Euclidean distances along the links in a list of the same form as the neighbours list. If longlat = TRUE, Great Circle distances are used.\n\nThen obtain the inversed-dist spatial weight matrix (ids) using lapply() to apply the function 1/(x), where x is the distance.\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)  # class nbdists\n# [[1]] 65.12941 25.53398 54.91802 35.61352 87.32760\n#[[2]] 65.12941 56.67944 51.92312 43.03114 58.16151\nids <-lapply (dist, function(x) 1/(x)) # class list, inverse dist \nhead(ids)\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n\n\n3.7.1 Row-standardised weights matrix\nUse the nb2listw()\nnb2listw(neighbours, glist=NULL, style=\"W\", zero.policy=NULL)\nArguments\n\n\n\n\n\n\n\nneighbours\nan object of class nb\n\n\n\n\nglist\nlist of general weights corresponding to neighbours\n\n\nstyle\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”\n\n\nzero.policy\ndefault NULL, use global option value; if FALSE stop with error for any empty neighbour sets, if TRUE permit the weights list to be formed with zero-length weights vectors\n\n\n\nDetails\nStarting from a binary neighbours list, in which regions are either listed as neighbours or are absent (thus not in the set of neighbours for some definition), the function adds a weights list with values given by the coding scheme style chosen.\nWeights to each neighboring polygon\n\neach neighboring polygon will be assigned equal weight (style=“W”) <- row standardised\nThis is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values\ndrawback of this method is that polygon along the edge will base their lagged values on fewer polygons, thus over estimating the true nature of spatial autocorrelation in the data. Next time can consider other more robust options are available, notably style=“B” <- basic binary coding\n\n\nrswm_q <- nb2listw(wm_q, style = 'W', zero.policy = TRUE)\nrswm_q # class\"listw\" \"nb\"  \n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s four neighbours type:\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nExplanation of above: Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nYX’s practise (There are two variables in rswm_q, namely $neighbours and $ weight)\n\nstr(rswm_q)\n\nList of 3\n $ style     : chr \"W\"\n $ neighbours:List of 88\n  ..$ : int [1:5] 2 3 4 57 85\n  ..$ : int [1:5] 1 57 58 78 85\n  ..$ : int [1:4] 1 4 5 85\n  ..$ : int [1:4] 1 3 5 6\n  ..$ : int [1:4] 3 4 6 85\n  ..$ : int [1:5] 4 5 69 75 85\n  ..$ : int [1:4] 67 71 74 84\n  ..$ : int [1:7] 9 46 47 56 78 80 86\n  ..$ : int [1:6] 8 66 68 78 84 86\n  ..$ : int [1:8] 16 17 19 20 22 70 72 73\n  ..$ : int [1:3] 14 17 72\n  ..$ : int [1:5] 13 60 61 63 83\n  ..$ : int [1:4] 12 15 60 83\n  ..$ : int [1:3] 11 15 17\n  ..$ : int [1:4] 13 14 17 83\n  ..$ : int [1:5] 10 17 22 72 83\n  ..$ : int [1:7] 10 11 14 15 16 72 83\n  ..$ : int [1:5] 20 22 23 77 83\n  ..$ : int [1:6] 10 20 21 73 74 86\n  ..$ : int [1:7] 10 18 19 21 22 23 82\n  ..$ : int [1:5] 19 20 35 82 86\n  ..$ : int [1:5] 10 16 18 20 83\n  ..$ : int [1:7] 18 20 38 41 77 79 82\n  ..$ : int [1:5] 25 28 31 32 54\n  ..$ : int [1:5] 24 28 31 33 81\n  ..$ : int [1:4] 27 33 42 81\n  ..$ : int [1:3] 26 29 42\n  ..$ : int [1:5] 24 25 33 49 54\n  ..$ : int [1:3] 27 37 42\n  ..$ : int 33\n  ..$ : int [1:8] 24 25 32 36 39 40 56 81\n  ..$ : int [1:8] 24 31 50 54 55 56 75 85\n  ..$ : int [1:5] 25 26 28 30 81\n  ..$ : int [1:3] 36 45 80\n  ..$ : int [1:6] 21 41 47 80 82 86\n  ..$ : int [1:6] 31 34 40 45 56 80\n  ..$ : int [1:4] 29 42 43 44\n  ..$ : int [1:4] 23 44 77 79\n  ..$ : int [1:5] 31 40 42 43 81\n  ..$ : int [1:6] 31 36 39 43 45 79\n  ..$ : int [1:6] 23 35 45 79 80 82\n  ..$ : int [1:7] 26 27 29 37 39 43 81\n  ..$ : int [1:6] 37 39 40 42 44 79\n  ..$ : int [1:4] 37 38 43 79\n  ..$ : int [1:6] 34 36 40 41 79 80\n  ..$ : int [1:3] 8 47 86\n  ..$ : int [1:5] 8 35 46 80 86\n  ..$ : int [1:5] 50 51 52 53 55\n  ..$ : int [1:4] 28 51 52 54\n  ..$ : int [1:5] 32 48 52 54 55\n  ..$ : int [1:3] 48 49 52\n  ..$ : int [1:5] 48 49 50 51 54\n  ..$ : int [1:3] 48 55 75\n  ..$ : int [1:6] 24 28 32 49 50 52\n  ..$ : int [1:5] 32 48 50 53 75\n  ..$ : int [1:7] 8 31 32 36 78 80 85\n  ..$ : int [1:6] 1 2 58 64 76 85\n  ..$ : int [1:5] 2 57 68 76 78\n  ..$ : int [1:4] 60 61 87 88\n  ..$ : int [1:4] 12 13 59 61\n  ..$ : int [1:7] 12 59 60 62 63 77 87\n  ..$ : int [1:3] 61 77 87\n  ..$ : int [1:4] 12 61 77 83\n  ..$ : int [1:2] 57 76\n  ..$ : int 76\n  ..$ : int [1:5] 9 67 68 76 84\n  ..$ : int [1:4] 7 66 76 84\n  ..$ : int [1:5] 9 58 66 76 78\n  ..$ : int [1:3] 6 75 85\n  ..$ : int [1:3] 10 72 73\n  ..$ : int [1:3] 7 73 74\n  ..$ : int [1:5] 10 11 16 17 70\n  ..$ : int [1:5] 10 19 70 71 74\n  ..$ : int [1:6] 7 19 71 73 84 86\n  ..$ : int [1:6] 6 32 53 55 69 85\n  ..$ : int [1:7] 57 58 64 65 66 67 68\n  ..$ : int [1:7] 18 23 38 61 62 63 83\n  ..$ : int [1:7] 2 8 9 56 58 68 85\n  ..$ : int [1:7] 23 38 40 41 43 44 45\n  ..$ : int [1:8] 8 34 35 36 41 45 47 56\n  ..$ : int [1:6] 25 26 31 33 39 42\n  ..$ : int [1:5] 20 21 23 35 41\n  ..$ : int [1:9] 12 13 15 16 17 18 22 63 77\n  ..$ : int [1:6] 7 9 66 67 74 86\n  ..$ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n  ..$ : int [1:9] 8 9 19 21 35 46 47 74 84\n  ..$ : int [1:4] 59 61 62 88\n  ..$ : int [1:2] 59 87\n  ..- attr(*, \"class\")= chr \"nb\"\n  ..- attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n  ..- attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n  ..- attr(*, \"type\")= chr \"queen\"\n  ..- attr(*, \"sym\")= logi TRUE\n $ weights   :List of 88\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num 1\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:2] 0.5 0.5\n  ..$ : num 1\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:9] 0.111 0.111 0.111 0.111 0.111 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:11] 0.0909 0.0909 0.0909 0.0909 0.0909 ...\n  ..$ : num [1:9] 0.111 0.111 0.111 0.111 0.111 ...\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:2] 0.5 0.5\n  ..- attr(*, \"mode\")= chr \"binary\"\n  ..- attr(*, \"W\")= logi TRUE\n  ..- attr(*, \"comp\")=List of 1\n  .. ..$ d: num [1:88] 5 5 4 4 4 5 4 7 6 8 ...\n - attr(*, \"class\")= chr [1:2] \"listw\" \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language nb2listw(neighbours = wm_q, style = \"W\", zero.policy = TRUE)\n\n\nUsing the same method, we can also derive a row standardised distance weight matrix (closer neighbours have higher weightings) by using the code chunk below.\n*notice that the spatial weight matrix using inverse weight method is used here and with style = ‘B’\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style='B', zero.policy=TRUE)\nrswm_ids # class \"listw\" weights list \"nb\"  \n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#application-of-spatial-weight-matrix",
    "title": "Hands-on_Ex03",
    "section": "3.8 Application of Spatial Weight Matrix",
    "text": "3.8 Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and spatial window sum.\n\n\n3.8.1 Spatial lag with row-standardized weights\n\ncompute the average neighbour GDPCC values for each polygon\ncommonly called spatially lagged values\nIn the code below, use spatial weight matrix (equal weightage of 0.2 for poly1 etc.. ) by 0.2 * 20981 + 0.2 * 34592 + 0.2 * 24473 + 0.2 * 21311 + 0.2 * 22879 = 24847.20 for poly1 “Anxiang”\n22724.80 is the average GDPPC for poly2 based on equal weightage (0.2) of all its five neighbours . 24143.25 for poly3 based on equal weightage (0.25) based on four neighbours.\n\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag # numeric class\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries (neighbours of poly1 using queen method) by using the code chunk below.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC)) # two lists: county and ave GDPC appended\nlag.res <- as.data.frame(lag.list) # class dataframe of Anxiang - 24847.20 , Hanshou 22724.80 etc\ncolnames(lag.res) <- c('NAME_3', 'lag GDPPC') # rename the col of lag.res\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe average neighboring income values for each county is now stored as a new column ‘lag GDPPC’ in hunan sf\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm (hunan, 'GDPPC')\nlag_gdppc <- qtm(hunan, 'lag GDPPC')\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n3.8.2 Spatial lag as a sum of neighboring values\nPart 1: Obtain binary weights spatial weight matrix ‘b_weights’:\nwm_q (aka neighbour list) is a ‘nb’ class containing neighbour IDs for each polygon. E.g. first three polygons has neighbours\n$ : int [1:5] 2 3 4 57 85\n$ : int [1:5] 1 57 58 78 85\n$ : int [1:4] 1 4 5 85\nTo create a binary list, we will now apply lambda function of 0*neighbour ID + 1 ; so that if there is a neighbour, the value is 1.\nPart 2: Create the standardise row matrix using nb2listw() , with glist argument = b_weights to take binary feature into account\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1) # class 'list'\n# [[2]]\n#[1] 1 1 1 1 1\n#[[3]]\n#[1] 1 1 1 1\n\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2 # class \"listw\" , \"nb\"\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c('NAME_3', 'lag_sum GDPPC')\n\nexamine lag_sum (list of polygon and the sum of their neighbours’ GDPPC)\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlot both the GDPPC and Spatial Lag Sum GDPPC for comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n3.8.3 Spatial window average\n\nrow-standardized weights\nincludes the diagonal element\n\nNeed to add the diagonal element to the neighbour structure before assigning weights. Start by using include.self to include ‘k6’ to a new variable before directly altering its structure to add diagonal element.\n\nwm_q1 <- wm_q\n\nIF we want to add the diagonal element to the neighbour list, we just need to use include.self() from spdep. Use this instead to overwrite: wm_q1 <- include.self(wm_q1)\n\nwm_q1 <- include.self(wm_q1) #look the same as wm_q1 but diff structurally\n\nTo obtain the row standardised weights with diagonal, use nb2listw()\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nCreate the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nconvert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, \n                             hunan$GDPPC))\nlag.list.wm_q1\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\nhead(lag_wm_q1.res)\n\n  c..Anxiang....Hanshou....Jinshi....Li....Linli....Shimen....Liuyang...\n1                                                                Anxiang\n2                                                                Hanshou\n3                                                                 Jinshi\n4                                                                     Li\n5                                                                  Linli\n6                                                                 Shimen\n  c.24650.5..22434.1666666667..26233..27084.6..26927..22230.1666666667..\n1                                                               24650.50\n2                                                               22434.17\n3                                                               26233.00\n4                                                               27084.60\n5                                                               26927.00\n6                                                               22230.17\n\n\nrenames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppend lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nqtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n3.8.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but\n\nwithout using row-standardized weights.\nassign binary weights to the neighbor structure that includes the diagonal element.\n\n\nwm_q2 <- wm_q\n\nAdd the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_q2 <- include.self(wm_q2)\n\n\nsummary(wm_q2)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 10 12 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 2 links\n1 most connected region:\n85 with 12 links\n\n\nAssign binary weights to the neighbour structure that includes the diagonal element. (If there is a neighbour, give a value of 1)\n\nb_weights <- lapply(wm_q2, function(x) 0*x +1)\nb_weights[1:5]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n[[2]]\n[1] 1 1 1 1 1 1\n\n[[3]]\n[1] 1 1 1 1 1\n\n[[4]]\n[1] 1 1 1 1 1\n\n[[5]]\n[1] 1 1 1 1 1\n\n\nuse nb2listw() and glist() to explicitly assign weight values.\n\nb_weigths2 <- nb2listw(wm_q2,glist=b_weights, style='B')\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nConvert the lag variable listw object into a data.frame by using as.data.frame().\nRename the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppend w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nUse qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n1. Coords- refers to coordinates (x,y) of centroid’s CG\n2. Neighbour id list (Queen, rook, dist based, fix nn)\n3. Spatial weight matrix based on inverse distance matrix (ids) nbdists () & lapply () , based on a neighbour id list\n4.1. Row standardize matrix using rswm_q<-nb2listw(wm_q) (equal weight for each neighbour)\n4.2. Row standardize inverse distance matrix using Rswm_ids<-nb2listw(neighbour id list wm_q, glist= ids)\n5.1 Create spatially lagged values with standardized weights for each polygon - lag.listw(rswm_q, hunan$gdppc) (Usually standardised rows (for find ave spatial lagged variables) for Queen/Rook methods)\n5.2. Create spatially lagged values as SUM of neighbouring values\n\nCreate neighbour structure with Binary weights using b_weights<-lapply (wm_q, function(x) 0*x+1)\nb_weights2<-Nb2listw(wm_q, glist=b_weights) to assign weights\nCreate lag sum variable (a calculated variable for each polygons’s gdppc neighbour sum) using lag.listw(b_weights2, hunan$gdpcc) again\n\n5.3. Spatial Window AVERAGE (create neighbour structure with (or without) diagonals , standardize rows with equal weight)\n\nwm_q1 <-Include.self(wm_q)\nStandardize row weights using nb2listw() again\nUse lag.listw() again to get spatially lag variable\nAppend, set as df, rename cols, left join , plot qtm x2 and tm_arrange()\n\n5.4. Spatial Weights SUM (without row standardized weights, assign binary weights to neighbour structure with (or without) diagonal element)"
  },
  {
    "objectID": "Hands-on_Ex03/Hands-on_ex03.html#references",
    "href": "Hands-on_Ex03/Hands-on_ex03.html#references",
    "title": "Hands-on_Ex03",
    "section": "3.9 References",
    "text": "3.9 References\n\nCreating Neighbours using sf objects"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on_Ex04",
    "section": "",
    "text": "In this hands-on exercises, I will be\n1. computing Global (GSA) by using spdep package.\n2. computing Local measure of Spatial Autocorrelation (LISA) to detect clusters and outliers by using spdep packages\n3. computing Getis-Ord’s Gi-statistics for detecting hot spot or/ and cold spot area by using spdep package\n4. visualising the analysis output by using tmap package"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on_Ex04",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\nRecall\n\nwm_q is neighbour list (class = nb) <- poly2nb()\nfor distance based concept, find coordinates to relate to polygons first. Next find the upper bound so that each polygon has at least one neighbour. Use knearneigh() to find k-nearest neighbour, then convert knn object to nb object using knn2nb(). Lastly, use nbdists() to calculate distance of all neighbours. Use unlist() to remove list structure. use summary (k1dists) to check details. Get the threshold distance.\nNow we have coords and a distance threshold , we can create a neighbour list of nb class using dnearneigh(coords, 0, 62, longlat = TRUE)\n\nwm_d62 is a neighbour list obj with class nb, made from dnearneighbour(). Use summary(wm_d62) to check details. Use str(wm_d62) to see attributes, then index (wm_d62[1:5]) to view first 5 neighbour list.\n\nAlternatively, we can create a neighbour list based on adaptive distance using knn2nb( knearneigh(coords, k = 6)). knn6 is a neighbour list obj with class nb. We can plot the neighbours on map.\nUse nb2listw() to convert from nb obj to listw obj (To create spatial weight object to calculate spatial lag later)\n\nIn hands-on 3 , rswm_q is equal weightage spatial matrix object via rows standardisation <- nb2listw( nb class obj) . This is based on contiguity concept.\nIn hands-on 3, rswm_ids is a weighted spatial matrix object using contiguity concept, but infused with ids (inverse distance matrix, class list) <- nb2listw(nb class obj, glist = ids, style=‘B’). This is also based on contiguity method, but style B which is more robust as we differ the weighting according to another inverse distance matrix separately derived.\nin hands-on 4, wm62_lw is the binary weight spatial matrix object using fixed-distance concept. wm62_lw <- nb2listw(wm_d62, style = ‘B’). Can use summary(wm62_lw) for quick discovery. str(wm62_lw) to check attributes and then index wm62_lw$weights[1:5] to check the first five weights of our spatial weights matrix (binary)\nin hands-on 4, knn_lw is the binary weight spatial matrix object using adaptive distance concept (fixed number of neighbours)\n\nGDPPC.lag <- a spatial lag variable that gives the averaged neighbour GDPPC value for one’s neighbours <- lag.listw( weight matrix, shapefile file $ col)\nOther points to note: cbind() is to combine data frame with same number of rows.\n\nhunan is a simple feature collection with class ‘sf’ , ’ data frame’\nCreate a new sf data frame (hunan.gi) by adding a localG vector to hunan as a new column, use cbind() and then rename column. as.matrix(gi.fixed) straightens the Gi values into 1 col of 88 rows.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>% rename(gstat_fixed = as.matrix.gi.fixed.)\n\nSimilarly, create a new sf data frame by adding localMI vector to hunan sf dataframe as a new column,\n\nhunan.localMI <- cbind(hunan,localMI)%>% rename(Pr.Ii = Pr.z….E.Ii..)\n\nTo add a new lag_GDPPC column into hunan:\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\n\nAdd a new column of standardised GDPPC by scaling original GDPPC column.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector\n\nThe most indirect method (hands-on 3)\n\nlag.list <- list ( hunan$NAME_3, lag.listw (rswm_q, hunan $ GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(‘colname1’ , ‘colname2’)\nhunan <- leftjoin(hunan, lag.res)\n\n\nUse str(), summary(), glimpse(), attributes() on nb or listw class\nUse st_geometry() or st_crs() to check shapefiles\n\n\n4.2.1 The analytical question\n\nis there equal distribution of development in the province?\nif answer is NO, we ask “is there sign of clustering?” (GLOBAL spatial autocorrelation)\nif YES, “Where are the clusters” (LOCAL spatial autocorrelation)\n\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n4.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise:\n\ngeospatial data: Hunan province administrative boundary layer at county level in ESRI shapefile format\naspatial data: Hunan_2012.csv containing local development indicators\n\n\n\n4.2.3 Setting the Analytical Tools\nPackages we need:\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\n\nlibrary(sf)\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\nlibrary(spdep)\n\nLoading required package: sp\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\nlibrary(tmap)\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "title": "Hands-on_Ex04",
    "section": "4.3 Getting the Data Into R Environment",
    "text": "4.3 Getting the Data Into R Environment\n\n4.3.1 Import shapefile into r environment\n\nhunan <-st_read(dsn='data/geospatial',\n                layer= 'Hunan')\n\nReading layer `Hunan' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex04\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n*data is in WSG84 format, not projected yet. If we are going to extract the data, better not to st_transform() to project coordinate system first.\n\n\n4.3.2 Import csv file into r environment\n\nhunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n4.3.3 Performing relational join\n\nhunan <- left_join(hunan, hunan2012) %>% \n  select(1:4, 7, 15)\n\nJoining, by = \"County\"\n\n\nJoined by ‘County’, selected only columns NAME_2, ID_3, NAME_3, ENGTYPE_3, County, GDPPC, geometry is automatically included as last variable\n\n\n4.3.4 Visualising Regional Development Indicator\nNow we will prepare basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package\n*tm_fill() ’s n refer to the number of equal intervals\n\nequal <- tm_shape(hunan)+\n  tm_fill('GDPPC',\n          n=5,\n          style='equal') +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = 'Equal interval classification',\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2)\n\nquantile <- tm_shape(hunan)+\n  tm_fill('GDPPC',\n          n=5,\n          style='quantile') +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = 'Equal quantile classification',\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2)\n\ntmap_arrange(equal, quantile, asp =1, ncol=2)\n\nLegend labels were too wide. The labels have been resized to 0.36, 0.33, 0.33, 0.33, 0.33. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.36, 0.33, 0.33, 0.33, 0.33. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger."
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#global-spatial-autocorrelation",
    "title": "Hands-on_Ex04",
    "section": "4.4 Global Spatial Autocorrelation",
    "text": "4.4 Global Spatial Autocorrelation\n\ncompute global spatial autocorrelation statistics\nperform spatial complete randomness test for global spatial autocorrelation.\n\n\n4.4.1 Computing Contiguity Spatial Weights\n\nConstruct a spatial weights of study area using poly2nb() of the spdep package. This builds a neighbour list using contiguous boundaries.\n\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours. The mode is 5 neighbours and there are 24 county with 5 neighbours.\n\n\n4.4.2 Row-standardised weights matrix\nThis is one of the ways to assign weights to each neighboring polygon. Each neighbouring polygons will be assigned to equal weight (style = “W”). A fraction of (1/ #neighbours) will be assigned to each neighbouring country, then summing up the weighted GDPPC values.\nThis is an intuitive way to summarise neighbours’ values, but the drawback is that polygon along the edges have less neighbours and thus we might over or under estimate the true nature of the spatial autocorrelation in the data. Note that more robust option are available, notably style =“B” of the nb2listw() function.\n\nhelp(nb2listw)\n\nstarting httpd help server ... done\n\n\n\nrswm_q <- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nclass(rswm_q)\n\n[1] \"listw\" \"nb\"   \n\n\n\nattributes(rswm_q)\n\n$names\n[1] \"style\"      \"neighbours\" \"weights\"   \n\n$class\n[1] \"listw\" \"nb\"   \n\n$region.id\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n[16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\"\n[31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\"\n[46] \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \"56\" \"57\" \"58\" \"59\" \"60\"\n[61] \"61\" \"62\" \"63\" \"64\" \"65\" \"66\" \"67\" \"68\" \"69\" \"70\" \"71\" \"72\" \"73\" \"74\" \"75\"\n[76] \"76\" \"77\" \"78\" \"79\" \"80\" \"81\" \"82\" \"83\" \"84\" \"85\" \"86\" \"87\" \"88\"\n\n$call\nnb2listw(neighbours = wm_q, style = \"W\", zero.policy = TRUE)\n\n#attributes(rswm_q)$region.id\n\n\nmethods(class = \"nb\")\n\n[1] aggregate edit      intersect plot      print     setdiff   subset   \n[8] summary   union    \nsee '?methods' for accessing help and source code\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, I will perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n4.4.4 Moran’s I test\n“na.omit() returns the object with incomplete cases removed”\n\nmoran.test(hunan$GDPPC,\n           listw=rswm_q,\n           zero.policy=TRUE,\n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nNull hypothesis: The data observations are randomised.\nAlternative hypothesis: The data observations are not randomised (etc, clustering or deviations are observed between some observations)\nThe Moran’s I statistic value is positive, it implies that some clustering is observed.\nAt a p-value of less than 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that some of the observation are not randomly distributed.\n\n4.4.4.1 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed. When there is uncertainty in the data (data changes every week), we use Monte Carlo simulation (rand(), randbetween(), poisson(), depending on understanding of data), to generate 1000 random values)\n* simulation starts from ‘1’, to get 1000 simulations, we start at 1 and end with 999 (inclusive)\n\nset.seed(1234)\n\nbperm = moran.mc(hunan$GDPPC,\n                 listw=rswm_q,\n                 nsim=999,\n                 zero.policy= TRUE,\n                 na.action=na.omit)\n\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nWith a Moran I value of 0.30075 (positive means clustering, 0 means random, neg means deviation) , and a p value of less than 0.05 (statisfically significant), there are signs of clustering in the GDPPC in Hunan in some regions.\n\n\n4.4.4.2 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nstr(bperm)\n\nList of 7\n $ statistic  : Named num 0.301\n  ..- attr(*, \"names\")= chr \"statistic\"\n $ parameter  : Named num 1000\n  ..- attr(*, \"names\")= chr \"observed rank\"\n $ p.value    : num 0.001\n $ alternative: chr \"greater\"\n $ method     : chr \"Monte-Carlo simulation of Moran I\"\n $ data.name  : chr \"hunan$GDPPC \\nweights: rswm_q  \\nnumber of simulations + 1: 1000 \\n\"\n $ res        : num [1:1000] 0.05798 0.09954 0.06943 -0.10422 0.00381 ...\n - attr(*, \"class\")= chr [1:2] \"htest\" \"mc.sim\"\n\n\n\nclass(bperm)\n\n[1] \"htest\"  \"mc.sim\"\n\n\nAre these Moran’s I statistic values generated?\n\nhead(bperm$res)\n\n[1]  0.057980205  0.099537421  0.069425139 -0.104223988  0.003811019\n[6] -0.060131690\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nPlot histogram breaks: number of histogram cells\nfreq: logical; if TRUE, the histogram graphic is a representation of frequencies, the counts component of the result; if FALSE, probability densities, component density, are plotted (so that the histogram has a total area of one). Defaults to TRUE if and only if breaks are equidistant (and probability is not specified).\n\nhist(bperm$res,\n     freq=TRUE,\n     breaks= 20,\n     xlab= \"Simulated Moran's I\"\n     )\nabline(v = 0, col=\"red\")\n\n\n\n\nConclusion: Moran I value obtained earlier was 0.30075, it is likely to be more extreme than the critical value, which means highly likely that my dataset is very different from the null hypothesis. In other words, Moran I value of 0.30075 shows that signs of clustering is likely to be true than it is to be expected by chance alone.\nChallenge: Plot histogram using ggplot2 instead\n\nlibrary(ggplot2)\nbperm.df <- as.data.frame(bperm$res)\ncolnames(bperm.df)[1] <- 'res'\n\nc <- ggplot(bperm.df, aes(res))\n\nc +\n  geom_histogram(boundary = 0,\n                 colour = 'black',\n                 binwidth =0.02,\n                 alpha= 0.5) +\n  geom_vline(xintercept=0,\n             colour = 'red') +\n  labs(title = \"Histogram of Moran's I\",\n       x = \"Simulated Moran' I \")\n\n\n\n\n\n\n\n4.4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n4.4.5.1 Geary’s C test\nGeary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nNull hypothesis: The data observations are randomised.\nAlternative hypothesis: The data observations are not randomised (etc, clustering or deviations are observed between some observations)\nThe Geary’s C statistic value (=0.6907223) is between 0 and 1, it implies that some clustering is observed.\n1 means completely random, 1-3 means deviations\nAt a p-value of less than 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that some of the observation are not randomly distributed.\n\n\n4.4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbpermg = geary.mc(hunan$GDPPC,\n                  listw=rswm_q,\n                  nsim=999)\nbpermg\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSame statistical conclusion as above.\n\nclass(bpermg)\n\n[1] \"htest\"  \"mc.sim\"\n\nmethods(class='htest')\n\n[1] print\nsee '?methods' for accessing help and source code\n\nattributes(bperm)\n\n$names\n[1] \"statistic\"   \"parameter\"   \"p.value\"     \"alternative\" \"method\"     \n[6] \"data.name\"   \"res\"        \n\n$class\n[1] \"htest\"  \"mc.sim\"\n\nstr(bperm)\n\nList of 7\n $ statistic  : Named num 0.301\n  ..- attr(*, \"names\")= chr \"statistic\"\n $ parameter  : Named num 1000\n  ..- attr(*, \"names\")= chr \"observed rank\"\n $ p.value    : num 0.001\n $ alternative: chr \"greater\"\n $ method     : chr \"Monte-Carlo simulation of Moran I\"\n $ data.name  : chr \"hunan$GDPPC \\nweights: rswm_q  \\nnumber of simulations + 1: 1000 \\n\"\n $ res        : num [1:1000] 0.05798 0.09954 0.06943 -0.10422 0.00381 ...\n - attr(*, \"class\")= chr [1:2] \"htest\" \"mc.sim\"\n\n\n\n\n4.4.5.3 Visualising the Monte Carlo Geary’s C\nPlot a histogram to reveal the distribution of the simulated values\n\nmean(bpermg$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bpermg$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bpermg$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bpermg$res,\n     freq= TRUE,\n     breaks=20,\n     xlab='Simulated Geary C')\n\nabline(v=1, col='red')\n\n\n\n\nFor Geary C, 1 means close to randomness. With a Geary C statistic value of 0.6907223, it is highly likely for this value to be more extreme than critical value on the left side. It means high chance we can reject the null hypthesis and conclude that there are signs of clustering. These signs are likely to be real than expected by chance?"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#spatial-correlogram",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#spatial-correlogram",
    "title": "Hands-on_Ex04",
    "section": "4.5 Spatial Correlogram",
    "text": "4.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n4.5.1 Compute Moran’s I correlogram\n\nto compute 6-lag (means contiguity order = 6) spatial correlogram of GDPPC, use the sp.correlogram() of the spdep package."
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#arguments",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#arguments",
    "title": "Hands-on_Ex04",
    "section": "Arguments",
    "text": "Arguments\n\nneighbours\n\nan object of class nb\n\nvar\n\na numeric vector\n\norder\n\nmaximum lag order\n\nmethod\n\n“corr” for correlation, “I” for Moran’s I, “C” for Geary’s C\n\nstyle\n\nstyle can take values W, B, C, and S\n\nrandomisation\n\nvariance of I or C calculated under the assumption of randomisation, if FALSE normality\n\nzero.policy\n\ndefault NULL, use global option value; if FALSE stop with error for any empty neighbour sets, if TRUE permit the weights list to be formed with zero-length weights vectors\n\n\nRefer to lecture notes on ORDER, order 1 means first layer of neighbours using the contiguity / boundary method. We want to check how the Moran’s I method changes as the neighbours get further and further away.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC,\n                          order =6 ,\n                          method = \"I\",\n                          style = \"W\")\n\nplot(MI_corr)\n\n\n\n\nBased on the plot above, not all autocorrelation values might be statistically significant, thus its important to print the analysis results as shown below:\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nDoes it mean that the Moran’s I statistic estimate for order =4 is not statically significant? If for order 4 is already not statistically significant, do we continue to consider n = 5 and n = 6?\n\n4.5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC,\n                          order =6 ,\n                          method = \"C\",\n                          style = \"W\")\n\nplot(GC_corr)\n\n\n\n\nTo check for statistical significance in the Geary C values:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nGeary C order 3,4,6 are not statistically significant? Do we ignore 3,4,6 only? or we ignore all of 3 to 6?"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#cluster-and-outlier-analysis",
    "title": "Hands-on_Ex04",
    "section": "4.6 Cluster and Outlier Analysis",
    "text": "4.6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, I will apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n4.6.1 Computing local Moran’s I\nLISA of an observation gives an indication of the extent of significant spatial clustering of similar values around that observation.\nTo compute local Moran’s I, the localmoran() function of spdep will be used.\n\ncomputes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\norder(hunan$County) gives 56 10 1 48 70 18 84 … the 56th element is the smallest, followed by 10th element as second smallest… Run order(c(1,5,2,8)) will get output: 1 3 2 4\n\nfips <- order(hunan$County) #by alphabetical order?\nfips\n\n [1] 56 10  1 48 70 18 84 37 24 69 87 38 39 49 11 83 50  2 19 20 21 82 81 64 51\n[26] 26 12 59 88 27  3 52 60 22 34  4 80 71  5 13 65  7 40 53 54 28 66 57  8 61\n[51] 67 23 77 14 75 41 46 79  6 35 62 42 78 85 29  9 43 86 47 68 36 30 44 45 63\n[76] 31 72 15 55 16 73 58 32 76 33 25 74 17\n\n\n\nclass(fips)\n\n[1] \"integer\"\n\n\n\nlocalMI <- localmoran(hunan$GDPPC,rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nclass(localMI)\n\n[1] \"localmoran\" \"matrix\"     \"array\"     \n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\nPrint Coefficient Matrices\nUtility function to be used in higher-level print methods, such as those for summary.lm, summary.glm and anova. The goal is to provide a flexible interface with smart defaults such that often, only x needs to be specified.\n\nlocalMI[c(1,2,3,4)]\n\n[1] -0.001468468  0.025878173 -0.011987646  0.001022468\n\n\nFips is an object of integer class. It contains the row ids if rows are to be arranged in alphabetical order.\n\nprintCoefmat(data.frame(\n  localMI[fips,],\n  row.names=hunan$County[fips],\n  check.names = FALSE))\n\n                       Ii        E.Ii      Var.Ii    Z.Ii Pr(z != E(Ii))    \nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -0.0725      0.9422301    \nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791      0.1391057    \nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -0.0663      0.9471636    \nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185      0.2230456    \nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  0.1293      0.8971056    \nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -0.0768      0.9387606    \nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590      0.0007822 ***\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895      0.1119416    \nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  0.6830      0.4946117    \nCili           7.3176e-02 -1.6747e-03  4.7902e-02  0.3420      0.7323546    \nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297      0.3031703    \nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159      0.1881947    \nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338      0.1023002    \nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  0.5120      0.6086619    \nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -0.9510      0.3415864    \nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305      0.3027630    \nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  0.7793      0.4357997    \nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  0.2627      0.7928094    \nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  0.1274      0.8986110    \nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  0.4629      0.6434065    \nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -0.2562      0.7978131    \nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  0.4349      0.6636633    \nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678      0.2855921    \nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -0.0475      0.9621124    \nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  0.5407      0.5887023    \nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  0.7969      0.4255374    \nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -0.5363      0.5917276    \nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204      0.3075618    \nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  0.7180      0.4727569    \nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759      0.2396152    \nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -0.0197      0.9843090    \nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543      0.1756424    \nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  0.4497      0.6529132    \nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  0.2342      0.8148123    \nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623      0.2451020    \nLi             1.0225e-03 -2.4048e-07  5.1060e-06  0.4526      0.6508382    \nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467      0.2952490    \nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335      0.0328837 *  \nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  0.3909      0.6959021    \nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -0.1768      0.8596957    \nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  0.1363      0.8915545    \nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972      0.0051555 ** \nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787      0.0376449 *  \nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690      0.1709996    \nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  0.9956      0.3194403    \nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  0.7166      0.4736044    \nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715      0.0003550 ***\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -0.1099      0.9125016    \nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274      0.0676458 .  \nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  0.7536      0.4511108    \nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698      3.049e-05 ***\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  0.7640      0.4448892    \nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  0.6771      0.4983276    \nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -0.7181      0.4726740    \nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  0.9797      0.3272227    \nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510      0.1467765    \nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583      0.0631298 .  \nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807      0.0928305 .  \nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -0.4773      0.6331568    \nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  0.0652      0.9480354    \nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  0.8536      0.3933400    \nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544      0.0636875 .  \nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002      0.0357113 *  \nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  0.5090      0.6107279    \nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582      0.2899569    \nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873      0.0001014 ***\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935      0.0282749 *  \nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213      1.551e-05 ***\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092      0.0704213 .  \nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539      0.0507157 .  \nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  0.4241      0.6715036    \nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  0.2667      0.7897221    \nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502      0.1210854    \nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  0.1929      0.8470456    \nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -0.0068      0.9945429    \nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726      0.1698803    \nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -0.6867      0.4922880    \nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202      0.2223756    \nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795      0.1390190    \nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409      0.2538993    \nYou            7.8750e-02 -7.2728e-03  1.2116e-01  0.2471      0.8048036    \nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  0.0069      0.9944802    \nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121      0.0699726 .  \nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  0.8608      0.3893219    \nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  0.9221      0.3564539    \nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855      0.2358293    \nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688      0.0001094 ***\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -0.7014      0.4830289    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nYiXin’s prac , filter only those p-value < 0.05\n\nxyz <- data.frame(\n  localMI[fips,],\n  row.names=hunan$County[fips],\n  check.names = FALSE)\n\nxyz %>% \n    filter(`Pr(z != E(Ii))`<=0.05)\n\n                  Ii          E.Ii      Var.Ii      Z.Ii Pr(z != E(Ii))\nChangsha   4.9022015 -0.2134796356 2.319446791  3.359010   7.822232e-04\nLiling     1.3774283 -0.0150967924 0.426010680  2.133501   3.288368e-02\nLiuyang    3.3688217 -0.0775018462 1.518028327  2.797152   5.155523e-03\nLonghui    0.8080051 -0.0113773401 0.155377915  2.078701   3.764485e-02\nMiluo      1.8703719 -0.0169268635 0.279248204  3.571457   3.550005e-04\nPingjiang -0.9896383 -0.0026457393 0.056027187 -4.169793   3.048768e-05\nTaojiang  -0.2539369 -0.0012394888 0.014477052 -2.100200   3.571125e-02\nWangcheng  4.4219586 -0.1106694416 1.359593011  3.887278   1.013746e-04\nWugang     0.7100317 -0.0078144096 0.107104342  2.193450   2.827494e-02\nXiangtan   0.2453007 -0.0003645745 0.003231947  4.321273   1.551317e-05\nZhuzhou    0.3286415 -0.0005243157 0.007239075  3.868772   1.093847e-04\n\n\n\n4.6.1.1 Mapping the local Moran’s I\n\nappend the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame\n\n\nhunan.localMI <- cbind(hunan,localMI)%>%\n  rename(Pr.Ii = Pr.z....E.Ii..)  \n#rename the last column \n#colnames(bperm.df)[1] <- 'res'\nhead(hunan.localMI)\n\nSimple feature collection with 6 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC           Ii          E.Ii\n1 Changde 21098 Anxiang      County Anxiang 23667 -0.001468468 -2.815006e-05\n2 Changde 21100 Hanshou      County Hanshou 20981  0.025878173 -6.061953e-04\n3 Changde 21101  Jinshi County City  Jinshi 34592 -0.011987646 -5.366648e-03\n4 Changde 21102      Li      County      Li 24473  0.001022468 -2.404783e-07\n5 Changde 21103   Linli      County   Linli 25554  0.014814881 -6.829362e-05\n6 Changde 21104  Shimen      County  Shimen 27137 -0.038793829 -3.860263e-04\n        Var.Ii        Z.Ii     Pr.Ii                       geometry\n1 4.723841e-04 -0.06626904 0.9471636 POLYGON ((112.0625 29.75523...\n2 1.016664e-02  0.26266425 0.7928094 POLYGON ((112.2288 29.11684...\n3 1.133362e-01 -0.01966705 0.9843090 POLYGON ((111.8927 29.6013,...\n4 5.105969e-06  0.45259801 0.6508382 POLYGON ((111.3731 29.94649...\n5 1.449949e-03  0.39085814 0.6959021 POLYGON ((111.6324 29.76288...\n6 6.475559e-03 -0.47728835 0.6331568 POLYGON ((110.8825 30.11675...\n\n\n\n\n4.6.1.2 Mapping local Moran’s I values\nUse the choropleth mapping functions of tmap package to plot local Moran’s I values.\nWhen the variable provided as the col argument is numeric, tmap will use the \"pretty\" style as a default. In other words, it runs tm_polygons(col = \"colname\", style = \"pretty\") invisibly to the user. This style rounds breaks into whole numbers where possible and spaces them evenly.\n\ntm_shape(hunan.localMI)+\n  tm_fill(col='Ii',\n          style=\"pretty\",\n          palette = \"RdBu\",\n          title = \"local Moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran' I statistic\",\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n4.6.1.3 Mapping local Moran’s I p-values\n\nmore meaningful to set our own breaks (alpha = 0.001, 0.01, 0.05, 0.1 etc) instead of using ‘style’\ninverse the color scheme for smaller p-values to have darker blue\n\n\ntm_shape(hunan.localMI)+\n  tm_fill(col='Pr.Ii',\n          breaks = c(-Inf,0.001,0.01,0.05,0.1,Inf),\n          palette = \"-Blues\",\n          title = \"local Moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran' p-values\",\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2) +\n  tm_text('County', size = 0.3)\n\nLegend labels were too wide. The labels have been resized to 0.44, 0.48, 0.48, 0.48, 0.50. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n4.6.1.4 Mapping both local Moran’s I values and p-values\n\nlocalMI.map <- tm_shape(hunan.localMI)+\n  tm_fill(col='Ii',\n          style=\"pretty\",\n          palette = \"RdBu\",\n          title = \"local Moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran' I statistic\",\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2)\n\npvalue.map <- tm_shape(hunan.localMI)+\n  tm_fill(col='Pr.Ii',\n          breaks = c(-Inf,0.001,0.01,0.05,0.1,Inf),\n          palette = \"-Blues\",\n          title = \"local Moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran' p-values\",\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2) +\n  tm_text('County', size = 0.3)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nLegend labels were too wide. The labels have been resized to 0.35, 0.39, 0.39, 0.39, 0.40. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\nThe Moran’s I plot gave us non sig plots, and we need to cross check with the plot on the right hand side (p-values). We can turn to the LISA map as it shows only the clusters or outliers with only significant regions.\nLater, we will see that even creating the Moran scatterplot via Moran.plot() will not tell us about statisitical significance.\nLISA uses the p-values in the localmoran() function primarily but it does not automatically plot out any maps in R. We have to manually write some R codes to indicate the HH, LL, LH, HL (spatial lag and local moran values) and non-significant areas and map these areas out."
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#creating-a-lisa-cluster-map",
    "title": "Hands-on_Ex04",
    "section": "4.7 Creating a LISA Cluster Map",
    "text": "4.7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n4.7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nplots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\n\nnci <- moran.plot(hunan$GDPPC,\n                  rswm_q,\n                  labels=as.character(hunan$County),\n                  xlab = \"GDPPC 2012\",\n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nLengshuijiang is in HL quad. “I am a high outlier among low neighbours”\nXiangtan is in LH quad. “I am a low outlier among high neighbours”\nChangsha is in the HH quad\n\n\n4.7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Explaining how to scale() function works:\nHere centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe standardised values of GDPPC values have mean of 0 and sd of 1?\n\n#adds a new column in hunan sf dataframe\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into our dataframe.\nYixin’s observation: without as.vector(), the [‘Z.GDPPC’] column in slotted between [‘GDPPC’] col and [‘geometry’] column. After as.vector(), this variable is after [‘geo’] col!\nNow, plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC,\n                   rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab = \"GDPPC 2012\",\n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\nWe can get the magnitude and the direction of the spatial autocorrelation from the slope of the Moran scatterplot. Positive means clustering observe and the magnitude indicates the degree of clustering.\nThe problem with the Moran scatterplot is that it does not tell us which Moran values are statistically significant and which are not . It also does not tell us where the hot and cold spots are located at.\nWe can use the LISA method to do so. localMoran() function\n\n\n\n4.7.3 Preparing LISA map classes\n1. vector(mode=? , length = ? ) is to create a vector (alternative1: a <-c(1,2,3)) (alternative2: series <- 1:10)\n2. mode = ‘numeric’, ‘character’, ‘integer’, ‘logical’\n3. typeof(a) to see datatype of elements inside. Other ways of examining : (class(a), length(a), str(a), attributes(a))\n4. other special values : -Inf, Inf\n5. https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/#:~:text=R’s%20basic%20data%20structures%20include,name%2C%20dimension%2C%20and%20class.\n\nquadrant <- vector(mode = \"numeric\", length = nrow(localMI))\nquadrant\n\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[39] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[77] 0 0 0 0 0 0 0 0 0 0 0 0\n\n\n\nnext, derive the lagged variable of interest (GDPPC) and center the spatially lagged variable around its mean\n\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\nclass(DV)\n\n[1] \"numeric\"\n\n\n\ncenter the local Moran’s around the mean\nthe first col [ , 1] of the localMI matrix contains LocalMoran’s I values\n\n\nLM_I <- localMI[,1] - mean(localMI[,1])\nclass(LM_I)\n\n[1] \"numeric\"\n\n\n\nNext, we will set a statistical significance level for the local Moran.\n\n\nsignif <- 0.05\n\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\nHere, are we using filters? Using DV and LM_I vectors to assign value of 1 to quadrant vector (init as all 0)\nDV < 0 means GDPPC spatial lag is lower than mean.; spatial lag is low?\nLM_I < 0 means Local Moran I value is less than mean. LISA of an observation gives an indication of the extent of significant spatial clustering of similar values around that observation. When LM_I > 0 means clustering of HH or LL values. When LM_I < 0 means dispersion of HL or LH values.\n\n\nquadrant[DV < 0 & LM_I > 0] <- 1 # low-low\nquadrant\n\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0\n[39] 1 1 0 1 1 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[77] 0 0 1 0 0 0 0 0 0 0 0 0\n\n\n\nquadrant[DV > 0 & LM_I < 0] <- 2 # low- high\nquadrant[DV < 0 & LM_I < 0] <- 3 # high- low\nquadrant[DV > 0 & LM_I > 0] <- 4 # high-high\nquadrant\n\n [1] 2 3 3 2 2 3 4 4 4 2 2 3 2 2 2 4 3 3 2 3 3 2 3 3 3 3 3 3 1 3 1 3 3 3 3 3 1 3\n[39] 1 1 3 1 1 1 3 4 2 1 3 3 3 3 1 3 1 2 2 2 3 3 3 3 2 3 2 4 2 4 3 3 4 2 2 4 3 2\n[77] 3 2 1 2 3 3 2 4 3 2 3 3\n\n\n\nlastly, place non-significant Moran in the category 0\n\n\nquadrant[localMI[,5]>signif] <- 0\nquadrant\n\n [1] 0 0 0 0 0 0 4 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[39] 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 2 0 0 0 4 0 0 4 0 0\n[77] 0 2 0 0 0 0 0 4 0 2 0 0\n\n\nCombining all together\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\n4.7.4 Plotting LISA map\n\nnow we build the LISA map by using the code chunks below.\n\n{r} # plus 1 because the indexing in R starts from 1.} c(sort(unique(quadrant)))+1\n\nNow we build LISA map\n\npopup.vars\nnames of data variables that are shown in the popups in \"view\" mode. If convert2density=TRUE, the derived density variable name is suffixed with _density. If NA (default), only aesthetic variables (i.e. specified by col and lwd) are shown). If they are not specified, all variables are shown. Set popup.vars to FALSE to disable popups. When a vector of variable names is provided, the names (if specified) are printed in the popups.\n\nhunan.localMI$quadrant <- quadrant\ncolours <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = 'quadrant',\n          palette= colours[c(sort(unique(quadrant))) + 1],\n          labels = clusters[c(sort(unique(quadrant))) + 1],\n          popups.var = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\nSome legend labels were too wide. These labels have been resized to 0.62. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\nFor effective visualisation, its better to plot both the local Moran’s I values map and its corresponding p-values next to each other\n\n\ngdppc <- qtm(hunan, 'GDPPC')\n\nhunan.localMI$quadrant <- quadrant\ncolours <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = 'quadrant',\n          palette= colours[c(sort(unique(quadrant))) + 1],\n          labels = clusters[c(sort(unique(quadrant))) + 1],\n          popups.var = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\ntmap_arrange(gdppc, LISAmap, \n             asp = 1, ncol =2)\n\nSome legend labels were too wide. These labels have been resized to 0.46. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\nQuadrant has removed all insignificant regions, thus hunan.localMI and hence LISA map do not include p > 0.05\nThe red regions have high GDPCC surrounded regions of by high GDPCC around me (spatial lag gdppc) The dark blue regions have low GDPCC and has low spatial lag (surrounding) gdppc values.\ncan also include the local Moran’s I map and p-value map as shown below for easy comparison. But note that areas that are statistically insignificant are also included.\n\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nLegend labels were too wide. The labels have been resized to 0.35, 0.39, 0.39, 0.39, 0.40. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\nThis seems like local MI prior to removing P-values > 0.05"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on_Ex04",
    "section": "4.8 Hot Spot and Cold Spot Area Analysis",
    "text": "4.8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995).\n\nlooks at neighbours within a defined proximity to identify where either high or low values clutser spatially\nstatistically significant hot-spots are recognised as areas of high values where where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists three steps\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 Deriving distance-based weight matrix\n\nWe need to define a new set of neighbours using DISTANCE. (earlier, spatial autocorrelation considered units that shared boundaries / contiguous concept)\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix\n\n\n\n4.8.2.1 Deriving the centroid\n\nneed points (x,y) to associate with each polygon in order to make connectivity graphs\nneed these coordinates in a separate data frame , to do this:\n\nUse a mapping function (map_dbl() from the purrr package) to apply a centroid function (st_centroid() ) on each element of a vector and returns another vector of the same length\ninput vector is the geometry column of us.bound\n\nTo get longitude values:\n\nmap the st_centroid() function over the geometry column of us.bound\nafter st_centroid() function is applied, access the longitude values by using double bracket notation [[ ]] and 1.\nto access the latitude values, use [[ ]] and 2.\n\n\nOthers: the map_dbl() outputs double vectors; decimals allowed while map_int() outputs integer vectors.\n\nst_geometry(hunan)\n\nGeometry set for 88 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOLYGON ((112.0625 29.75523, 112.069 29.74544, ...\n\n\nPOLYGON ((112.2288 29.11684, 112.2339 29.11214,...\n\n\nPOLYGON ((111.8927 29.6013, 111.8906 29.59811, ...\n\n\nPOLYGON ((111.3731 29.94649, 111.3737 29.94167,...\n\n\nPOLYGON ((111.6324 29.76288, 111.6312 29.75165,...\n\n\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nCombine the two vectors using cbind\n\ncoords <- cbind(longitude, latitude)\n\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n4.8.2.2 Determine the cut-off distance\n\nfind my nearest neighbour array ID within coords, and their corresponding (x,y) coordinates using knearneigh() of spdep.\nmynearestneighbour <- knearneigh(coords , k =1)\n\n\nmynearestneighbour <- knearneigh(coords)\n\n\nknearneigh(coords)$nn [1:5]\n\n[1]  3 78  1  5  4\n\n\nNearest neighbour of polygon 1 is polygon 3 etc…\n\nknearneigh(coords)$x [1:5,]\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n\n\n\nConvert the knn object to neighbours list of nb class using knn2nb().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 88 \nPercentage nonzero weights: 1.136364 \nAverage number of links: 1 \nNon-symmetric neighbours list\n\n\n\nreturn the length of neighbour relationship edges using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nremove the list structure of the returned object using unlist()\n\n\nk1dists <- unlist(nbdists(k1, coords, longlat=TRUE))\nhead(k1dists)\n\n[1] 25.53398 43.03114 25.53398 29.28480 29.28480 45.98097\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\nhunan dataset is unprojected dataset\nIf unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\nCodes can be combined as shown below\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n4.8.2.3 Computing fixed distance weight matrix\n\nNow we have all the neighbour distances, we can compute the nieghbour list of class nb by using dnearneigh() that requires us to indicate the distance threshold. The output is first a neighbour list of nb class.\n\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nsummary(wm_d62)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\n\nI can see my neighbours list using str()\n\n#str(wm_d62)\nwm_d62[1:5]\n\n[[1]]\n[1]  3  4  5 57 64\n\n[[2]]\n[1] 57 58 78 85\n\n[[3]]\n[1]  1  4  5 57\n\n[[4]]\n[1] 1 3 5\n\n[[5]]\n[1]  1  3  4 85\n\n\n\nTo create our spatial distance weight matrix, to convert nb object to spatial weight object wm62_lw: use nb2listw() , where the input arugment is a neighbour list of nb class.\nin the case below, we are using binary weight. So the spatial weight matrix will contain only 1 or 0.\n\n\nwm62_lw <- nb2listw(wm_d62, style= \"B\")\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\nstr(wm62_lw)\n\nList of 3\n $ style     : chr \"B\"\n $ neighbours:List of 88\n  ..$ : int [1:5] 3 4 5 57 64\n  ..$ : int [1:4] 57 58 78 85\n  ..$ : int [1:4] 1 4 5 57\n  ..$ : int [1:3] 1 3 5\n  ..$ : int [1:4] 1 3 4 85\n  ..$ : int 69\n  ..$ : int [1:2] 67 84\n  ..$ : int [1:4] 9 46 47 78\n  ..$ : int [1:4] 8 46 68 84\n  ..$ : int [1:4] 16 22 70 72\n  ..$ : int [1:3] 14 17 72\n  ..$ : int [1:5] 13 60 61 63 83\n  ..$ : int [1:4] 12 15 60 83\n  ..$ : int [1:2] 11 17\n  ..$ : int 13\n  ..$ : int [1:4] 10 17 22 83\n  ..$ : int [1:3] 11 14 16\n  ..$ : int [1:3] 20 22 63\n  ..$ : int [1:5] 20 21 73 74 82\n  ..$ : int [1:5] 18 19 21 22 82\n  ..$ : int [1:6] 19 20 35 74 82 86\n  ..$ : int [1:4] 10 16 18 20\n  ..$ : int [1:3] 41 77 82\n  ..$ : int [1:4] 25 28 31 54\n  ..$ : int [1:4] 24 28 33 81\n  ..$ : int [1:4] 27 33 42 81\n  ..$ : int [1:2] 26 29\n  ..$ : int [1:6] 24 25 33 49 52 54\n  ..$ : int [1:2] 27 37\n  ..$ : int 33\n  ..$ : int [1:2] 24 36\n  ..$ : int 50\n  ..$ : int [1:5] 25 26 28 30 81\n  ..$ : int [1:3] 36 45 80\n  ..$ : int [1:6] 21 41 46 47 80 82\n  ..$ : int [1:5] 31 34 45 56 80\n  ..$ : int [1:2] 29 42\n  ..$ : int [1:3] 44 77 79\n  ..$ : int [1:4] 40 42 43 81\n  ..$ : int [1:3] 39 45 79\n  ..$ : int [1:5] 23 35 45 79 82\n  ..$ : int [1:5] 26 37 39 43 81\n  ..$ : int [1:3] 39 42 44\n  ..$ : int [1:2] 38 43\n  ..$ : int [1:6] 34 36 40 41 79 80\n  ..$ : int [1:5] 8 9 35 47 86\n  ..$ : int [1:5] 8 35 46 80 86\n  ..$ : int [1:5] 50 51 52 53 55\n  ..$ : int [1:4] 28 51 52 54\n  ..$ : int [1:6] 32 48 51 52 54 55\n  ..$ : int [1:4] 48 49 50 52\n  ..$ : int [1:6] 28 48 49 50 51 54\n  ..$ : int [1:2] 48 55\n  ..$ : int [1:5] 24 28 49 50 52\n  ..$ : int [1:4] 48 50 53 75\n  ..$ : int 36\n  ..$ : int [1:5] 1 2 3 58 64\n  ..$ : int [1:5] 2 57 64 66 68\n  ..$ : int [1:3] 60 87 88\n  ..$ : int [1:4] 12 13 59 61\n  ..$ : int [1:5] 12 60 62 63 87\n  ..$ : int [1:4] 61 63 77 87\n  ..$ : int [1:5] 12 18 61 62 83\n  ..$ : int [1:4] 1 57 58 76\n  ..$ : int 76\n  ..$ : int [1:5] 58 67 68 76 84\n  ..$ : int [1:2] 7 66\n  ..$ : int [1:4] 9 58 66 84\n  ..$ : int [1:2] 6 75\n  ..$ : int [1:3] 10 72 73\n  ..$ : int [1:2] 73 74\n  ..$ : int [1:3] 10 11 70\n  ..$ : int [1:4] 19 70 71 74\n  ..$ : int [1:5] 19 21 71 73 86\n  ..$ : int [1:2] 55 69\n  ..$ : int [1:3] 64 65 66\n  ..$ : int [1:3] 23 38 62\n  ..$ : int [1:2] 2 8\n  ..$ : int [1:4] 38 40 41 45\n  ..$ : int [1:5] 34 35 36 45 47\n  ..$ : int [1:5] 25 26 33 39 42\n  ..$ : int [1:6] 19 20 21 23 35 41\n  ..$ : int [1:4] 12 13 16 63\n  ..$ : int [1:4] 7 9 66 68\n  ..$ : int [1:2] 2 5\n  ..$ : int [1:4] 21 46 47 74\n  ..$ : int [1:4] 59 61 62 88\n  ..$ : int [1:2] 59 87\n  ..- attr(*, \"class\")= chr \"nb\"\n  ..- attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n  ..- attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n  ..- attr(*, \"dnn\")= num [1:2] 0 62\n  ..- attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n  ..- attr(*, \"nbtype\")= chr \"distance\"\n  ..- attr(*, \"sym\")= logi TRUE\n $ weights   :List of 88\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num 1\n  ..$ : num [1:2] 1 1\n  ..$ : num 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:3] 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:5] 1 1 1 1 1\n  ..$ : num [1:6] 1 1 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:4] 1 1 1 1\n  ..$ : num [1:2] 1 1\n  ..- attr(*, \"mode\")= chr \"binary\"\n  ..- attr(*, \"B\")= logi TRUE\n - attr(*, \"class\")= chr [1:2] \"listw\" \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language nb2listw(neighbours = wm_d62, style = \"B\")\n\nwm62_lw$neighbours[1:5]\n\n[[1]]\n[1]  3  4  5 57 64\n\n[[2]]\n[1] 57 58 78 85\n\n[[3]]\n[1]  1  4  5 57\n\n[[4]]\n[1] 1 3 5\n\n[[5]]\n[1]  1  3  4 85\n\n\n\nwm62_lw$weights[1:5]\n\n[[1]]\n[1] 1 1 1 1 1\n\n[[2]]\n[1] 1 1 1 1\n\n[[3]]\n[1] 1 1 1 1\n\n[[4]]\n[1] 1 1 1\n\n[[5]]\n[1] 1 1 1 1\n\n\n\n\n\n4.8.3 Computing adaptive distance weight matrix\nHaving many neighbours smoothes the neighbour relationship across more neighbours. Therefore less densely populated regions have less neighbours. Regions with bigger area will also have less neighbours. So, we might want to CONTROL the number of neighbours using knearneigh() indicating k.\nWe can either accept asymmetric neighbours or impose symmetry.\n\nTo create our neighbours list of class nb based on 8 nearest neighbours:\n\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n#knn[1:5]\n\n\nTo convert our nb object to spatial weight object with binary weights:\n\n\nknn_lw <- nb2listw(knn, style = \"B\")\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\nAll of them are equal in number of connections (above) 8 neighbours, thus 8 binary weights (below).\n\n#str(knn_lw)\n#knn_lw$neighbours[1:10]\nknn_lw$weights[1:5]\n\n[[1]]\n[1] 1 1 1 1 1 1 1 1\n\n[[2]]\n[1] 1 1 1 1 1 1 1 1\n\n[[3]]\n[1] 1 1 1 1 1 1 1 1\n\n[[4]]\n[1] 1 1 1 1 1 1 1 1\n\n[[5]]\n[1] 1 1 1 1 1 1 1 1"
  },
  {
    "objectID": "Hands-on_Ex04/Hands-on_Ex04.html#computing-gi-statistics",
    "href": "Hands-on_Ex04/Hands-on_Ex04.html#computing-gi-statistics",
    "title": "Hands-on_Ex04",
    "section": "4.9 Computing Gi statistics",
    "text": "4.9 Computing Gi statistics\n\n4.9.1 Gi statistics using fixed distance\n\nfips <- order(hunan$County) #by alphabetical order?\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters\n\nNext, join the Gi values to their corresponding hunan sf data frame.\nas.matrix(gi.fixed) will aligned the Gi values into a single row to 88 values (akin to data frame)\ncbind() is column combine for data frames with equal number of rows. to create a new data frame hunan.gi\nrename the column\n\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>% \n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n4.9.2 Mapping Gi values with fixed distance weights\nTo map the Gi values derived using fixed distance weight matrix\n\ngdppc <- qtm(hunan, 'GDPPC') +\n  tm_layout(legend.width = 0.2,\n            legend.height = 0.2)\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col='gstat_fixed',\n          palette= '-RdBu',\n          style='pretty',\n          title='local Gi') +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.width = 0.3,\n            legend.height = 0.3)\n\ntmap_arrange(gdppc, Gimap,\n             asp=1, ncol=2)\n\nSome legend labels were too wide. These labels have been resized to 0.33, 0.33, 0.33, 0.31. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\n\n4.9.3 Gi statistics using adaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n4.9.4 Mapping Gi values with adaptive distance weights\n\ngdppc <- qtm(hunan, 'GDPPC') +\n  tm_layout(legend.width = 0.2,\n            legend.height = 0.2)\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col='gstat_adaptive',\n          palette= '-RdBu',\n          style='pretty',\n          title='local Gi adaptive') +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.width = 0.3,\n            legend.height = 0.3)\n\ntmap_arrange(gdppc, Gimap,\n             asp=1, ncol=2)\n\nSome legend labels were too wide. These labels have been resized to 0.33, 0.33, 0.33, 0.31. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?"
  },
  {
    "objectID": "Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on_Ex05",
    "section": "",
    "text": "In this hands-on exercise, I will\n\ndelineate homogeneous region by using geographically referenced multivariate data\nThere are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n\n\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\n\n\n\n\n5.2 Getting Started\n\n\nIn this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\n\n\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features. <- geospatial data\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level. < aspatial data\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)\n\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)\n\n\n\n\n\n\n\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf. Opening the .prj file in notepad reveals that it is in WGS 84 which has a crs code of 4326.\n\nshan_sf <-st_read(dsn='data/geospatial',\n                  layer='myanmar_township_boundaries')\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\yixin-neo\\ISSS624\\Hands-on_Ex05\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nCheck the states in Myanmar:\n\nlibrary(funModeling)\n\nLoading required package: Hmisc\n\n\nLoading required package: lattice\n\n\nLoading required package: survival\n\n\nLoading required package: Formula\n\n\n\nAttaching package: 'Hmisc'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    src, summarize\n\n\nThe following object is masked from 'package:psych':\n\n    describe\n\n\nThe following object is masked from 'package:plotly':\n\n    subplot\n\n\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n\n\nfunModeling v.1.9.4 :)\nExamples and tutorials at livebook.datascienceheroes.com\n / Now in Spanish: librovivodecienciadedatos.ai\n\nfreq (data = shan_sf,\ninput = 'ST')\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n             ST frequency percentage cumulative_perc\n1        Yangon        45      13.64           13.64\n2       Sagaing        37      11.21           24.85\n3      Mandalay        28       8.48           33.33\n4    Ayeyarwady        26       7.88           41.21\n5        Magway        25       7.58           48.79\n6  Shan (North)        24       7.27           56.06\n7  Shan (South)        21       6.36           62.42\n8        Kachin        18       5.45           67.87\n9       Rakhine        17       5.15           73.02\n10  Bago (East)        14       4.24           77.26\n11  Bago (West)        14       4.24           81.50\n12          Mon        10       3.03           84.53\n13  Shan (East)        10       3.03           87.56\n14  Tanintharyi        10       3.03           90.59\n15         Chin         9       2.73           93.32\n16  Nay Pyi Taw         8       2.42           95.74\n17        Kayah         7       2.12           97.86\n18        Kayin         7       2.12          100.00\n\n\n\ndplyr::count(wp_nga, status_cle, sort = TRUE)\n\nRetrieve only the SHAN states\n\nshan_sf <- shan_sf %>% \n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nChecking after filtering, Reduced to only 55 Rows, exactly the same as the number of rows in excel ICT file.\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\n\nict <- read_csv('data/aspatial/Shan-ICT.csv')\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nclass(ict)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame. In Myanmar, State - district - township\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nSix new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\n\n\n\n\n\n\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived,\n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived,\n       aes(x=`RADIO`)) +\n  geom_boxplot(color='black',\n                 fill='light blue')\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived,\n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nRADIO_PR (RADIO/TOTAL * 1000) is a better variable to use than RADIO alone as its is lesser in range, more normally distributed and less outlier.\nTo create multiple histograms of the other variables in a single plot:\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv ,llphone, mphone, computer, internet,\n          ncol=3,\n          nrow=2)\n\n\n\n\n\n\n\n\n\n\nFirst, we need to combine the geospatial data (i.e. shan_sf) and the aspatial data (i.e. ict_derived) together using the left_join function of dplyr package.\nThe shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\n\n\nshan_sf <- left_join(shan_sf,\n                     ict_derived,\n                     by = c('TS_PCODE'='TS_PCODE'))\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, 'RADIO_PR') +\n  tm_layout(legend.width= 0.3,\n            legend.height = 0.3)\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) +\n  tm_fill(col='TT_HOUSEHOLDS',\n          n= 5,\n          style='jenks',\n          title = 'Total households') +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.width= 0.3,\n            legend.height = 0.3)\n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.width= 0.3,\n            legend.height = 0.3)\n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\nLegend labels were too wide. The labels have been resized to 0.59, 0.55, 0.55, 0.55, 0.55. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.65, 0.65, 0.59, 0.55. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of total number of households and Radio penetration rate by using the code chunk below.\n\n#tmap_mode('plot')\n\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\nThere are some regions with lower number of households that actually have higher RADIO_PR.\n\n\n\n\n\nRemember for hierarchical clustering, there are three conditions to be met: (1) not to large a range (else standardisation) , (2) no missing values and (3) no multi-collinearity in the data variables.\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\nattributes(ict_derived)\n\n$names\n [1] \"DT_PCODE\"      \"DT\"            \"TS_PCODE\"      \"TS\"           \n [5] \"TT_HOUSEHOLDS\" \"RADIO\"         \"TV\"            \"LLPHONE\"      \n [9] \"MPHONE\"        \"COMPUTER\"      \"INTERNET\"      \"RADIO_PR\"     \n[13] \"TV_PR\"         \"LLPHONE_PR\"    \"MPHONE_PR\"     \"COMPUTER_PR\"  \n[17] \"INTERNET_PR\"  \n\n$row.names\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n[51] 51 52 53 54 55\n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nGet the correlationship between selected columns 12 to 17\n\ncluster_vars.cor = cor(ict_derived[12:17])\ncluster_vars.cor\n\n               RADIO_PR     TV_PR LLPHONE_PR   MPHONE_PR COMPUTER_PR\nRADIO_PR     1.00000000 0.2384742 -0.3099702 -0.06902561  0.08029318\nTV_PR        0.23847419 1.0000000  0.5030812  0.72178976  0.67947631\nLLPHONE_PR  -0.30997020 0.5030812  1.0000000  0.57472560  0.36132855\nMPHONE_PR   -0.06902561 0.7217898  0.5747256  1.00000000  0.73665849\nCOMPUTER_PR  0.08029318 0.6794763  0.3613286  0.73665849  1.00000000\nINTERNET_PR  0.14519332 0.5988209  0.2235271  0.64598089  0.86963033\n            INTERNET_PR\nRADIO_PR      0.1451933\nTV_PR         0.5988209\nLLPHONE_PR    0.2235271\nMPHONE_PR     0.6459809\nCOMPUTER_PR   0.8696303\nINTERNET_PR   1.0000000\n\n\nPlot the correlationship scatterlot\ncorrplot.mixed Using mixed methods to visualize a correlation matrix. Description: Using mixed methods to visualize a correlation matrix.\ncorrplot.mixed( corr, lower = “number”, upper = “circle”, tl.pos = c(“d”, “lt”, “n”), diag = c(“n”, “l”, “u”), bg = “white”, addgrid.col = “grey”, lower.col = NULL, upper.col = NULL, plotCI = c(“n”, “square”, “circle”, “rect”), mar = c(0, 0, 0, 0), ... ) |\nArguments\ncorr Matrix, the correlation matrix to visualize.\nlower Character, the visualization method for the lower triangular correlation matrix.\nupper Character, the visualization method for the upper triangular correlation matrix.\ntl.pos Character, ‘lt’, ‘d’ or ‘n’, giving position of text labels, ‘lt’ means left and top, ‘d’ means diagonal. If ‘n’, add no textlabel.\ndiag Character, for specifying the glyph on the principal diagonal. It is one of ‘n’ (default, draw nothing), ‘l’ (draw the glyphs of lower triangular) or ‘u’ (draw the glyphs of upper triangular).\nbg The background color.\naddgrid.col See the addgrid.col parameter in the function corrplot\nlower.col Passed as col parameter to the lower matrix.\nupper.col Passed as col parameter to the upper matrix.\nplotCI See the plotCI parameter in the function corrplot\n\ncorrplot.mixed(cluster_vars.cor,\n               lower ='ellipse',\n               upper= 'number',\n               tl.pos = 'lt',\n               diag = 'l',\n               tl.col='black')\n\n\n\n\nif the ellipse is very thin, correlation is strong. the direction of the ellipse tells us the sign of correlation.\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both\n\n\n\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame. The INTERNET_PR is intentionally left out as it is highly correlated with COMPUTER_PR\nst_set_geometry(NULL) will drop away the geometry column.\nselect() -ing only the clustering variable will not remove the geometry column.\n\ncluster_vars <- shan_sf %>% \n  st_set_geometry(NULL) %>% \n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars, 10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nTAKE NOTE: input of hclust() function must strictly contain only the clustering variables we need. Cannot have township column ‘TS.x’. Is it more for the dist() function used to compute the proximity matrix instead?\nNext, we need to change the rows ID by township name instead of row number by using the code chunk below.\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars, 10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\nDo not select column 1 as it is TS.x\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to standardise the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nThe values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to standardisation the clustering variables by using Z-score method.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\nshan_ict.z \n\n 5  Variables      55  Observations\n--------------------------------------------------------------------------------\nRADIO_PR \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n       55         0        55         1 -4.39e-17     1.132  -1.34273  -1.28307 \n      .25       .50       .75       .90       .95 \n -0.72823  -0.04483   0.49724   1.41282   1.83266 \n\nlowest : -1.847293 -1.541573 -1.366147 -1.332699 -1.323491\nhighest:  1.627091  1.797244  1.915285  2.219260  2.551763\n--------------------------------------------------------------------------------\nTV_PR \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n       55         0        55         1 7.614e-17     1.127  -1.83738  -1.49509 \n      .25       .50       .75       .90       .95 \n -0.37192   0.04865   0.60794   1.17947   1.54968 \n\nlowest : -2.468389 -2.014764 -1.878311 -1.819838 -1.725160\nhighest:  1.441668  1.541860  1.567929  1.687692  2.089322\n--------------------------------------------------------------------------------\nLLPHONE_PR \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n       55         0        55         1 8.781e-17     1.048   -1.0720   -0.9663 \n      .25       .50       .75       .90       .95 \n  -0.6939   -0.3317    0.4577    1.3265    2.0838 \n\nlowest : -1.186737 -1.128729 -1.107625 -1.056791 -1.047725\nhighest:  1.741485  2.045524  2.173195  2.905268  3.203349\n--------------------------------------------------------------------------------\nMPHONE_PR \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n       55         0        55         1 2.233e-17     1.137  -1.48270  -1.21458 \n      .25       .50       .75       .90       .95 \n -0.70539  -0.05001   0.65107   1.28802   1.80659 \n\nlowest : -1.580414 -1.530385 -1.498785 -1.475804 -1.277386\nhighest:  1.551825  1.607737  2.270563  2.292287  2.398655\n--------------------------------------------------------------------------------\nCOMPUTER_PR \n         n    missing   distinct       Info       Mean        Gmd        .05 \n        55          0         55          1 -9.819e-17      0.988    -0.9192 \n       .10        .25        .50        .75        .90        .95 \n   -0.8368    -0.6123    -0.2643     0.2683     1.2127     2.1337 \n\nlowest : -1.0291921 -1.0113273 -0.9737843 -0.8958623 -0.8951598\nhighest:  1.7461231  1.8620882  2.7674405  3.2608735  3.3148873\n--------------------------------------------------------------------------------\n\n\nIt is interesting to note that shan_ict.z is a matrix array and not a data frame\n\nclass(shan_ict)\n\n[1] \"data.frame\"\n\nclass(shan_ict.z)\n\n[1] \"matrix\" \"array\" \n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr <- ggplot(data = ict_derived,\n            aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green')\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot (data= shan_ict_s_df, aes(x=`RADIO_PR`)) +\n    geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green') +\n  ggtitle('Min-Max standardisation')\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot (data= shan_ict_z_df, aes(x=`RADIO_PR`)) +\n    geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green') +\n  ggtitle('Z-score standardisation')\n\nggarrange (r,s,z,\n          ncol = 3, \n          nrow = 1)\n\n\n\n\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible NOT to perform data standardisation if the values range of the clustering variables are not very large.\n\nr <- ggplot(data=ict_derived,\n            aes(x = `RADIO_PR`)) +\n  geom_density(color= 'black',\n            fill='light blue') +\n  ggtitle(\"Raw values without standardistation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df,\n            aes(x = `RADIO_PR`)) +\n  geom_density(color= 'black',\n            fill='light blue') +\n  ggtitle(\"Min_Max standardistation\")\n\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot (data= shan_ict_z_df, aes(x=`RADIO_PR`)) +\n  geom_density(color= 'black',\n            fill='light blue') +\n  ggtitle(\"Z-score standardistation\")\n\nggarrange(r, s,z,\n          ncol= 3,\n          nrow=1)\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\nclass(proxmat)\n\n[1] \"dist\"\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\nhclust() needs two inputs: proximty matrix and method for the hierachical clustering that we are using. It is important to note that\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\n\nstr(hclust_ward)\n\nList of 7\n $ merge      : int [1:54, 1:2] -6 -9 -35 -48 -15 -10 -1 -27 -13 -21 ...\n $ height     : num [1:54] 38.5 43.3 43.4 47.8 51.5 ...\n $ order      : int [1:55] 22 46 38 42 11 29 47 27 30 41 ...\n $ labels     : chr [1:55] \"Mongmit\" \"Pindaya\" \"Ywangan\" \"Pinlaung\" ...\n $ method     : chr \"ward.D\"\n $ call       : language hclust(d = proxmat, method = \"ward.D\")\n $ dist.method: chr \"euclidean\"\n - attr(*, \"class\")= chr \"hclust\"\n\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\ncex. A numerical value giving the amount by which plotting text and symbols should be magnified relative to the default. cex = 0.6 means to scale down to 60% (when knitting to html) to prevent overlapping Base R plot will know to plot a dendrogram without specifying the type, because its a hclust object?\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients (ac) of all hierarchical clustering algorithms.\nBreaking down the big formula into smaller\n\nattributes(agnes(shan_ict, method = 'average'))\n\n$names\n[1] \"order\"     \"height\"    \"ac\"        \"merge\"     \"diss\"      \"call\"     \n[7] \"method\"    \"order.lab\" \"data\"     \n\n$class\n[1] \"agnes\" \"twins\"\n\nagnes(shan_ict, method = 'average')$ac\n\n[1] 0.8131144\n\n\nDefine a function ac, this function input is m, which inputs various clustering algorithms into the function agnes(). Next, use the map_dbl function to map the the m into agnes()\n$ac means to call the ‘agglomerative coeeficients’ component of agnes function (see above)\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nagnes() calculates an index to measure level of homogeneity between different methods of hclustering.\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\nK.max - maximum number of clusters to consider, minimum 2\nB = integer, number of Monte Carlo (‘bootstrap’) samples\nnstart <- isnt this only applicable to Kmeans clustering, is it about initialising a centroid?\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict,\n                    FUN = hcut,\n                    nstart = 25,\n                    K.max= 10, \n                    B= 50)\n\n#print the results\nprint(gap_stat, method = 'firstmax')\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\nFind the optimal number of clusters (elbow, gap or silhouette methods): https://rstudio-pubs-static.s3.amazonaws.com/708276_a1cfeb43954b4206b1cededbe995a47f.html\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\nk - refers to number of clusters <- use a line that cuts horizontally to get 6 clusters\nborder = vector with border colours for the rectangles. Can also put ‘red’ or ‘green’…\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward,\n            k=6,\n            border = 2:5)\n\n\n\n\n\n\n\nIn this section, we will learn how to perform visually-driven hierarchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make the heatmap.\n\nclass(shan_ict)\n\n[1] \"data.frame\"\n\n\n\nshan_ict_mat <- as.matrix(shan_ict)\nclass(shan_ict_mat)\n\n[1] \"matrix\" \"array\" \n\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\n# first perform min-max normalisation\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = 'euclidean',\n          hclust_method = 'ward.D',\n          seriate = 'OLO',\n          colors= Blues,\n          k_row = 6,\n          margins = c(NA, 200, 60, NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main = 'Geographic Segmentation of Shan State by ICT indicators',\n          xlab= 'ICT indicators',\n          ylab = 'Townships of Shan State'\n)\n\n\n\n\n\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\\\nEach region will be assigned an integer representing their cluster number.\n\ncutree(hclust_ward, k=6)\n\n   Mongmit    Pindaya    Ywangan   Pinlaung     Mabein      Kalaw      Pekon \n         1          1          2          1          3          3          1 \n  Lawksawk  Nawnghkio    Kyaukme       Muse     Laihka    Mongnai    Mawkmai \n         3          3          3          4          1          1          5 \n    Kutkai    Mongton    Mongyai  Mongkaing     Lashio    Mongpan     Matman \n         1          1          5          2          3          3          2 \n Tachileik    Narphan   Mongkhet     Hsipaw   Monghsat    Mongmao    Nansang \n         4          5          5          1          5          6          1 \n Laukkaing   Pangsang      Namtu  Monghpyak    Konkyan   Mongping     Hopong \n         4          6          1          3          5          5          1 \nNyaungshwe   Hsihseng     Mongla      Hseni    Kunlong     Hopang    Namhkan \n         3          1          4          3          1          6          4 \n  Kengtung    Langkho    Monghsu   Taunggyi   Pangwaun     Kyethi     Loilen \n         3          3          1          4          6          1          1 \n    Manton   Mongyang    Kunhing  Mongyawng    Tangyan    Namhsan \n         2          6          1          3          1          1 \n\nclass(cutree(hclust_ward, k=6))\n\n[1] \"integer\"\n\n\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nYixin checking data format. Did not use str()\n\nattributes(groups)\n\n$levels\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n\n$names\n [1] \"Mongmit\"    \"Pindaya\"    \"Ywangan\"    \"Pinlaung\"   \"Mabein\"    \n [6] \"Kalaw\"      \"Pekon\"      \"Lawksawk\"   \"Nawnghkio\"  \"Kyaukme\"   \n[11] \"Muse\"       \"Laihka\"     \"Mongnai\"    \"Mawkmai\"    \"Kutkai\"    \n[16] \"Mongton\"    \"Mongyai\"    \"Mongkaing\"  \"Lashio\"     \"Mongpan\"   \n[21] \"Matman\"     \"Tachileik\"  \"Narphan\"    \"Mongkhet\"   \"Hsipaw\"    \n[26] \"Monghsat\"   \"Mongmao\"    \"Nansang\"    \"Laukkaing\"  \"Pangsang\"  \n[31] \"Namtu\"      \"Monghpyak\"  \"Konkyan\"    \"Mongping\"   \"Hopong\"    \n[36] \"Nyaungshwe\" \"Hsihseng\"   \"Mongla\"     \"Hseni\"      \"Kunlong\"   \n[41] \"Hopang\"     \"Namhkan\"    \"Kengtung\"   \"Langkho\"    \"Monghsu\"   \n[46] \"Taunggyi\"   \"Pangwaun\"   \"Kyethi\"     \"Loilen\"     \"Manton\"    \n[51] \"Mongyang\"   \"Kunhing\"    \"Mongyawng\"  \"Tangyan\"    \"Namhsan\"   \n\n$class\n[1] \"factor\"\n\nclass(groups)\n\n[1] \"factor\"\n\ntypeof(attributes(groups)$level)\n\n[1] \"character\"\n\n\nThe output groups is a list object.\nIn order to visualise the clusters using qtm(), the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups))\n\nRename ‘as.matrix.group’ column to CLUSTER\n\nshan_sf_cluster <- shan_sf_cluster %>%  rename('CLUSTER' = 'as.matrix.groups.')\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, 'CLUSTER')\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented, the clusters are formed by attributes relationship only and not by spatial relationship. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n\n\n\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf from sf into SpatialPolygonsDataFrame (sp). This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp <- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nb() of spdep package will be used to compute the neighbours list from polygon list. SKATER is based on contiguity concept, so use ply2nb() here.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\nstr(shan.nb)\n\nList of 55\n $ : int [1:4] 5 10 50 55\n $ : int [1:3] 3 6 8\n $ : int [1:2] 2 8\n $ : int [1:3] 6 7 36\n $ : int [1:2] 1 50\n $ : int [1:5] 2 4 8 36 46\n $ : int [1:2] 4 36\n $ : int [1:9] 2 3 6 9 10 18 25 35 46\n $ : int [1:2] 8 10\n $ : int [1:5] 1 8 9 25 55\n $ : int [1:3] 15 33 42\n $ : int [1:5] 18 28 35 48 49\n $ : int [1:7] 14 16 20 28 34 44 52\n $ : int [1:5] 13 28 37 44 49\n $ : int [1:7] 11 29 33 39 40 42 50\n $ : int [1:5] 13 20 26 34 44\n $ : int [1:4] 19 25 48 54\n $ : int [1:5] 8 12 25 35 48\n $ : int [1:7] 17 25 31 39 41 50 54\n $ : int [1:3] 13 16 44\n $ : int [1:6] 24 30 34 45 51 54\n $ : int [1:3] 26 32 53\n $ : int [1:3] 27 30 47\n $ : int [1:5] 21 34 38 43 51\n $ : int [1:8] 8 10 17 18 19 31 48 55\n $ : int [1:5] 16 22 32 34 43\n $ : int [1:5] 23 30 41 47 54\n $ : int [1:6] 12 13 14 48 49 52\n $ : int [1:4] 15 33 40 41\n $ : int [1:5] 21 23 27 51 54\n $ : int [1:4] 19 25 50 55\n $ : int [1:5] 22 26 38 43 53\n $ : int [1:3] 11 15 29\n $ : int [1:8] 13 16 21 24 26 43 45 52\n $ : int [1:6] 8 12 18 37 46 49\n $ : int [1:5] 4 6 7 37 46\n $ : int [1:5] 14 35 36 46 49\n $ : int [1:5] 24 32 43 51 53\n $ : int [1:5] 15 19 40 41 50\n $ : int [1:4] 15 29 39 41\n $ : int [1:6] 19 27 29 39 40 54\n $ : int [1:3] 11 15 50\n $ : int [1:5] 24 26 32 34 38\n $ : int [1:4] 13 14 16 20\n $ : int [1:5] 21 34 48 52 54\n $ : int [1:5] 6 8 35 36 37\n $ : int [1:2] 23 27\n $ : int [1:8] 12 17 18 25 28 45 52 54\n $ : int [1:5] 12 14 28 35 37\n $ : int [1:8] 1 5 15 19 31 39 42 55\n $ : int [1:4] 21 24 30 38\n $ : int [1:5] 13 28 34 45 48\n $ : int [1:3] 22 32 38\n $ : int [1:8] 17 19 21 27 30 41 45 48\n $ : int [1:5] 1 10 25 31 50\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:55] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = shan_sp)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWith shan_sp,\nFirstly, plot boundaries on the bottom-most layer first.\nSecondly, plot neighbours list object on top of boundaries map. The centroid coordinates of each polygons/ neighbours can be extracted using coordinates(shan_sp) on the sp object. Set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nhead(coordinates(shan_sp))\n\n      [,1]     [,2]\n1 96.62603 23.15299\n2 96.67318 20.93939\n3 96.49952 21.28372\n4 96.69002 20.10823\n5 96.67883 23.62011\n6 96.68292 20.68842\n\n\n\nplot(shan_sp, \n     border=grey(.5))\n\nplot(shan.nb, coordinates(shan_sp),\n     col='blue',\n     add=TRUE)\n\n\n\n\nNote that if we plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot at the bottom-most layer. In this example, because the boundary map extends further (is bigger?) than the graph, we plot it first at bottom layer.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge / connection. It is the distance between each nodes. This function compute this distance using a data.frame with observations ( 5 ict variables TV, radio etc..) vector in each node. lcost is a ‘nbdist’ class object.\nThe code chunk below is used to compute the cost of each edge. Recall that shan_ict is a df containing 5 variables. shan.nb is a neighbour list object.\n\nlcost <- nbcosts(shan.nb, shan_ict)\n\n\nclass(lcost)\n\n[1] \"nbdist\"\n\nstr(lcost)\n\nList of 55\n $ : num [1:4] 263 144 431 238\n $ : num [1:3] 257 303 204\n $ : num [1:2] 257 432\n $ : num [1:3] 182 94.6 138.1\n $ : num [1:2] 263 674\n $ : num [1:5] 302.5 182 140 95.7 252.3\n $ : num [1:2] 94.6 139.3\n $ : num [1:9] 204.3 432.2 140 90.8 186.3 ...\n $ : num [1:2] 90.8 157\n $ : num [1:5] 144 186 157 164 348\n $ : num [1:3] 593 705 239\n $ : num [1:5] 523 78.8 157.5 255.8 59.7\n $ : num [1:7] 374.5 131.7 178.1 92.8 203 ...\n $ : num [1:5] 375 462 329 531 389\n $ : num [1:7] 593 580 311 229 205 ...\n $ : num [1:5] 132 200 151 120 237\n $ : num [1:4] 466 177 138 109\n $ : num [1:5] 625 523 424 379 352\n $ : num [1:7] 466.4 290.9 365.9 79.4 170.6 ...\n $ : num [1:3] 178 200 95\n $ : num [1:6] 203 506 202 308 586 ...\n $ : num [1:3] 677 444 432\n $ : num [1:3] 331 316 265\n $ : num [1:5] 203 114 574 531 445\n $ : num [1:8] 249 164 177 424 291 ...\n $ : num [1:5] 151 677 357 141 384\n $ : num [1:5] 331.4 57.6 78.3 187.4 347.1\n $ : num [1:6] 78.8 92.8 462.4 273 94.2 ...\n $ : num [1:4] 580 636 522 332\n $ : num [1:5] 506.3 316.3 57.6 108.4 364.8\n $ : num [1:4] 366 229 449 241\n $ : num [1:5] 444 357 408 221 286\n $ : num [1:3] 705 311 636\n $ : num [1:8] 203 120 202 114 141 ...\n $ : num [1:6] 274.9 157.5 379.4 91.7 513.8 ...\n $ : num [1:5] 138.1 95.7 139.3 225.8 325.1\n $ : num [1:5] 329.3 91.7 225.8 528.1 158.8\n $ : num [1:5] 574 408 202 147 316\n $ : num [1:5] 229.4 79.4 276.2 162.8 584.6\n $ : num [1:4] 205 522 276 271\n $ : num [1:6] 170.6 78.3 331.7 162.8 271.3 ...\n $ : num [1:3] 239 392 722\n $ : num [1:5] 531 384 221 443 202\n $ : num [1:4] 175 531 237 95\n $ : num [1:5] 308 159 147 147 127\n $ : num [1:5] 252 305 514 325 528\n $ : num [1:2] 265 187\n $ : num [1:8] 256 138 352 195 273 ...\n $ : num [1:5] 59.7 388.7 94.2 124.7 158.8\n $ : num [1:8] 431 674 362 647 449 ...\n $ : num [1:4] 586 445 108 147\n $ : num [1:5] 111 128 213 147 279\n $ : num [1:3] 432 286 316\n $ : num [1:8] 109 430 243 347 365 ...\n $ : num [1:5] 238 348 194 241 210\n - attr(*, \"call\")= language nbcosts(nb = shan.nb, data = shan_ict)\n - attr(*, \"class\")= chr \"nbdist\"\n\n\nIf I have four neighbours, then I would have four edge costs.\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list object to a list weights object by specifying the lcost as the weights.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\n#?nb2listw\nshan.w <- nb2listw(shan.nb,\n                   glist=lcost,\n                   style ='B')\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\nshan.w is a weights list object (listw)\n\nstr(shan.w)\n\nList of 3\n $ style     : chr \"B\"\n $ neighbours:List of 55\n  ..$ : int [1:4] 5 10 50 55\n  ..$ : int [1:3] 3 6 8\n  ..$ : int [1:2] 2 8\n  ..$ : int [1:3] 6 7 36\n  ..$ : int [1:2] 1 50\n  ..$ : int [1:5] 2 4 8 36 46\n  ..$ : int [1:2] 4 36\n  ..$ : int [1:9] 2 3 6 9 10 18 25 35 46\n  ..$ : int [1:2] 8 10\n  ..$ : int [1:5] 1 8 9 25 55\n  ..$ : int [1:3] 15 33 42\n  ..$ : int [1:5] 18 28 35 48 49\n  ..$ : int [1:7] 14 16 20 28 34 44 52\n  ..$ : int [1:5] 13 28 37 44 49\n  ..$ : int [1:7] 11 29 33 39 40 42 50\n  ..$ : int [1:5] 13 20 26 34 44\n  ..$ : int [1:4] 19 25 48 54\n  ..$ : int [1:5] 8 12 25 35 48\n  ..$ : int [1:7] 17 25 31 39 41 50 54\n  ..$ : int [1:3] 13 16 44\n  ..$ : int [1:6] 24 30 34 45 51 54\n  ..$ : int [1:3] 26 32 53\n  ..$ : int [1:3] 27 30 47\n  ..$ : int [1:5] 21 34 38 43 51\n  ..$ : int [1:8] 8 10 17 18 19 31 48 55\n  ..$ : int [1:5] 16 22 32 34 43\n  ..$ : int [1:5] 23 30 41 47 54\n  ..$ : int [1:6] 12 13 14 48 49 52\n  ..$ : int [1:4] 15 33 40 41\n  ..$ : int [1:5] 21 23 27 51 54\n  ..$ : int [1:4] 19 25 50 55\n  ..$ : int [1:5] 22 26 38 43 53\n  ..$ : int [1:3] 11 15 29\n  ..$ : int [1:8] 13 16 21 24 26 43 45 52\n  ..$ : int [1:6] 8 12 18 37 46 49\n  ..$ : int [1:5] 4 6 7 37 46\n  ..$ : int [1:5] 14 35 36 46 49\n  ..$ : int [1:5] 24 32 43 51 53\n  ..$ : int [1:5] 15 19 40 41 50\n  ..$ : int [1:4] 15 29 39 41\n  ..$ : int [1:6] 19 27 29 39 40 54\n  ..$ : int [1:3] 11 15 50\n  ..$ : int [1:5] 24 26 32 34 38\n  ..$ : int [1:4] 13 14 16 20\n  ..$ : int [1:5] 21 34 48 52 54\n  ..$ : int [1:5] 6 8 35 36 37\n  ..$ : int [1:2] 23 27\n  ..$ : int [1:8] 12 17 18 25 28 45 52 54\n  ..$ : int [1:5] 12 14 28 35 37\n  ..$ : int [1:8] 1 5 15 19 31 39 42 55\n  ..$ : int [1:4] 21 24 30 38\n  ..$ : int [1:5] 13 28 34 45 48\n  ..$ : int [1:3] 22 32 38\n  ..$ : int [1:8] 17 19 21 27 30 41 45 48\n  ..$ : int [1:5] 1 10 25 31 50\n  ..- attr(*, \"class\")= chr \"nb\"\n  ..- attr(*, \"region.id\")= chr [1:55] \"1\" \"2\" \"3\" \"4\" ...\n  ..- attr(*, \"call\")= language poly2nb(pl = shan_sp)\n  ..- attr(*, \"type\")= chr \"queen\"\n  ..- attr(*, \"sym\")= logi TRUE\n $ weights   :List of 55\n  ..$ : num [1:4] 263 144 431 238\n  ..$ : num [1:3] 257 303 204\n  ..$ : num [1:2] 257 432\n  ..$ : num [1:3] 182 94.6 138.1\n  ..$ : num [1:2] 263 674\n  ..$ : num [1:5] 302.5 182 140 95.7 252.3\n  ..$ : num [1:2] 94.6 139.3\n  ..$ : num [1:9] 204.3 432.2 140 90.8 186.3 ...\n  ..$ : num [1:2] 90.8 157\n  ..$ : num [1:5] 144 186 157 164 348\n  ..$ : num [1:3] 593 705 239\n  ..$ : num [1:5] 523 78.8 157.5 255.8 59.7\n  ..$ : num [1:7] 374.5 131.7 178.1 92.8 203 ...\n  ..$ : num [1:5] 375 462 329 531 389\n  ..$ : num [1:7] 593 580 311 229 205 ...\n  ..$ : num [1:5] 132 200 151 120 237\n  ..$ : num [1:4] 466 177 138 109\n  ..$ : num [1:5] 625 523 424 379 352\n  ..$ : num [1:7] 466.4 290.9 365.9 79.4 170.6 ...\n  ..$ : num [1:3] 178 200 95\n  ..$ : num [1:6] 203 506 202 308 586 ...\n  ..$ : num [1:3] 677 444 432\n  ..$ : num [1:3] 331 316 265\n  ..$ : num [1:5] 203 114 574 531 445\n  ..$ : num [1:8] 249 164 177 424 291 ...\n  ..$ : num [1:5] 151 677 357 141 384\n  ..$ : num [1:5] 331.4 57.6 78.3 187.4 347.1\n  ..$ : num [1:6] 78.8 92.8 462.4 273 94.2 ...\n  ..$ : num [1:4] 580 636 522 332\n  ..$ : num [1:5] 506.3 316.3 57.6 108.4 364.8\n  ..$ : num [1:4] 366 229 449 241\n  ..$ : num [1:5] 444 357 408 221 286\n  ..$ : num [1:3] 705 311 636\n  ..$ : num [1:8] 203 120 202 114 141 ...\n  ..$ : num [1:6] 274.9 157.5 379.4 91.7 513.8 ...\n  ..$ : num [1:5] 138.1 95.7 139.3 225.8 325.1\n  ..$ : num [1:5] 329.3 91.7 225.8 528.1 158.8\n  ..$ : num [1:5] 574 408 202 147 316\n  ..$ : num [1:5] 229.4 79.4 276.2 162.8 584.6\n  ..$ : num [1:4] 205 522 276 271\n  ..$ : num [1:6] 170.6 78.3 331.7 162.8 271.3 ...\n  ..$ : num [1:3] 239 392 722\n  ..$ : num [1:5] 531 384 221 443 202\n  ..$ : num [1:4] 175 531 237 95\n  ..$ : num [1:5] 308 159 147 147 127\n  ..$ : num [1:5] 252 305 514 325 528\n  ..$ : num [1:2] 265 187\n  ..$ : num [1:8] 256 138 352 195 273 ...\n  ..$ : num [1:5] 59.7 388.7 94.2 124.7 158.8\n  ..$ : num [1:8] 431 674 362 647 449 ...\n  ..$ : num [1:4] 586 445 108 147\n  ..$ : num [1:5] 111 128 213 147 279\n  ..$ : num [1:3] 432 286 316\n  ..$ : num [1:8] 109 430 243 347 365 ...\n  ..$ : num [1:5] 238 348 194 241 210\n  ..- attr(*, \"mode\")= chr \"general\"\n  ..- attr(*, \"glist\")=List of 55\n  .. ..$ : num [1:4] 263 144 431 238\n  .. ..$ : num [1:3] 257 303 204\n  .. ..$ : num [1:2] 257 432\n  .. ..$ : num [1:3] 182 94.6 138.1\n  .. ..$ : num [1:2] 263 674\n  .. ..$ : num [1:5] 302.5 182 140 95.7 252.3\n  .. ..$ : num [1:2] 94.6 139.3\n  .. ..$ : num [1:9] 204.3 432.2 140 90.8 186.3 ...\n  .. ..$ : num [1:2] 90.8 157\n  .. ..$ : num [1:5] 144 186 157 164 348\n  .. ..$ : num [1:3] 593 705 239\n  .. ..$ : num [1:5] 523 78.8 157.5 255.8 59.7\n  .. ..$ : num [1:7] 374.5 131.7 178.1 92.8 203 ...\n  .. ..$ : num [1:5] 375 462 329 531 389\n  .. ..$ : num [1:7] 593 580 311 229 205 ...\n  .. ..$ : num [1:5] 132 200 151 120 237\n  .. ..$ : num [1:4] 466 177 138 109\n  .. ..$ : num [1:5] 625 523 424 379 352\n  .. ..$ : num [1:7] 466.4 290.9 365.9 79.4 170.6 ...\n  .. ..$ : num [1:3] 178 200 95\n  .. ..$ : num [1:6] 203 506 202 308 586 ...\n  .. ..$ : num [1:3] 677 444 432\n  .. ..$ : num [1:3] 331 316 265\n  .. ..$ : num [1:5] 203 114 574 531 445\n  .. ..$ : num [1:8] 249 164 177 424 291 ...\n  .. ..$ : num [1:5] 151 677 357 141 384\n  .. ..$ : num [1:5] 331.4 57.6 78.3 187.4 347.1\n  .. ..$ : num [1:6] 78.8 92.8 462.4 273 94.2 ...\n  .. ..$ : num [1:4] 580 636 522 332\n  .. ..$ : num [1:5] 506.3 316.3 57.6 108.4 364.8\n  .. ..$ : num [1:4] 366 229 449 241\n  .. ..$ : num [1:5] 444 357 408 221 286\n  .. ..$ : num [1:3] 705 311 636\n  .. ..$ : num [1:8] 203 120 202 114 141 ...\n  .. ..$ : num [1:6] 274.9 157.5 379.4 91.7 513.8 ...\n  .. ..$ : num [1:5] 138.1 95.7 139.3 225.8 325.1\n  .. ..$ : num [1:5] 329.3 91.7 225.8 528.1 158.8\n  .. ..$ : num [1:5] 574 408 202 147 316\n  .. ..$ : num [1:5] 229.4 79.4 276.2 162.8 584.6\n  .. ..$ : num [1:4] 205 522 276 271\n  .. ..$ : num [1:6] 170.6 78.3 331.7 162.8 271.3 ...\n  .. ..$ : num [1:3] 239 392 722\n  .. ..$ : num [1:5] 531 384 221 443 202\n  .. ..$ : num [1:4] 175 531 237 95\n  .. ..$ : num [1:5] 308 159 147 147 127\n  .. ..$ : num [1:5] 252 305 514 325 528\n  .. ..$ : num [1:2] 265 187\n  .. ..$ : num [1:8] 256 138 352 195 273 ...\n  .. ..$ : num [1:5] 59.7 388.7 94.2 124.7 158.8\n  .. ..$ : num [1:8] 431 674 362 647 449 ...\n  .. ..$ : num [1:4] 586 445 108 147\n  .. ..$ : num [1:5] 111 128 213 147 279\n  .. ..$ : num [1:3] 432 286 316\n  .. ..$ : num [1:8] 109 430 243 347 365 ...\n  .. ..$ : num [1:5] 238 348 194 241 210\n  ..- attr(*, \"glistsym\")= logi TRUE\n  .. ..- attr(*, \"d\")= num 0\n  ..- attr(*, \"B\")= logi TRUE\n - attr(*, \"class\")= chr [1:2] \"listw\" \"nb\"\n - attr(*, \"region.id\")= chr [1:55] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language nb2listw(neighbours = shan.nb, glist = lcost, style = \"B\")\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst <- mstree(shan.w)\n\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nYi xin: We can display the content of shan.mst by using head() as shown in the code chunk below. There are 54 edges in total, but we display only five here. The first node polygon 31 and the minimum cost is 229.446 to travel to polygon 25. The tree path is created by considering the minimum cost path from all available paths. The cost is calculated using the neighbours list first, then ICT variables . Each polygon has exactly one neighbour in the Minimum Spanning Tree. This is 100% geospatial relationship as consider neighbour list first.\nshan_sf -> shan_sp -> shan.nb -> lcost = nbcosts(shan.nb, shan_ict) -> shan.w= nb2listw(shan.nb, glist=lcost, style =‘B’) -> shan.mst <- mstree(shan.w)\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes (polygon ID) in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp,\n     border = grey(.5))\n\nplot.mst(shan.mst,\n         coords=coordinates(shan_sp),         \n         col='blue',\n         cex.lab= 0.7,\n         cex.circles = 0.005,\n         add=TRUE)\n\n\n\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\nshan.mst[, 1:2] refer to the first two components of shan.mst (see above). They refer to the edges literally, not the costs.\nBy cutting the MST five times, we get six clusters. We have to perform hierarchical clustering first; else do not know optimal clusters is 6.\n\nclust6 <- spdep::skater(edges = shan.mst[, 1:2],\n                        data = shan_ict,\n                        method = 'euclidean',\n                        ncuts = 5)\n\nThe skater() takes three mandatory arguments:\n- the first two columns of the MST matrix (i.e. not the cost),\n- the data matrix (to update the costs as units are being grouped), and\n\nthe number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\n\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nUsing str(clust6), we can see several results:\n\nclust6$groups shows us the cluster number each polygon is assigned to.\ndetailed summary for each of the clusters in the edges.groups list, containing the node, edge and ssw??\nSum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\n\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\nFreq table\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp , border = grey(.5))\n\nplot(clust6,\n     coords = coordinates(shan_sp),\n     cex.lab = .7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles = 0.005,\n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\nFirst, set the cluster groups as matrix (as.matrix means table form) to get it ready to be appended to shan_sf_cluster (from shan_sf + hierarchical clustering results) to get another data frame called shan_sf_spatialcluster\n\ngroups_mat <- as.matrix(clust6$groups)\nhead(groups_mat)\n\n     [,1]\n[1,]    3\n[2,]    3\n[3,]    6\n[4,]    3\n[5,]    3\n[6,]    3\n\n\nAppend it to the shan_sf_cluster sf data frame because tmap prefers sf to sp object.. Avoid sorting to prevent appending issues.\n\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, \n                                as.factor(groups_mat)) %>% \n  rename('SP_CLUSTER' = 'as.factor.groups_mat.')\n\nqtm(shan_sf_spatialcluster, 'SP_CLUSTER')\n\n\n\n\nNotice this is mainly spatial relationship and some on attribute relationship but inflexibility to change the threshold.\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  'CLUSTER') +\n  tm_borders(alpha = 0.5)\n\nskclust.map <- qtm(shan_sf_spatialcluster,\n                   'SP_CLUSTER') +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(hclust.map, skclust.map,\n             asp =NA, ncol =2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\nBoth clustering methods are very rigid. One considered 100% attribute relationship and resulted in fragmented choropleth map. The other considers mainly spatial relationship.\n\n\n\n\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1].\nD0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space.\nD1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster,\n            k=6,\n            border= 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly to what we have done earlier, convert the cluster ID to categorical data, and then to a matrix (means table form). Finally append it to shan_sf, creating a new data frame called shan_sf_nongeo_cluster\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_nongeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_nongeo_cluster,'CLUSTER')\n\n\n\n\nThe same old fragmented map above.\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package. (Earlier we had use proxmat, a distance matrix based on attributes)\n\ndist <- st_distance(shan_sf,shan_sf)\nclass(dist)\n\n[1] \"units\"\n\ndistmat <- as.dist(dist)\nclass(distmat)\n\n[1] \"dist\"\n\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\nFirst argument is non-spatial proxmat, and the second argument is the spatial distmat.\nMin is 0, max is 1 and in steps of 0.1\nK is in uppercase\n\ncr <- choicealpha(proxmat, distmat,\n                  range.alpha = seq(0,1, 0.1),\n                  K =6,\n                  graph = TRUE)\n\n\n\n\n\n\n\nY-axis refers to the amount of spatial or non-spatial relationship captured\nD0: attribute homogeneity (black line) D1: spatial homogeneity, contiguity matrix (red line) choicealpha- balance attribute and spatial homogeneity\ncut-off values\n1. when alpha = 0, consider only attribute relationship\n2. when alpha = 1, we consider only the spatial relationship\nIn short, increase alpha increase spatial relationship.\nAt cut-off value of 0.3, lose only about 20% of black and capture about 70% of red. This is he most balanced value. At any cut-off bigger than 0.3, we lose black info at a greater rate and gain red info at a slower rate.\nThere are two graphs here, Qnorm means the normalised value. Use Qnorm when skewness is big.\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\nclustG\n\n\nCall:\nstats::hclust(d = delta, method = \"ward.D\", members = wt)\n\nCluster method   : ward.D \nDistance         : euclidean \nNumber of objects: 55 \n\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\nYi Xin fooling around with K-means clustering, non spatial data\n\nk6 <- kmeans(shan_ict, centers = 6, nstart = 25)\nstr(k6)\n\nList of 9\n $ cluster     : Named int [1:55] 4 6 6 4 3 3 4 3 3 3 ...\n  ..- attr(*, \"names\")= chr [1:55] \"Mongmit\" \"Pindaya\" \"Ywangan\" \"Pinlaung\" ...\n $ centers     : num [1:6, 1:5] 239 101 300 204 133 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:6] \"1\" \"2\" \"3\" \"4\" ...\n  .. ..$ : chr [1:5] \"RADIO_PR\" \"TV_PR\" \"LLPHONE_PR\" \"MPHONE_PR\" ...\n $ totss       : num 3750143\n $ withinss    : num [1:6] 95560 98692 177214 193112 206813 ...\n $ tot.withinss: num 866112\n $ betweenss   : num 2884031\n $ size        : int [1:6] 4 7 13 17 9 5\n $ iter        : int 4\n $ ifault      : int 0\n - attr(*, \"class\")= chr \"kmeans\"\n\n\n\ncluster_plot <- fviz_cluster(k6, data = shan_ict, labelsize=7)\ncluster_plot"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting started",
    "text": "Getting started\nThis is the getting started page."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of Geospatial analytics."
  },
  {
    "objectID": "Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take_home_Ex01",
    "section": "",
    "text": "In this exercise, I will apply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of Not Functional water points in Nigeria.\nThe task:\n\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\n\nPlot hotspot areas and outliers/clusters maps of functional and non0functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(spdep)\nlibrary(funModeling)\n\n\n\n\nTwo geospatial data sets will be used, they are:\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\n\nBefore importing this data, open the projection component of the geo_export shape file and check the coordinates system first. In this case, the coordinates are in WSG84 (geo / spherical) format, so the crs code is 4326.\n\nwp <- st_read(dsn='geodata',\n              layer = 'geo_export',\n              crs = 4326) %>% \n  filter(clean_coun == 'Nigeria')\n\n#| eval: false is only display the codes between 41-44 without running the code.  Note that by default, eval: true is used so you do not have to specify.\nDo not confuse rmarkdown way of writing code versus Quarto, refer to link below: https://quarto.org/docs/reference/formats/html.html#execution\nIf I accidentally push too much data into git, refer to the link below: https://stackoverflow.com/questions/40115723/undo-git-commit-in-rstudio-that-is-too-big-to-push\n\nst_geometry(wp)\n\n\nst_crs(wp)\n\nTo list all the variables in a data frame\n\nstr(wp)\nls(wp)\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nwrite_rds(wp, 'geodata/wp_nga.rds')\n\n\n\n\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn='geodata',\n               layer='geoBoundaries-NGA-ADM2',\n               crs='4326')\n\n\nnga <- st_set_crs(nga, 4326)\nst_crs(nga)\n\n\nglimpse(nga)\n\n\nqtm(nga, 'shapeName') +\n  tm_layout(legend.outside = TRUE)\n\nTo verify the number of planning areas in nga and to check the first 50 entries to check for signs of spelling errors\n\ndplyr::count(nga, shapeName, sort = TRUE) %>% print(n=50)\n\n\n\n\n\n\n\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds('geodata/wp_nga.rds') \n\nTo print the first 50 observations\n\n#wp %>% select(status_id) %>% print(n=50)\n\nValue_counts() equivalent , before replace NA with Unknown\n\ndplyr::count(wp_nga, status_cle, sort = TRUE)\n\nRead rds file and immediately transform NA values of ‘status_cle’ into ‘Unknown’ upon reading\n\nwp_nga <- read_rds('geodata/wp_nga.rds') %>% \n  mutate(status_cle = replace_na(status_cle, 'Unknown'))\n\n\n#glimpse(wp_nga)\n\nCheck the data frame after mutate\n\ndplyr::count(wp_nga, status_cle, sort = TRUE)\n\n\n\n\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq (data = wp_nga,\n      input = 'status_cle')\n\n\n\n\n\nIn this section, we will extract the water point records by using classes in status_cle field.\n\n\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>% \n  filter(status_cle %in%\n           c('Functional',\n             'Functional but not in use',\n             'Functional but needs repair'))\n\nRechecking the visualisation\n\nfreq (data = wpt_functional,\n      input = 'status_cle')\n\n\n\n\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>% \n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq (data = wpt_nonfunctional,\n      input = 'status_cle')\n\n\n\n\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>% \n  filter(status_cle==\"Unknown\")\n\n\n\n\n\nnga refers to boundary data\nwp_nga refers to all water points\nwpt-functional refers to functional water points\nWe will use st_intersects() to find the water points IDs that falls within each of the 774 polygons\n\nst_intersects(nga,wp_nga)\n\nEach element in the list tells us the total number of water points (functional or not) in each polygon\n\nlengths(st_intersects(nga,wp_nga))\n\nWe can use the above method to also find the number of (2) functional, (3) non-functional and (4) unknown functionality water points that lie withing each polygon, and append all 4 lists to the original nga boundary sf data frame, calling it a new object nga_wp.\n\nnga_wp <- nga %>% \n  mutate('total wpt' = lengths(st_intersects(nga, wp_nga))) %>% \n  mutate('wpt functional' = lengths(st_intersects(nga, wpt_functional))) %>%\n  mutate('wpt non-functional' = lengths(st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate('wpt unknown' = lengths(st_intersects(nga,wpt_unknown))) \n\n\n\n\nWe would like to compute the percentage of functional, non-functional and unknown water points\n*remember to use back tick for variables with space between the words\n#| eval: false\n\nnga_wp <- nga_wp %>% \n  mutate('pct_functional' = `wpt functional`/ `total wpt`) %>% \n  mutate('pct_non-functional' = `wpt non-functional`/ `total wpt`) %>% \n  mutate('pct_unknown' = `wpt unknown`/ `total wpt`)\n\n\n#nga_wp <- nga_wp %>% \n  #select(3:4, 9:10, 18:23)\n\n\nwrite_rds(nga_wp, \"geodata/nga_wp1.rds\")\n\nBefore you end this section, please remember to delete away all the raw data and add the code ‘#| eval: false’ to tell R not to evaluate the code chunks.\nNotice that the only data file left is nga_wp.rds and it’s file size is aroung 2.1MB.\n\n\n\n\nSeems to be based on “pretty’ style\n\nnga_wp1 <- readRDS('geodata/nga_wp1.rds')\n\ntotal <- qtm(nga_wp1, 'total wpt') +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\nwp_functional <- qtm(nga_wp1, 'wpt functional') +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\nwp_nonfunctional <- qtm(nga_wp1, 'wpt non-functional') +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\nunknown <- qtm(nga_wp1, 'wpt unknown') +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown,\n             asp=1, ncol=2)\n\n\n\n\nPlotting the basemap\n\ntm_shape(nga_wp1) +\n  tm_polygons()\n\n\n\n\n\n\n\nwm_q <- poly2nb(nga_wp1, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nA total of 4440 neighbours links, there is one region (86) without neighbour. Region 508 has 14 neighbours. Most regions have about 4 to 7 neighbours.\n\n\n\n\nrswm_q <- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy=TRUE)\nsummary(rswm_q, zero.policy = TRUE)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\nglimpse(rswm_q)\n\nTaking a look at the distribution of pct_non-functional water pumps\n\nhist(nga_wp1$`pct_non-functional`,\n     freq=TRUE,\n     breaks= 'Sturges',\n     xlab= \"pct of non-functional water pumps\"\n     )\n\n\n\n#abline(v = 0, col=\"red\")\n\n\n\n\n\nmoran.test(nga_wp1$`pct_non-functional`,\n           listw=rswm_q,\n           zero.policy=TRUE,\n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp1$`pct_non-functional`  \nweights: rswm_q \nomitted: 3, 86, 241, 250, 252, 261, 400, 406, 447, 473, 492, 507, 526   \n\nMoran I statistic standard deviate = 21.072, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4637998765     -0.0013157895      0.0004872236 \n\n\nThere are 13 regions excluded as there are no water pumps there.\n\n\n\n1.1.4 Global Spatial Autocorrelation: Monte Carlo Moran’s I\n\nset.seed(1234)\n\nbperm = moran.mc(nga_wp1$`pct_non-functional`,\n                 listw=rswm_q,\n                 nsim=999,\n                 zero.policy= TRUE,\n                 na.action=na.omit)\n\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp1$`pct_non-functional` \nweights: rswm_q \nomitted: 3, 86, 241, 250, 252, 261, 400, 406, 447, 473, 492, 507, 526 \nnumber of simulations + 1: 1000 \n\nstatistic = 0.46319, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\nsummary(bperm$res[1:999])\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.078481 -0.015510 -0.001631 -0.001159  0.013105  0.084198 \n\n\n\nhist(bperm$res,\n     freq=TRUE,\n     breaks= 20,\n     xlab= \"Simulated Moran's I\"\n     )\nabline(v = -0.001159, col=\"red\")\n\n\n\n\nSince the Monte Carlo Global Moran’ I statistic = 0.46319 and the p-value is 0.001, we can see that it lies on the extreme right side of this chart. It would mean that the Moran I statistic value obtained is much higher than what is expected by chance, and hence clustering is highly likely.\n\n\n\n\n\n\nCreate a new data frame without NA rows else sp.correlogram() cannot work.\n\nnga_wpnona <- nga_wp1 %>%  drop_na()\n\nRe define my neighbours\n\nwm_qnona <- poly2nb(nga_wpnona, queen=TRUE)\nsummary(wm_qnona)\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\n\nA total of 4348 neighbours links. Region 496 has most neighbours, 14 in total. Most regions have about 4 to 7 neighbours.\n\nrswm_qnona <- nb2listw(wm_qnona,\n                   style = \"W\",\n                   zero.policy=TRUE)\nsummary(rswm_qnona, zero.policy = TRUE)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 761 579121 761 284.1587 3152.842\n\n\nRe-check my global Moran I after removing all the NA rows\n\nset.seed(1234)\n\nbpermnona = moran.mc(nga_wpnona$`pct_non-functional`,\n                 listw=rswm_qnona,\n                 nsim=999,\n                 zero.policy= TRUE,\n                 na.action=na.omit)\n\nbpermnona\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wpnona$`pct_non-functional` \nweights: rswm_qnona  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.4638, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nMI_corr <- sp.correlogram(wm_qnona, \n                          nga_wpnona$`pct_non-functional`,\n                          order =10 ,\n                          method = \"I\",\n                          style = \"W\")\n\nplot(MI_corr)\n\n\n\n\nTo check for statistical significance of the spatial auto correlation\n\nprint(MI_corr)\n\nSpatial correlogram for nga_wpnona$`pct_non-functional` \nmethod: Moran's I\n            estimate expectation    variance standard deviate Pr(I) two sided\n1 (761)   4.6380e-01 -1.3158e-03  4.8722e-04          21.0716       < 2.2e-16\n2 (761)   3.6192e-01 -1.3158e-03  2.0856e-04          25.1521       < 2.2e-16\n3 (761)   2.5867e-01 -1.3158e-03  1.2600e-04          23.1620       < 2.2e-16\n4 (761)   1.4236e-01 -1.3158e-03  9.0162e-05          15.1313       < 2.2e-16\n5 (761)   7.3080e-02 -1.3158e-03  7.0431e-05           8.8648       < 2.2e-16\n6 (761)   3.6991e-02 -1.3158e-03  5.8783e-05           4.9963       5.843e-07\n7 (761)   1.4256e-02 -1.3158e-03  5.1543e-05           2.1690         0.03009\n8 (761)  -3.5377e-03 -1.3158e-03  4.7008e-05          -0.3241         0.74588\n9 (761)  -7.8711e-03 -1.3158e-03  4.4566e-05          -0.9820         0.32612\n10 (761)  2.6155e-03 -1.3158e-03  4.3423e-05           0.5966         0.55078\n            \n1 (761)  ***\n2 (761)  ***\n3 (761)  ***\n4 (761)  ***\n5 (761)  ***\n6 (761)  ***\n7 (761)  *  \n8 (761)     \n9 (761)     \n10 (761)    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nUp to order= 7 is statistically significant\n\n\n\n\nset.seed(1234)\n\nbpermgeary = geary.mc(nga_wpnona$`pct_non-functional`,\n                 listw=rswm_qnona,\n                 nsim=999,\n                 zero.policy= TRUE,)\n\nbpermgeary\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wpnona$`pct_non-functional` \nweights: rswm_qnona \nnumber of simulations + 1: 1000 \n\nstatistic = 0.5308, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nGC_corr <- sp.correlogram(wm_qnona, \n                          nga_wpnona$`pct_non-functional`,\n                          order =10 ,\n                          method = \"C\",\n                          style = \"W\")\n\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for nga_wpnona$`pct_non-functional` \nmethod: Geary's C\n           estimate expectation   variance standard deviate Pr(I) two sided    \n1 (761)  0.53079558  1.00000000 0.00056121         -19.8062       < 2.2e-16 ***\n2 (761)  0.62608410  1.00000000 0.00026528         -22.9573       < 2.2e-16 ***\n3 (761)  0.72844057  1.00000000 0.00017413         -20.5794       < 2.2e-16 ***\n4 (761)  0.84102915  1.00000000 0.00014090         -13.3927       < 2.2e-16 ***\n5 (761)  0.91650327  1.00000000 0.00012412          -7.4945       6.653e-14 ***\n6 (761)  0.95690970  1.00000000 0.00012367          -3.8748       0.0001067 ***\n7 (761)  0.98273231  1.00000000 0.00014054          -1.4566       0.1452350    \n8 (761)  1.00699356  1.00000000 0.00016051           0.5520       0.5809415    \n9 (761)  1.00012124  1.00000000 0.00017366           0.0092       0.9926595    \n10 (761) 0.97652609  1.00000000 0.00015216          -1.9030       0.0570397 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\n\nlocalMI <- localmoran(nga_wpnona$`pct_non-functional`,rswm_qnona)\nhead(localMI)\n\n          Ii          E.Ii     Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.6851464 -0.0008294518 0.15704910  1.7309763    0.083455993\n2  0.4543190 -0.0005017373 0.12687496  1.2768864    0.201642361\n3  0.2355954 -0.0016465926 0.17730063  0.5634254    0.573145224\n4  1.0728844 -0.0007449612 0.11270153  3.1980811    0.001383454\n5  0.5911089 -0.0010566011 0.11383918  1.7550811    0.079245442\n6 -0.2038485 -0.0001770915 0.02230919 -1.3636036    0.172692372\n\n\n\n\n\n\nnga_wpnona.localMI <- cbind(nga_wpnona,localMI)%>%\n  rename(Pr.Ii = Pr.z....E.Ii..)  \n#rename the last column \n#colnames(bperm.df)[1] <- 'res'\nhead(nga_wpnona.localMI)\n\nSimple feature collection with 6 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.005022 ymin: 4.888055 xmax: 8.417316 ymax: 9.232154\nGeodetic CRS:  WGS 84\n       shapeName Level                    shapeID shapeGroup shapeType\n1      Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2      Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3          Abaji  ADM2 NGA-ADM2-72505758B61968000        NGA      ADM2\n4           Abak  ADM2 NGA-ADM2-72505758B39432389        NGA      ADM2\n5      Abakaliki  ADM2 NGA-ADM2-72505758B36739173        NGA      ADM2\n6 Abeokuta North  ADM2 NGA-ADM2-72505758B86358915        NGA      ADM2\n  total.wpt wpt.functional wpt.non.functional wpt.unknown pct_functional\n1        17              7                  9           1      0.4117647\n2        71             29                 35           7      0.4084507\n3        57             23                 34           0      0.4035088\n4        48             23                 25           0      0.4791667\n5       233             82                 42         109      0.3519313\n6        34             16                 15           3      0.4705882\n  pct_non.functional pct_unknown         Ii          E.Ii     Var.Ii       Z.Ii\n1          0.5294118  0.05882353  0.6851464 -0.0008294518 0.15704910  1.7309763\n2          0.4929577  0.09859155  0.4543190 -0.0005017373 0.12687496  1.2768864\n3          0.5964912  0.00000000  0.2355954 -0.0016465926 0.17730063  0.5634254\n4          0.5208333  0.00000000  1.0728844 -0.0007449612 0.11270153  3.1980811\n5          0.1802575  0.46781116  0.5911089 -0.0010566011 0.11383918  1.7550811\n6          0.4411765  0.08823529 -0.2038485 -0.0001770915 0.02230919 -1.3636036\n        Pr.Ii                       geometry\n1 0.083455993 MULTIPOLYGON (((7.401109 5....\n2 0.201642361 MULTIPOLYGON (((7.334479 5....\n3 0.573145224 MULTIPOLYGON (((7.045872 9....\n4 0.001383454 MULTIPOLYGON (((7.811244 5....\n5 0.079245442 MULTIPOLYGON (((8.4109 6.28...\n6 0.172692372 MULTIPOLYGON (((3.143903 7....\n\n\n\n\n\n\nlocalMI.map <- tm_shape(nga_wpnona.localMI)+\n  tm_fill(col='Ii',\n          style=\"pretty\",\n          palette = \"RdBu\",\n          title = \"local Moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran' I statistic\",\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2)\n\npvalue.map <- tm_shape(nga_wpnona.localMI)+\n  tm_fill(col='Pr.Ii',\n          breaks = c(-Inf,0.001,0.01,0.05,0.1,Inf),\n          palette = \"-Blues\",\n          title = \"local Moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran' p-values\",\n            main.title.size=0.8,\n            legend.height = 0.2,\n            legend.width = 0.2)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nnci <- moran.plot(nga_wpnona$`pct_non-functional`,\n                  rswm_qnona,\n                  labels=as.character(nga_wpnona$shapeName),\n                  xlab = \"Pct Non-functional pumps\",\n                  ylab=\"Spatially Lag Pct Non-functional pumps\")\n\n\n\n\nBut we do not know which values are significant and which values are not. We also do not need to standardise the Pct non-functional pumps as % is already considered as standardised.\n\n\n\n\nquadrant <- vector(mode = \"numeric\", length = nrow(localMI))\nquadrant\n\n  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[149] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[186] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[223] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[260] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[334] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[371] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[408] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[445] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[482] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[519] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[556] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[593] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[630] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[667] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[704] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[741] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n\nNext, derive the lagged variable of interest (Pct Non-functional pumps) and center the spatially lagged variable around its mean\n\nnga_wpnona$lag_PctNonFunc <- lag.listw(rswm_qnona, nga_wpnona$`pct_non-functional`)\nDV <- nga_wpnona$lag_PctNonFunc - mean(nga_wpnona$lag_PctNonFunc)\nclass(DV)\n\n[1] \"numeric\"\n\n\nCenter the local Moran’s around the mean\nThe first col [ , 1] of the localMI matrix contains LocalMoran’s I values\n\nLM_I <- localMI[,1] - mean(localMI[,1])\nclass(LM_I)\n\n[1] \"numeric\"\n\n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05\n\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\nHere, are we using filters? Using DV and LM_I vectors to assign value of 1 to quadrant vector (init as all 0)\nDV < 0 means GDPPC spatial lag is lower than mean.; spatial lag is low?\nLM_I < 0 means Local Moran I value is less than mean. LISA of an observation gives an indication of the extent of significant spatial clustering of similar values around that observation. When LM_I > 0 means clustering of HH or LL values. When LM_I < 0 means dispersion of HL or LH values.\n\n\nquadrant[DV < 0 & LM_I > 0] <- 1 # low-low\nquadrant\n\n  [1] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0\n [38] 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1\n [75] 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0\n[112] 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0\n[149] 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[186] 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 1 0\n[223] 1 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0\n[260] 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0\n[297] 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n[334] 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[371] 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0\n[408] 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 1\n[445] 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 0 0 1 0 1 1 0 0 0 0 0\n[482] 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0\n[519] 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[556] 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n[593] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[630] 0 0 1 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[667] 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1\n[704] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n[741] 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0\n\n\n\nquadrant[DV > 0 & LM_I < 0] <- 2 # low- high\nquadrant[DV < 0 & LM_I < 0] <- 3 # high- low\nquadrant[DV > 0 & LM_I > 0] <- 4 # high-high\nquadrant\n\n  [1] 4 2 2 4 1 3 3 3 2 3 2 4 2 3 3 3 2 2 3 4 1 1 2 2 3 2 3 3 3 4 1 1 2 3 4 4 4\n [38] 3 4 4 2 2 2 2 2 3 2 1 2 1 3 2 1 3 1 3 2 3 4 4 1 2 2 2 2 2 3 3 2 2 3 3 2 1\n [75] 2 3 3 3 3 3 2 1 2 1 1 3 3 3 1 3 3 4 3 3 3 3 3 3 1 3 2 2 3 2 2 1 4 1 1 4 2\n[112] 3 1 2 1 2 2 2 4 3 2 2 2 4 1 2 3 3 4 1 2 4 2 2 4 3 3 1 4 3 1 3 3 1 1 4 2 3\n[149] 3 2 1 2 3 1 3 4 3 1 3 2 2 4 3 1 2 1 4 1 2 3 2 2 2 3 3 2 2 2 2 3 4 4 4 2 2\n[186] 2 1 1 3 2 1 1 1 3 4 4 4 4 4 4 4 3 4 4 1 4 4 4 4 2 2 1 1 2 1 1 1 2 2 2 1 4\n[223] 1 3 1 2 1 3 3 3 1 1 3 2 3 1 3 2 3 3 1 4 3 4 3 3 4 2 2 3 2 2 1 3 3 2 2 1 2\n[260] 1 1 2 4 3 1 3 1 2 3 3 3 3 3 4 3 3 3 3 4 4 2 4 4 4 3 3 1 1 3 2 3 2 2 2 2 2\n[297] 4 2 2 1 4 2 3 3 1 4 3 2 2 3 3 3 3 4 4 2 2 1 2 1 3 2 2 2 4 3 4 4 4 3 3 2 2\n[334] 4 4 2 2 2 4 2 2 2 3 1 4 3 4 3 4 2 2 2 2 2 3 3 3 2 2 2 2 3 2 4 4 2 3 3 4 3\n[371] 3 3 1 2 3 1 1 3 3 2 2 1 3 3 3 3 4 1 2 4 2 1 3 2 3 2 3 3 2 2 3 1 1 3 1 1 3\n[408] 3 2 3 2 3 2 1 3 3 2 3 4 2 2 2 3 2 1 3 1 2 4 2 2 1 2 2 1 1 2 2 1 1 3 3 2 1\n[445] 2 4 2 3 3 2 3 1 1 2 3 3 2 3 2 3 2 2 1 1 1 2 1 2 1 1 2 4 1 2 1 1 3 3 3 2 3\n[482] 2 2 2 1 3 2 4 2 1 3 1 2 4 2 2 1 4 2 4 4 1 1 2 4 3 3 2 3 4 4 4 1 2 2 1 1 3\n[519] 3 1 3 3 1 1 4 4 4 3 1 3 3 2 2 4 4 3 2 4 2 3 2 3 4 2 2 4 4 4 2 2 3 2 2 3 3\n[556] 2 4 1 2 3 2 3 3 3 4 3 3 1 4 4 4 3 4 4 4 4 1 3 4 2 3 3 4 2 3 4 4 3 1 3 4 4\n[593] 2 3 4 3 2 3 2 2 3 3 3 4 3 3 4 2 3 1 2 3 4 2 2 2 4 2 3 3 2 2 3 2 3 3 2 2 3\n[630] 4 2 1 1 3 3 2 3 3 2 3 1 1 3 3 3 2 2 4 1 4 2 3 2 2 2 4 2 3 2 2 2 3 3 3 3 3\n[667] 2 2 1 2 3 3 3 3 4 1 3 3 4 1 2 2 1 3 1 2 3 2 4 1 2 1 1 1 1 2 3 3 3 3 3 1 1\n[704] 2 4 2 4 4 2 4 2 4 2 4 3 2 2 1 2 4 4 2 2 4 4 2 2 2 3 3 1 4 4 4 3 3 3 2 2 2\n[741] 2 4 4 2 3 2 3 4 2 3 3 3 1 1 1 3 2 2 3 3 2\n\n\n\nlastly, place non-significant Moran in the category 0\n\n\nquadrant[localMI[,5]>signif] <- 0\nquadrant\n\n  [1] 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 1 1 0 0 4 4 0\n [38] 0 4 0 0 0 0 0 0 3 0 1 0 1 0 0 1 0 0 0 0 0 4 4 1 0 2 0 0 0 0 0 0 0 0 0 0 1\n [75] 0 0 0 0 3 0 0 1 2 1 0 0 0 0 1 0 0 4 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 1 1 4 0\n[112] 0 0 0 0 0 0 0 4 0 0 0 0 4 0 0 0 0 4 1 0 4 0 0 0 0 0 1 0 3 0 0 3 1 0 0 0 0\n[149] 0 0 0 0 0 1 3 4 0 1 0 2 0 0 0 1 0 0 4 1 0 0 0 0 0 0 0 0 0 0 0 0 4 4 0 0 0\n[186] 0 1 0 0 0 0 1 0 0 0 4 4 4 4 4 4 0 0 4 0 4 4 4 4 2 0 0 0 0 0 0 0 0 0 0 0 4\n[223] 1 0 1 2 1 0 0 0 1 0 0 0 0 0 0 0 3 0 0 4 0 0 3 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n[260] 0 0 0 4 0 1 3 1 0 0 0 0 0 0 0 0 0 0 0 4 4 0 4 4 4 0 0 0 1 0 0 3 0 0 0 0 0\n[297] 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 4 4 2 0 0 0 1 0 0 0 0 4 0 4 4 4 0 0 0 0\n[334] 4 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 3 0 4 0\n[371] 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 4 1 0 0 2 1 0 0 0 0 0 0 0 0 0 1 0 3 1 1 0\n[408] 0 0 0 0 0 0 1 0 0 0 0 0 0 0 2 0 0 1 0 1 0 0 0 2 1 0 0 1 0 0 0 1 0 0 0 0 0\n[445] 0 4 0 0 3 0 0 1 1 0 0 0 0 0 0 0 0 2 1 1 1 0 1 0 0 1 0 4 1 2 0 1 0 0 0 0 0\n[482] 0 0 0 0 0 0 4 0 1 0 1 0 4 0 0 0 0 0 0 0 1 1 0 0 0 3 2 0 0 4 0 0 0 0 1 0 0\n[519] 3 0 3 0 1 1 4 4 4 0 0 0 0 0 0 0 4 3 0 4 0 0 0 0 0 0 0 4 0 4 0 0 0 0 0 0 0\n[556] 0 0 0 0 0 0 0 0 0 4 3 0 0 0 0 4 0 4 4 4 4 1 0 4 0 0 0 4 0 0 4 0 0 0 0 4 4\n[593] 0 0 4 0 2 0 0 2 0 0 0 4 0 0 4 0 0 1 0 0 4 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0\n[630] 4 0 0 0 0 0 0 0 0 0 0 1 1 0 0 3 0 0 0 0 4 0 0 0 0 0 4 0 0 0 0 0 3 3 0 0 0\n[667] 0 0 1 0 0 0 0 0 4 0 0 0 4 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 2 0 0 3 3 0 0 1\n[704] 2 4 2 4 4 2 0 0 4 0 0 0 0 0 1 0 4 4 0 0 0 4 0 0 0 0 0 1 4 4 0 0 0 3 0 0 0\n[741] 0 0 4 0 0 0 0 0 0 0 3 0 0 1 1 0 0 0 0 0 0\n\n\nCombining all together\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\n\nnga_wpnona.localMI$quadrant <- quadrant\ncolours <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga_wpnona.localMI) +\n  tm_fill(col = 'quadrant',\n          palette= colours[c(sort(unique(quadrant))) + 1],\n          labels = clusters[c(sort(unique(quadrant))) + 1],\n          popups.var = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\n\n\n\n\nwp_nonfunctional <- qtm(nga_wpnona, \"pct_non-functional\") +\n  tm_layout(legend.width = 0.3,\n            legend.height = 0.3)\n\nLISAmap <- tm_shape(nga_wpnona.localMI) +\n  tm_fill(col = 'quadrant',\n          palette= colours[c(sort(unique(quadrant))) + 1],\n          labels = clusters[c(sort(unique(quadrant))) + 1],\n          popups.var = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.height = 0.2,\n            legend.width = 0.2)\n\ntmap_arrange(wp_nonfunctional, LISAmap, \n             asp = 1, ncol =2)\n\n\n\n\nProf kam take-home 1: https://isss624.netlify.app/in-class_ex/in-class_ex2/in-class_ex2"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, funModeling, GGally)"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home_Ex02",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown. Need to replace or else we cannot accurately determine the total number of water points later.\n\nwp_nga <- wp_nga %>% \n  mutate(status_cle = replace_na(status_cle, 'Unknown'))\n\nCheck after replacing Na with “Unknown”\n\ndplyr::count(wp_nga, status_cle, sort = TRUE)\n\n\n\nEDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq (data = wp_nga,\n      input = 'status_cle')"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#extracting-water-point-data",
    "href": "Take-home_Ex02/Take-home_Ex02.html#extracting-water-point-data",
    "title": "Take-home_Ex02",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\n\nExtracting functional water point\n\nwpt_functional <- wp_nga %>% \n  filter(status_cle %in%\n           c('Functional',\n             'Functional but not in use',\n             'Functional but needs repair'))\n\nRechecking the viz\n\nfreq (data = wpt_functional,\n      input = 'status_cle')\n\n\n\nExtracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>% \n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\n\nExtracting water point with Unknown class\n\nwpt_unknown <- wp_nga %>% \n  filter(status_cle==\"Unknown\")"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#extracting-hand-pump-data",
    "href": "Take-home_Ex02/Take-home_Ex02.html#extracting-hand-pump-data",
    "title": "Take-home_Ex02",
    "section": "Extracting Hand pump Data",
    "text": "Extracting Hand pump Data\nVisualise the ‘X_water_tec’ variable\n\nwp_nga <- wp_nga %>% \n  mutate(X_water_tec = replace_na(X_water_tec, 'Unknown'))\n\n\nfreq (data = wp_nga,\n      input = 'X_water_tec')\n\n\nwpt_handpump <- wp_nga %>% \n  filter(X_water_tec %in% \"Hand Pump\")"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#extracting-usage-capacity-data",
    "href": "Take-home_Ex02/Take-home_Ex02.html#extracting-usage-capacity-data",
    "title": "Take-home_Ex02",
    "section": "Extracting Usage Capacity Data",
    "text": "Extracting Usage Capacity Data\nVisualising\n\nfreq (data = wp_nga,\n      input = 'usage_cap')\n\n\nwpt_usagecapless1000 <- wp_nga %>% \n  filter(usage_cap <1000)\n\n\nwpt_usagecap1000 <- wp_nga %>% \n  filter(usage_cap ==1000)"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#extracting-urban-and-rural-data",
    "href": "Take-home_Ex02/Take-home_Ex02.html#extracting-urban-and-rural-data",
    "title": "Take-home_Ex02",
    "section": "Extracting Urban and rural Data",
    "text": "Extracting Urban and rural Data\nVisualising\n\nfreq (data = wp_nga,\n      input = 'is_urban')\n\n\nwpt_rural <- wp_nga %>% \n  filter(is_urban %in% \"False\")"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#extracting-water-quality-data",
    "href": "Take-home_Ex02/Take-home_Ex02.html#extracting-water-quality-data",
    "title": "Take-home_Ex02",
    "section": "Extracting water quality Data",
    "text": "Extracting water quality Data\n\nwp_nga <- wp_nga %>% \n  mutate(subjective = replace_na(subjective, 'Unknown'))\n\n\nfreq (data = wp_nga,\n      input = 'subjective')\n\n\nwpt_qualityok <- wp_nga %>% \n  filter(subjective %in%\n           c(\"Acceptable quality\", \n             \"Within National standards (potable)\",\n             \"Within National limits (potable)\"))"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex02/Take-home_Ex02.html#performing-point-in-polygon-count",
    "title": "Take-home_Ex02",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\nFinding the points ID that lies in each of the 774 polygon. The command below helps us to identify the total number of water points in the 774 LGAs.\n\nst_intersects(nga,wp_nga)\n\nSparse geometry binary predicate list of length 774, where the predicate was `intersects’\nFirst 10 elements:\n1: 2151, 2778, 4060, 5866, 6240, 6937, 7015, 54986, 55874, 56922, …\n2: 968, 1112, 1154, 1172, 1247, 1299, 1337, 1348, 1506, 1553, …\n3: (empty)\n4: 15502, 15707, 16704, 16979, 17047, 17069, 17531, 17967, 18444, 18542, …\nFinding the total number of points in each polygon\n\nlengths(st_intersects(nga,wp_nga))\n\nOutput: [1] 17 71 0 57 means there are 17 water points in polygon 1, 71 water points in polygon 2 etc…\n\nCreating a new sf data frame (nga_wp) that we need for clustering by combining with nga geospatial file\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(st_intersects(nga,wpt_unknown))) %>%\n  mutate(`wpt handpump` = lengths(st_intersects(nga,wpt_handpump))) %>%\n  mutate(`wpt usagecapless1000` = lengths(st_intersects(nga,wpt_usagecapless1000))) %>%\n  mutate(`wpt usagecap1000` = lengths(st_intersects(nga,wpt_usagecap1000))) %>%\n  mutate(`wpt rural` = lengths(st_intersects(nga,wpt_rural))) %>%\n  mutate(`wpt qualityok` = lengths(st_intersects(nga,wpt_qualityok)))\n\n\n\nComputing %\n\nnga_wp <- nga_wp %>% \n  mutate('pct_functional' = `wpt functional`/ `total wpt`) %>% \n  mutate('pct_non-functional' = `wpt non-functional`/ `total wpt`) %>% \n  mutate('pct_unknown' = `wpt unknown`/ `total wpt`) %>%\n  mutate('pct_handpump' = `wpt handpump`/ `total wpt`) %>%\n  mutate('pct_usagecapless1000' = `wpt usagecapless1000`/ `total wpt`) %>%\n  mutate('pct_usagecap1000' = `wpt usagecap1000`/ `total wpt`) %>%\n  mutate('pct_rural' = `wpt rural`/ `total wpt`) %>%\n  mutate('pct_qualityok' = `wpt qualityok`/ `total wpt`)\n\nReplace all NaN values with zero\n\nnga_wp[is.na(nga_wp)]=0"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#saving-the-analytical-data-table",
    "href": "Take-home_Ex02/Take-home_Ex02.html#saving-the-analytical-data-table",
    "title": "Take-home_Ex02",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\n\nwrite_rds(nga_wp, 'geodata/nga_wp2.rds')"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#reading-the-nga_wp2.rds-file",
    "href": "Take-home_Ex02/Take-home_Ex02.html#reading-the-nga_wp2.rds-file",
    "title": "Take-home_Ex02",
    "section": "1 Reading the nga_wp2.rds file",
    "text": "1 Reading the nga_wp2.rds file\n\nnga_wp2 <- readRDS('geodata/nga_wp2.rds')\n\n\nVisualising\n\nls(nga_wp2)\n\n [1] \"geometry\"             \"Level\"                \"pct_functional\"      \n [4] \"pct_handpump\"         \"pct_non-functional\"   \"pct_qualityok\"       \n [7] \"pct_rural\"            \"pct_unknown\"          \"pct_usagecap1000\"    \n[10] \"pct_usagecapless1000\" \"shapeGroup\"           \"shapeID\"             \n[13] \"shapeName\"            \"shapeType\"            \"total wpt\"           \n[16] \"wpt functional\"       \"wpt handpump\"         \"wpt non-functional\"  \n[19] \"wpt qualityok\"        \"wpt rural\"            \"wpt unknown\"         \n[22] \"wpt usagecap1000\"     \"wpt usagecapless1000\"\n\n\n\ntm_shape(nga_wp2) +\n    tm_polygons(c(\"total wpt\", \"pct_functional\", \"pct_non-functional\", \"pct_handpump\", \"pct_rural\", \"pct_usagecapless1000\", \"pct_usagecap1000\",\"pct_qualityok\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#correlation-analysis",
    "href": "Take-home_Ex02/Take-home_Ex02.html#correlation-analysis",
    "title": "Take-home_Ex02",
    "section": "2 Correlation Analysis",
    "text": "2 Correlation Analysis\nRemember for hierarchical clustering, there are three conditions to be met: (1) not too large a range (else standardisation) , (2) no missing values and (3) no multi-collinearity in the data variables.\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, I will use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\nstr(nga_wp2)\n\nClasses 'sf' and 'data.frame':  774 obs. of  23 variables:\n $ shapeName           : chr  \"Aba North\" \"Aba South\" \"Abadam\" \"Abaji\" ...\n $ Level               : chr  \"ADM2\" \"ADM2\" \"ADM2\" \"ADM2\" ...\n $ shapeID             : chr  \"NGA-ADM2-72505758B79815894\" \"NGA-ADM2-72505758B67905963\" \"NGA-ADM2-72505758B57073987\" \"NGA-ADM2-72505758B61968000\" ...\n $ shapeGroup          : chr  \"NGA\" \"NGA\" \"NGA\" \"NGA\" ...\n $ shapeType           : chr  \"ADM2\" \"ADM2\" \"ADM2\" \"ADM2\" ...\n $ geometry            :sfc_MULTIPOLYGON of length 774; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:71, 1:2] 7.4 7.4 7.4 7.4 7.39 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n $ total wpt           : int  17 71 0 57 48 233 34 119 152 66 ...\n $ wpt functional      : int  7 29 0 23 23 82 16 72 79 18 ...\n $ wpt non-functional  : int  9 35 0 34 25 42 15 33 62 26 ...\n $ wpt unknown         : int  1 7 0 0 0 109 3 14 11 22 ...\n $ wpt handpump        : int  2 7 0 23 4 102 5 20 91 1 ...\n $ wpt usagecapless1000: int  3 9 0 23 4 211 8 35 102 23 ...\n $ wpt usagecap1000    : int  14 62 0 34 44 22 26 84 50 43 ...\n $ wpt rural           : int  0 4 0 48 40 204 7 0 145 48 ...\n $ wpt qualityok       : int  13 57 0 56 35 98 25 103 86 35 ...\n $ pct_functional      : num  0.412 0.408 0 0.404 0.479 ...\n $ pct_non-functional  : num  0.529 0.493 0 0.596 0.521 ...\n $ pct_unknown         : num  0.0588 0.0986 0 0 0 ...\n $ pct_handpump        : num  0.1176 0.0986 0 0.4035 0.0833 ...\n $ pct_usagecapless1000: num  0.1765 0.1268 0 0.4035 0.0833 ...\n $ pct_usagecap1000    : num  0.824 0.873 0 0.596 0.917 ...\n $ pct_rural           : num  0 0.0563 0 0.8421 0.8333 ...\n $ pct_qualityok       : num  0.765 0.803 0 0.982 0.729 ...\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:22] \"shapeName\" \"Level\" \"shapeID\" \"shapeGroup\" ...\n\n\n\nhead(nga_wp2[7:23])\n\nSimple feature collection with 6 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6.778522 ymin: 4.888055 xmax: 13.83477 ymax: 13.71406\nGeodetic CRS:  WGS 84\n  total wpt wpt functional wpt non-functional wpt unknown wpt handpump\n1        17              7                  9           1            2\n2        71             29                 35           7            7\n3         0              0                  0           0            0\n4        57             23                 34           0           23\n5        48             23                 25           0            4\n6       233             82                 42         109          102\n  wpt usagecapless1000 wpt usagecap1000 wpt rural wpt qualityok pct_functional\n1                    3               14         0            13      0.4117647\n2                    9               62         4            57      0.4084507\n3                    0                0         0             0      0.0000000\n4                   23               34        48            56      0.4035088\n5                    4               44        40            35      0.4791667\n6                  211               22       204            98      0.3519313\n  pct_non-functional pct_unknown pct_handpump pct_usagecapless1000\n1          0.5294118  0.05882353   0.11764706           0.17647059\n2          0.4929577  0.09859155   0.09859155           0.12676056\n3          0.0000000  0.00000000   0.00000000           0.00000000\n4          0.5964912  0.00000000   0.40350877           0.40350877\n5          0.5208333  0.00000000   0.08333333           0.08333333\n6          0.1802575  0.46781116   0.43776824           0.90557940\n  pct_usagecap1000  pct_rural pct_qualityok                       geometry\n1        0.8235294 0.00000000     0.7647059 MULTIPOLYGON (((7.401109 5....\n2        0.8732394 0.05633803     0.8028169 MULTIPOLYGON (((7.334479 5....\n3        0.0000000 0.00000000     0.0000000 MULTIPOLYGON (((13.83477 13...\n4        0.5964912 0.84210526     0.9824561 MULTIPOLYGON (((7.045872 9....\n5        0.9166667 0.83333333     0.7291667 MULTIPOLYGON (((7.811244 5....\n6        0.0944206 0.87553648     0.4206009 MULTIPOLYGON (((8.4109 6.28...\n\n\nNeed to drop geometry column or else unable to check correlation st_set_geometry(NULL) will drop away the geometry column.\nclustv2 refers to a data frame that contains all the potential numerical variables for clustering. After multidisciplinary check, we might drop some of them.\n\nclustv2 <- nga_wp2 %>% \n  select(8:9, 16:23) %>% \n  st_set_geometry(NULL)\nclass(clustv2)\n\n[1] \"data.frame\"\n\nclustv2\n\n    wpt functional wpt non-functional pct_functional pct_non-functional\n1                7                  9     0.41176471        0.529411765\n2               29                 35     0.40845070        0.492957746\n3                0                  0     0.00000000        0.000000000\n4               23                 34     0.40350877        0.596491228\n5               23                 25     0.47916667        0.520833333\n6               82                 42     0.35193133        0.180257511\n7               16                 15     0.47058824        0.441176471\n8               72                 33     0.60504202        0.277310924\n9               79                 62     0.51973684        0.407894737\n10              18                 26     0.27272727        0.393939394\n11              25                 13     0.64102564        0.333333333\n12              54                 73     0.40000000        0.540740741\n13              28                 35     0.44444444        0.555555556\n14              55                 36     0.42968750        0.281250000\n15             114                146     0.32758621        0.419540230\n16              78                 73     0.46153846        0.431952663\n17              36                 37     0.33962264        0.349056604\n18              80                 77     0.43010753        0.413978495\n19               8                 32     0.12500000        0.500000000\n20              47                 46     0.50537634        0.494623656\n21              25                 54     0.30864198        0.666666667\n22              52                  4     0.86666667        0.066666667\n23               4                  6     0.10526316        0.157894737\n24              64                 47     0.56637168        0.415929204\n25              20                 32     0.26666667        0.426666667\n26               9                 10     0.47368421        0.526315789\n27              14                  0     1.00000000        0.000000000\n28             160                155     0.40712468        0.394402036\n29              89                 57     0.50857143        0.325714286\n30              76                 60     0.44186047        0.348837209\n31              26                 39     0.40000000        0.600000000\n32               4                  1     0.50000000        0.125000000\n33             165                 37     0.81683168        0.183168317\n34              33                 47     0.26400000        0.376000000\n35              75                 61     0.41899441        0.340782123\n36             131                177     0.42532468        0.574675325\n37              29                 33     0.46774194        0.532258065\n38             107                120     0.47136564        0.528634361\n39             111                171     0.38541667        0.593750000\n40              50                106     0.32051282        0.679487179\n41             136                162     0.45637584        0.543624161\n42              43                135     0.16796875        0.527343750\n43               8                  4     0.57142857        0.285714286\n44              20                 27     0.42553191        0.574468085\n45              52                  8     0.86666667        0.133333333\n46             136                 43     0.75555556        0.238888889\n47             255                110     0.69863014        0.301369863\n48              60                 45     0.57142857        0.428571429\n49             177                 73     0.54629630        0.225308642\n50              68                 28     0.70833333        0.291666667\n51              20                  8     0.50000000        0.200000000\n52              17                 16     0.24637681        0.231884058\n53              26                 17     0.48148148        0.314814815\n54              24                 14     0.32876712        0.191780822\n55               6                 11     0.35294118        0.647058824\n56              16                  0     0.40000000        0.000000000\n57               1                  5     0.16666667        0.833333333\n58               7                  4     0.53846154        0.307692308\n59              57                 18     0.76000000        0.240000000\n60              11                 41     0.20370370        0.759259259\n61              12                 24     0.30769231        0.615384615\n62               0                  0     0.00000000        0.000000000\n63             109                 67     0.51658768        0.317535545\n64              64                 36     0.64000000        0.360000000\n65              70                 60     0.53846154        0.461538462\n66               7                  7     0.28000000        0.280000000\n67              89                 43     0.62676056        0.302816901\n68              40                  7     0.85106383        0.148936170\n69              29                  7     0.80555556        0.194444444\n70              98                 92     0.43946188        0.412556054\n71             111                103     0.45121951        0.418699187\n72              47                 29     0.41964286        0.258928571\n73              36                 51     0.32142857        0.455357143\n74              37                 30     0.55223881        0.447761194\n75             500                 56     0.89928058        0.100719424\n76              50                 40     0.53763441        0.430107527\n77              11                  8     0.42307692        0.307692308\n78               8                  0     0.22857143        0.000000000\n79               9                  9     0.22500000        0.225000000\n80               6                 19     0.18181818        0.575757576\n81             752                142     0.84116331        0.158836689\n82              71                101     0.33809524        0.480952381\n83             254                 62     0.80379747        0.196202532\n84              69                 34     0.66990291        0.330097087\n85             232                 48     0.82857143        0.171428571\n86               0                  0     0.00000000        0.000000000\n87             320                 29     0.91690544        0.083094556\n88              71                  7     0.91025641        0.089743590\n89             148                117     0.55849057        0.441509434\n90             164                 83     0.58362989        0.295373665\n91               0                  0     0.00000000        0.000000000\n92              78                100     0.27177700        0.348432056\n93             109                 47     0.66871166        0.288343558\n94              52                 74     0.41269841        0.587301587\n95              67                 50     0.33668342        0.251256281\n96              80                 51     0.61068702        0.389312977\n97             108                 52     0.67500000        0.325000000\n98             123                 32     0.79354839        0.206451613\n99             182                115     0.61279461        0.387205387\n100             51                 21     0.70833333        0.291666667\n101             73                  9     0.89024390        0.109756098\n102             47                 82     0.24607330        0.429319372\n103             15                 15     0.25000000        0.250000000\n104             29                 58     0.22137405        0.442748092\n105            117                 52     0.69230769        0.307692308\n106            211                 30     0.87551867        0.124481328\n107             88                101     0.46560847        0.534391534\n108            218                 53     0.80442804        0.195571956\n109             36                 61     0.37113402        0.628865979\n110            645                131     0.83118557        0.168814433\n111            142                 17     0.89308176        0.106918239\n112             50                117     0.29940120        0.700598802\n113            102                 16     0.85000000        0.133333333\n114             76                 21     0.78350515        0.216494845\n115             73                  0     1.00000000        0.000000000\n116             51                 47     0.52040816        0.479591837\n117             97                 26     0.78225806        0.209677419\n118            144                128     0.40223464        0.357541899\n119             76                 57     0.33333333        0.250000000\n120             63                 51     0.48837209        0.395348837\n121              1                  3     0.25000000        0.750000000\n122              2                  0     1.00000000        0.000000000\n123             80                 25     0.74074074        0.231481481\n124             79                 85     0.44632768        0.480225989\n125             98                 29     0.73684211        0.218045113\n126              6                 16     0.27272727        0.727272727\n127            288                 41     0.87537994        0.124620061\n128             65                 25     0.72222222        0.277777778\n129             24                 11     0.68571429        0.314285714\n130             97                 30     0.76377953        0.236220472\n131             69                 94     0.42331288        0.576687117\n132             79                 18     0.81443299        0.185567010\n133             69                 70     0.39204545        0.397727273\n134              3                  3     0.42857143        0.428571429\n135             58                 58     0.49152542        0.491525424\n136             17                 26     0.20731707        0.317073171\n137             19                 48     0.26027397        0.657534247\n138             32                 40     0.44444444        0.555555556\n139            148                 49     0.75126904        0.248730964\n140             25                  8     0.75757576        0.242424242\n141              0                  4     0.00000000        1.000000000\n142             85                 53     0.61594203        0.384057971\n143             36                  3     0.92307692        0.076923077\n144             28                 46     0.37837838        0.621621622\n145            131                 72     0.64532020        0.354679803\n146              0                  0     0.00000000        0.000000000\n147             57                  7     0.89062500        0.109375000\n148             49                116     0.29696970        0.703030303\n149             72                 43     0.62608696        0.373913043\n150             47                 30     0.61038961        0.389610390\n151             30                 24     0.55555556        0.444444444\n152             45                 45     0.50000000        0.500000000\n153            277                 22     0.92642140        0.073578595\n154             24                 71     0.25263158        0.747368421\n155            148                 63     0.70142180        0.298578199\n156            135                  8     0.94405594        0.055944056\n157              5                  2     0.62500000        0.250000000\n158             33                 71     0.31730769        0.682692308\n159             10                  3     0.76923077        0.230769231\n160              0                  0     0.00000000        0.000000000\n161             65                 45     0.59090909        0.409090909\n162             53                 34     0.60227273        0.386363636\n163             79                 83     0.42702703        0.448648649\n164             20                116     0.14705882        0.852941176\n165             24                 16     0.53333333        0.355555556\n166            152                  2     0.98701299        0.012987013\n167             53                 27     0.66250000        0.337500000\n168            242                 67     0.78317152        0.216828479\n169              4                 21     0.16000000        0.840000000\n170             70                 40     0.26923077        0.153846154\n171            103                 84     0.54787234        0.446808511\n172            141                 50     0.65277778        0.231481481\n173             72                 39     0.49315068        0.267123288\n174            126                130     0.49218750        0.507812500\n175              9                 23     0.20000000        0.511111111\n176             12                 23     0.20000000        0.383333333\n177             26                  2     0.81250000        0.062500000\n178             32                 34     0.32989691        0.350515464\n179             72                 49     0.45283019        0.308176101\n180             25                 27     0.48076923        0.519230769\n181             22                 23     0.46808511        0.489361702\n182            313                133     0.64403292        0.273662551\n183              4                 29     0.12121212        0.878787879\n184             37                 31     0.54411765        0.455882353\n185             81                121     0.40099010        0.599009901\n186             58                  4     0.64444444        0.044444444\n187             66                 78     0.40740741        0.481481481\n188            114                 82     0.48717949        0.350427350\n189              2                  3     0.05555556        0.083333333\n190              2                  0     1.00000000        0.000000000\n191              4                  2     0.66666667        0.333333333\n192             29                 18     0.44615385        0.276923077\n193             14                  4     0.60869565        0.173913043\n194             20                  1     0.83333333        0.041666667\n195              8                  1     0.42105263        0.052631579\n196             90                 85     0.43478261        0.410628019\n197              7                 20     0.21875000        0.625000000\n198             14                 20     0.41176471        0.588235294\n199              8                 20     0.28571429        0.714285714\n200             16                 18     0.47058824        0.529411765\n201             40                 71     0.36036036        0.639639640\n202             19                 57     0.25000000        0.750000000\n203             19                 39     0.32758621        0.672413793\n204              4                  9     0.21052632        0.473684211\n205              8                 14     0.36363636        0.636363636\n206              8                 17     0.32000000        0.680000000\n207             15                  0     0.78947368        0.000000000\n208             18                 33     0.35294118        0.647058824\n209              8                 27     0.22857143        0.771428571\n210             17                 29     0.35416667        0.604166667\n211             18                 23     0.42857143        0.547619048\n212             44                 22     0.66666667        0.333333333\n213             46                 84     0.27878788        0.509090909\n214             19                 13     0.26388889        0.180555556\n215              8                 10     0.15686275        0.196078431\n216             15                 19     0.26785714        0.339285714\n217            142                 72     0.39010989        0.197802198\n218            135                 60     0.42993631        0.191082803\n219             59                  4     0.93650794        0.063492063\n220             45                 10     0.81818182        0.181818182\n221            266                 79     0.77101449        0.228985507\n222             15                  4     0.78947368        0.210526316\n223             13                  0     1.00000000        0.000000000\n224             79                111     0.41578947        0.584210526\n225             52                 19     0.73239437        0.267605634\n226             53                 17     0.75714286        0.242857143\n227            149                  4     0.97385621        0.026143791\n228             38                 21     0.64406780        0.355932203\n229            412                 33     0.92584270        0.074157303\n230            296                147     0.66817156        0.331828442\n231             70                 11     0.86419753        0.135802469\n232              9                  5     0.64285714        0.357142857\n233            346                 87     0.79907621        0.200923788\n234             78                 11     0.87640449        0.123595506\n235            120                 43     0.73619632        0.263803681\n236             78                 65     0.47272727        0.393939394\n237            104                104     0.39245283        0.392452830\n238            191                  3     0.98453608        0.015463918\n239            101                 74     0.57714286        0.422857143\n240             75                 72     0.38659794        0.371134021\n241              0                  0     0.00000000        0.000000000\n242            191                 92     0.67491166        0.325088339\n243             78                 32     0.70909091        0.290909091\n244             13                  2     0.86666667        0.133333333\n245            120                138     0.46511628        0.534883721\n246              1                  1     0.50000000        0.500000000\n247             31                 39     0.44285714        0.557142857\n248             29                 16     0.64444444        0.355555556\n249             15                 27     0.35714286        0.642857143\n250              0                  0     0.00000000        0.000000000\n251             17                 23     0.42500000        0.575000000\n252              0                  0     0.00000000        0.000000000\n253              1                  1     0.50000000        0.500000000\n254             32                 61     0.27350427        0.521367521\n255            238                145     0.62140992        0.378590078\n256             46                 21     0.68656716        0.313432836\n257             38                 23     0.46341463        0.280487805\n258            324                 19     0.94460641        0.055393586\n259             63                 33     0.65625000        0.343750000\n260             11                 11     0.50000000        0.500000000\n261              0                  0     0.00000000        0.000000000\n262             63                 51     0.55263158        0.447368421\n263             65                 51     0.55084746        0.432203390\n264            101                 23     0.81451613        0.185483871\n265            104                 92     0.53061224        0.469387755\n266             92                 12     0.88461538        0.115384615\n267             67                  9     0.88157895        0.118421053\n268             43                 78     0.34126984        0.619047619\n269              2                 18     0.09523810        0.857142857\n270            140                 62     0.69306931        0.306930693\n271              0                  0     0.00000000        0.000000000\n272            108                 84     0.56250000        0.437500000\n273             30                  2     0.93750000        0.062500000\n274              6                  2     0.75000000        0.250000000\n275             18                  4     0.54545455        0.121212121\n276             73                 45     0.57480315        0.354330709\n277             58                 25     0.66666667        0.287356322\n278             22                  6     0.61111111        0.166666667\n279             73                 25     0.68224299        0.233644860\n280              7                 27     0.20588235        0.794117647\n281             96                 70     0.45933014        0.334928230\n282             38                 35     0.37254902        0.343137255\n283             89                 66     0.44949495        0.333333333\n284             65                 45     0.48872180        0.338345865\n285              8                 12     0.40000000        0.600000000\n286             25                 29     0.46296296        0.537037037\n287             47                 24     0.57317073        0.292682927\n288             20                 31     0.39215686        0.607843137\n289             22                 37     0.37288136        0.627118644\n290             48                 55     0.46153846        0.528846154\n291              6                  4     0.21428571        0.142857143\n292              7                  6     0.30434783        0.260869565\n293              5                  2     0.10204082        0.040816327\n294              7                  4     0.12500000        0.071428571\n295             54                 29     0.52427184        0.281553398\n296             19                  3     0.39583333        0.062500000\n297             32                 19     0.52459016        0.311475410\n298             58                 92     0.37662338        0.597402597\n299             78                103     0.39593909        0.522842640\n300             67                 60     0.48905109        0.437956204\n301             87                 73     0.48876404        0.410112360\n302             30                 35     0.35714286        0.416666667\n303             62                 93     0.40000000        0.600000000\n304            320                278     0.53244592        0.462562396\n305             42                 76     0.33333333        0.603174603\n306              8                 10     0.09638554        0.120481928\n307             77                216     0.26279863        0.737201365\n308             10                 14     0.41666667        0.583333333\n309             12                 12     0.27272727        0.272727273\n310             20                  3     0.47619048        0.071428571\n311             13                  3     0.38235294        0.088235294\n312              7                 28     0.20000000        0.800000000\n313             28                 29     0.21374046        0.221374046\n314              9                 17     0.25000000        0.472222222\n315              5                  2     0.16129032        0.064516129\n316             14                 34     0.21875000        0.531250000\n317             27                 41     0.30000000        0.455555556\n318             30                 16     0.51724138        0.275862069\n319             65                 98     0.31553398        0.475728155\n320             60                 62     0.49180328        0.508196721\n321              8                 41     0.16326531        0.836734694\n322              1                  0     1.00000000        0.000000000\n323              4                 11     0.26666667        0.733333333\n324            120                 17     0.87591241        0.124087591\n325              6                 15     0.13333333        0.333333333\n326             13                  1     0.61904762        0.047619048\n327             10                  8     0.26315789        0.210526316\n328             33                 54     0.34020619        0.556701031\n329             62                 68     0.33513514        0.367567568\n330             62                 86     0.30845771        0.427860697\n331             26                 37     0.41269841        0.587301587\n332            131                 63     0.54583333        0.262500000\n333             25                 33     0.43103448        0.568965517\n334             15                 32     0.31914894        0.680851064\n335             29                 37     0.43939394        0.560606061\n336             31                  2     0.93939394        0.060606061\n337             69                 47     0.21698113        0.147798742\n338             13                 43     0.12149533        0.401869159\n339             76                 66     0.43930636        0.381502890\n340             14                 15     0.48275862        0.517241379\n341             47                 91     0.33812950        0.654676259\n342              9                 23     0.21428571        0.547619048\n343             60                 56     0.43165468        0.402877698\n344             48                 45     0.49484536        0.463917526\n345             57                 75     0.43181818        0.568181818\n346             76                 35     0.68468468        0.315315315\n347             64                 38     0.62745098        0.372549020\n348             96                 57     0.62745098        0.372549020\n349              4                  0     0.12121212        0.000000000\n350            177                 21     0.89393939        0.106060606\n351              9                 14     0.39130435        0.608695652\n352             22                 25     0.34920635        0.396825397\n353             30                 57     0.34482759        0.655172414\n354             50                 38     0.42372881        0.322033898\n355            106                154     0.40769231        0.592307692\n356             49                 42     0.47115385        0.403846154\n357             41                 30     0.36283186        0.265486726\n358             50                 50     0.45045045        0.450450450\n359             44                  9     0.83018868        0.169811321\n360             23                  1     0.65714286        0.028571429\n361             27                 12     0.25471698        0.113207547\n362             73                 84     0.29918033        0.344262295\n363              1                 43     0.01724138        0.741379310\n364             21                 31     0.23595506        0.348314607\n365             15                 34     0.23437500        0.531250000\n366             32                 34     0.42105263        0.447368421\n367             94                 57     0.60645161        0.367741935\n368             24                 17     0.39344262        0.278688525\n369             50                 49     0.40650407        0.398373984\n370             15                 24     0.38461538        0.615384615\n371             14                 18     0.43750000        0.562500000\n372              7                  2     0.29166667        0.083333333\n373            103                 40     0.72027972        0.279720280\n374             40                  7     0.56338028        0.098591549\n375             14                 45     0.23333333        0.750000000\n376              7                 17     0.15909091        0.386363636\n377            121                 80     0.47450980        0.313725490\n378             85                 42     0.53125000        0.262500000\n379             71                 29     0.22257053        0.090909091\n380             60                 93     0.39215686        0.607843137\n381              4                  3     0.57142857        0.428571429\n382            227                 37     0.85984848        0.140151515\n383             31                  4     0.88571429        0.114285714\n384             65                 58     0.47101449        0.420289855\n385             89                 37     0.70634921        0.293650794\n386             77                 71     0.52027027        0.479729730\n387            137                156     0.46757679        0.532423208\n388             76                 37     0.50000000        0.243421053\n389             63                 32     0.66315789        0.336842105\n390             64                 53     0.31840796        0.263681592\n391             67                 27     0.51538462        0.207692308\n392             44                 85     0.23529412        0.454545455\n393             35                 38     0.47945205        0.520547945\n394             13                  3     0.81250000        0.187500000\n395            127                 81     0.61057692        0.389423077\n396             46                 70     0.39655172        0.603448276\n397            141                  7     0.95270270        0.047297297\n398            245                  1     0.99593496        0.004065041\n399             98                 25     0.79674797        0.203252033\n400              0                  0     0.00000000        0.000000000\n401             57                128     0.30810811        0.691891892\n402            114                 82     0.55339806        0.398058252\n403            201                100     0.66777409        0.332225914\n404             84                 55     0.47191011        0.308988764\n405            276                 10     0.96503497        0.034965035\n406              0                  0     0.00000000        0.000000000\n407             34                 71     0.32380952        0.676190476\n408            219                 81     0.73000000        0.270000000\n409             93                 75     0.32068966        0.258620690\n410            103                 24     0.81102362        0.188976378\n411            217                 89     0.48437500        0.198660714\n412            103                 36     0.74100719        0.258992806\n413            179                 53     0.77155172        0.228448276\n414             54                 14     0.79411765        0.205882353\n415             65                 48     0.57522124        0.424778761\n416             60                 72     0.37037037        0.444444444\n417             99                 65     0.55617978        0.365168539\n418             80                 38     0.67796610        0.322033898\n419             22                 16     0.47826087        0.347826087\n420            116                 60     0.65909091        0.340909091\n421             52                 53     0.32911392        0.335443038\n422            520                 31     0.94373866        0.056261343\n423             82                 59     0.58156028        0.418439716\n424             76                 19     0.80000000        0.200000000\n425            119                 54     0.68786127        0.312138728\n426            275                108     0.71801567        0.281984334\n427             37                 40     0.48051948        0.519480519\n428             35                 29     0.54687500        0.453125000\n429             60                 17     0.77922078        0.220779221\n430             23                 19     0.51111111        0.422222222\n431            172                 41     0.80751174        0.192488263\n432             40                 38     0.45977011        0.436781609\n433            399                100     0.79959920        0.200400802\n434            173                 51     0.76211454        0.224669604\n435            460                 92     0.83333333        0.166666667\n436             28                 42     0.40000000        0.600000000\n437             49                 99     0.33108108        0.668918919\n438             60                 44     0.57142857        0.419047619\n439             18                  1     0.90000000        0.050000000\n440              2                  0     0.66666667        0.000000000\n441            168                 87     0.46537396        0.240997230\n442             48                 31     0.59259259        0.382716049\n443             44                  6     0.75862069        0.103448276\n444            221                 19     0.92083333        0.079166667\n445             67                 87     0.43506494        0.564935065\n446             57                 74     0.39860140        0.517482517\n447              0                  0     0.00000000        0.000000000\n448             42                  9     0.82352941        0.176470588\n449            114                 14     0.89062500        0.109375000\n450             88                 43     0.67175573        0.328244275\n451            138                 68     0.66990291        0.330097087\n452             84                 82     0.42857143        0.418367347\n453             99                  3     0.97058824        0.029411765\n454            103                 73     0.57865169        0.410112360\n455             52                 98     0.34666667        0.653333333\n456             20                 56     0.22988506        0.643678161\n457             82                 49     0.62595420        0.374045802\n458              2                  1     0.66666667        0.333333333\n459            166                 94     0.61254613        0.346863469\n460             53                 51     0.42400000        0.408000000\n461             26                 11     0.70270270        0.297297297\n462             29                  2     0.69047619        0.047619048\n463              2                  0     1.00000000        0.000000000\n464            154                 93     0.41066667        0.248000000\n465             18                 41     0.19565217        0.445652174\n466             90                 27     0.76271186        0.228813559\n467             74                 77     0.42045455        0.437500000\n468             65                 34     0.65000000        0.340000000\n469            111                 73     0.60326087        0.396739130\n470             40                 61     0.27210884        0.414965986\n471             41                 16     0.71929825        0.280701754\n472             30                  7     0.81081081        0.189189189\n473              0                  0     0.00000000        0.000000000\n474            152                 23     0.86857143        0.131428571\n475              0                  0     0.00000000        0.000000000\n476             51                 44     0.51000000        0.440000000\n477              7                  2     0.77777778        0.222222222\n478            140                111     0.55776892        0.442231076\n479             87                  4     0.65413534        0.030075188\n480            128                 42     0.75294118        0.247058824\n481             13                  4     0.76470588        0.235294118\n482             46                 54     0.46000000        0.540000000\n483            104                  2     0.98113208        0.018867925\n484             52                 37     0.56521739        0.402173913\n485            236                 16     0.93650794        0.063492063\n486             79                 17     0.82291667        0.177083333\n487            110                 99     0.34810127        0.313291139\n488             88                 57     0.60689655        0.393103448\n489             67                 29     0.69791667        0.302083333\n490             57                 60     0.48305085        0.508474576\n491            111                  3     0.97368421        0.026315789\n492              0                  0     0.00000000        0.000000000\n493            118                 49     0.70658683        0.293413174\n494             18                 36     0.32142857        0.642857143\n495             63                 59     0.51639344        0.483606557\n496            145                 48     0.75129534        0.248704663\n497              9                  3     0.75000000        0.250000000\n498             13                 13     0.23636364        0.236363636\n499              9                 33     0.21428571        0.785714286\n500             15                  5     0.75000000        0.250000000\n501             63                  1     0.98437500        0.015625000\n502            100                 93     0.33898305        0.315254237\n503            204                  2     0.99029126        0.009708738\n504             93                 38     0.70992366        0.290076336\n505             39                 76     0.33913043        0.660869565\n506             15                 32     0.19736842        0.421052632\n507              0                  0     0.00000000        0.000000000\n508            115                 75     0.60526316        0.394736842\n509              0                  0     0.00000000        0.000000000\n510             28                 58     0.32558140        0.674418605\n511            101                 68     0.57714286        0.388571429\n512              0                  1     0.00000000        1.000000000\n513              0                  1     0.00000000        1.000000000\n514            122                 21     0.85314685        0.146853147\n515             24                  5     0.75000000        0.156250000\n516             53                 42     0.55789474        0.442105263\n517             69                 79     0.46621622        0.533783784\n518             27                 10     0.72972973        0.270270270\n519             51                 49     0.51000000        0.490000000\n520             70                 66     0.48275862        0.455172414\n521             85                 71     0.53459119        0.446540881\n522             37                 46     0.44578313        0.554216867\n523             18                 28     0.39130435        0.608695652\n524             16                 27     0.37209302        0.627906977\n525              0                  0     0.00000000        0.000000000\n526              0                  0     0.00000000        0.000000000\n527             59                 56     0.51304348        0.486956522\n528             23                 12     0.33823529        0.176470588\n529            405                 39     0.91216216        0.087837838\n530             75                 17     0.81521739        0.184782609\n531              1                  7     0.06666667        0.466666667\n532             11                 13     0.32352941        0.382352941\n533             20                  1     0.37037037        0.018518519\n534             17                 36     0.21518987        0.455696203\n535             14                 18     0.42424242        0.545454545\n536             12                 10     0.30769231        0.256410256\n537              1                  2     0.03030303        0.060606061\n538             16                 52     0.23529412        0.764705882\n539             23                 26     0.46938776        0.530612245\n540             38                 50     0.43181818        0.568181818\n541             11                 10     0.19642857        0.178571429\n542              1                  0     1.00000000        0.000000000\n543              4                 17     0.14285714        0.607142857\n544             24                 15     0.36363636        0.227272727\n545             63                 67     0.34615385        0.368131868\n546             82                 48     0.49397590        0.289156627\n547             24                 64     0.27272727        0.727272727\n548             30                114     0.17341040        0.658959538\n549             81                 44     0.64800000        0.352000000\n550            109                 84     0.53960396        0.415841584\n551             15                 46     0.23809524        0.730158730\n552             14                 25     0.21212121        0.378787879\n553             79                116     0.33905579        0.497854077\n554             88                 92     0.36820084        0.384937238\n555             18                 37     0.15929204        0.327433628\n556             39                133     0.22674419        0.773255814\n557            139                118     0.45723684        0.388157895\n558             40                 22     0.51948052        0.285714286\n559             67                 91     0.40119760        0.544910180\n560             82                106     0.43617021        0.563829787\n561             11                 23     0.32352941        0.676470588\n562             35                 12     0.56451613        0.193548387\n563             30                 35     0.37037037        0.432098765\n564             20                 12     0.43478261        0.260869565\n565             21                 19     0.52500000        0.475000000\n566             69                 28     0.69000000        0.280000000\n567             57                 58     0.49137931        0.500000000\n568            101                 77     0.54301075        0.413978495\n569             80                 90     0.29304029        0.329670330\n570             23                 25     0.47916667        0.520833333\n571              1                  0     1.00000000        0.000000000\n572             42                 29     0.56756757        0.391891892\n573             16                 60     0.16161616        0.606060606\n574              8                 19     0.21052632        0.500000000\n575            104                 51     0.58426966        0.286516854\n576            106                 71     0.38545455        0.258181818\n577            131                 84     0.36694678        0.235294118\n578             27                 38     0.41538462        0.584615385\n579              5                 13     0.13157895        0.342105263\n580             15                 32     0.17241379        0.367816092\n581            239                 30     0.87545788        0.109890110\n582             84                122     0.40579710        0.589371981\n583             20                 54     0.27027027        0.729729730\n584             51                 49     0.51000000        0.490000000\n585             13                 24     0.31707317        0.585365854\n586             22                 53     0.29333333        0.706666667\n587             25                 48     0.33783784        0.648648649\n588              4                  6     0.30769231        0.461538462\n589             20                 31     0.33898305        0.525423729\n590             11                  1     0.91666667        0.083333333\n591             76                 14     0.51351351        0.094594595\n592              8                 15     0.34782609        0.652173913\n593             93                 66     0.51381215        0.364640884\n594             32                 31     0.32323232        0.313131313\n595             30                 17     0.40540541        0.229729730\n596              5                 32     0.13513514        0.864864865\n597             19                  6     0.76000000        0.240000000\n598             29                 59     0.25438596        0.517543860\n599             48                 87     0.35555556        0.644444444\n600             55                106     0.34161491        0.658385093\n601            199                 99     0.45433790        0.226027397\n602              1                  1     0.07692308        0.076923077\n603              5                  2     0.41666667        0.166666667\n604             27                 36     0.42857143        0.571428571\n605              6                  5     0.54545455        0.454545455\n606             39                 30     0.56521739        0.434782609\n607             24                 39     0.24489796        0.397959184\n608             44                 67     0.39639640        0.603603604\n609            102                 37     0.42677824        0.154811715\n610            112                100     0.43243243        0.386100386\n611             19                 14     0.37254902        0.274509804\n612             44                 67     0.36666667        0.558333333\n613             12                  8     0.60000000        0.400000000\n614              9                  7     0.45000000        0.350000000\n615              6                  9     0.15384615        0.230769231\n616              8                  9     0.19512195        0.219512195\n617             10                 49     0.16949153        0.830508475\n618             13                 15     0.19696970        0.227272727\n619              6                 11     0.18181818        0.333333333\n620             45                105     0.30000000        0.700000000\n621             28                  5     0.84848485        0.151515152\n622             11                 12     0.47826087        0.521739130\n623             32                  0     0.68085106        0.000000000\n624              7                 18     0.15909091        0.409090909\n625             91                 66     0.52906977        0.383720930\n626             20                 35     0.32258065        0.564516129\n627             43                 33     0.51807229        0.397590361\n628             42                 32     0.54545455        0.415584416\n629             33                 29     0.52380952        0.460317460\n630             10                 34     0.22727273        0.772727273\n631             20                  2     0.64516129        0.064516129\n632             21                 30     0.30882353        0.441176471\n633             29                 20     0.47540984        0.327868852\n634             89                 92     0.49171271        0.508287293\n635             48                 72     0.33802817        0.507042254\n636             17                 28     0.23287671        0.383561644\n637             15                  2     0.88235294        0.117647059\n638             35                 30     0.39772727        0.340909091\n639             18                 12     0.28125000        0.187500000\n640            152                183     0.45373134        0.546268657\n641             52                 41     0.55319149        0.436170213\n642            127                100     0.31909548        0.251256281\n643              2                  9     0.18181818        0.818181818\n644            154                113     0.56000000        0.410909091\n645            102                 13     0.88695652        0.113043478\n646             66                  6     0.91666667        0.083333333\n647            109                109     0.31594203        0.315942029\n648             58                  5     0.92063492        0.079365079\n649             91                 41     0.68939394        0.310606061\n650             77                 23     0.77000000        0.230000000\n651             12                 19     0.27272727        0.431818182\n652             64                 76     0.42384106        0.503311258\n653             55                 36     0.60439560        0.395604396\n654            161                  5     0.96987952        0.030120482\n655            139                  5     0.96527778        0.034722222\n656             76                102     0.25000000        0.335526316\n657            114                 71     0.61621622        0.383783784\n658            147                 78     0.65333333        0.346666667\n659            219                177     0.55303030        0.446969697\n660             28                 49     0.36363636        0.636363636\n661             10                 33     0.23255814        0.767441860\n662            139                 22     0.86335404        0.136645963\n663             18                 44     0.29032258        0.709677419\n664             76                 69     0.52413793        0.475862069\n665             54                 40     0.49541284        0.366972477\n666             65                 49     0.43918919        0.331081081\n667             66                 43     0.60550459        0.394495413\n668             79                 75     0.51298701        0.487012987\n669              4                  8     0.33333333        0.666666667\n670             14                 28     0.28000000        0.560000000\n671             17                 62     0.13934426        0.508196721\n672             35                 17     0.67307692        0.326923077\n673             30                 73     0.29126214        0.708737864\n674             41                  0     1.00000000        0.000000000\n675             60                 23     0.72289157        0.277108434\n676              5                  4     0.55555556        0.444444444\n677            113                109     0.26401869        0.254672897\n678            118                 39     0.75159236        0.248407643\n679            155                 50     0.75609756        0.243902439\n680             72                 25     0.66055046        0.229357798\n681            139                112     0.55378486        0.446215139\n682              8                  3     0.57142857        0.214285714\n683             45                 15     0.75000000        0.250000000\n684            255                158     0.61743341        0.382566586\n685             30                  3     0.90909091        0.090909091\n686             19                  6     0.76000000        0.240000000\n687             21                  7     0.75000000        0.250000000\n688              7                 24     0.22580645        0.774193548\n689            420                 65     0.86597938        0.134020619\n690             29                 12     0.70731707        0.292682927\n691            205                 72     0.74007220        0.259927798\n692             13                 47     0.21666667        0.783333333\n693             49                  6     0.80327869        0.098360656\n694             91                 92     0.48148148        0.486772487\n695             56                  8     0.87500000        0.125000000\n696            105                 21     0.82031250        0.164062500\n697              1                  2     0.33333333        0.666666667\n698            351                 94     0.78876404        0.211235955\n699             82                 84     0.45555556        0.466666667\n700            118                 69     0.63101604        0.368983957\n701             40                 49     0.44943820        0.550561798\n702             23                 41     0.35937500        0.640625000\n703             61                  6     0.91044776        0.089552239\n704            129                 51     0.57589286        0.227678571\n705             31                  5     0.86111111        0.138888889\n706            591                 74     0.88872180        0.111278195\n707            110                  1     0.99099099        0.009009009\n708            101                 28     0.75939850        0.210526316\n709             69                 46     0.58974359        0.393162393\n710              4                  1     0.80000000        0.200000000\n711            155                 44     0.77889447        0.221105528\n712            113                 42     0.72903226        0.270967742\n713             94                 75     0.55621302        0.443786982\n714             44                 67     0.39639640        0.603603604\n715              5                  1     0.22727273        0.045454545\n716             24                 10     0.22857143        0.095238095\n717              7                  4     0.63636364        0.363636364\n718             12                 42     0.22222222        0.777777778\n719             31                 18     0.58490566        0.339622642\n720             11                 14     0.44000000        0.560000000\n721             13                 54     0.14772727        0.613636364\n722             33                 28     0.52380952        0.444444444\n723              8                 34     0.19047619        0.809523810\n724             43                 73     0.27215190        0.462025316\n725             22                 61     0.24444444        0.677777778\n726             33                 68     0.26612903        0.548387097\n727             14                 40     0.25925926        0.740740741\n728              5                 14     0.11363636        0.318181818\n729             31                 17     0.41891892        0.229729730\n730             17                 41     0.16504854        0.398058252\n731            138                 13     0.91390728        0.086092715\n732              1                  2     0.16666667        0.333333333\n733              8                 40     0.16666667        0.833333333\n734             16                 40     0.28571429        0.714285714\n735             63                 98     0.27510917        0.427947598\n736             87                 78     0.47027027        0.421621622\n737              3                  8     0.27272727        0.727272727\n738             35                 45     0.43750000        0.562500000\n739              2                  1     0.08000000        0.040000000\n740             58                 53     0.34523810        0.315476190\n741             43                 38     0.53086420        0.469135802\n742             57                 44     0.55882353        0.431372549\n743            145                 54     0.72864322        0.271356784\n744            240                 35     0.87272727        0.127272727\n745              7                 23     0.23333333        0.766666667\n746             25                 27     0.48076923        0.519230769\n747              1                  6     0.14285714        0.857142857\n748            109                 66     0.62285714        0.377142857\n749             67                 50     0.37640449        0.280898876\n750            107                 37     0.74305556        0.256944444\n751            102                 94     0.41975309        0.386831276\n752             37                 22     0.62711864        0.372881356\n753             72                 67     0.51798561        0.482014388\n754             31                 51     0.37804878        0.621951220\n755             17                 42     0.28813559        0.711864407\n756             41                 78     0.34453782        0.655462185\n757            168                124     0.51692308        0.381538462\n758             88                110     0.25958702        0.324483776\n759            122                126     0.49193548        0.508064516\n760            190                 36     0.84070796        0.159292035\n761             12                 14     0.46153846        0.538461538\n762             12                 15     0.44444444        0.555555556\n763             23                  3     0.88461538        0.115384615\n764              6                  7     0.46153846        0.538461538\n765            118                 49     0.59296482        0.246231156\n766              6                  0     1.00000000        0.000000000\n767             37                  5     0.88095238        0.119047619\n768            371                 52     0.87706856        0.122931442\n769             86                 21     0.80373832        0.196261682\n770            370                 19     0.95115681        0.048843188\n771            168                151     0.52664577        0.473354232\n772            105                 64     0.55263158        0.336842105\n773             85                 44     0.65891473        0.341085271\n774             43                 27     0.61428571        0.385714286\n    pct_unknown pct_handpump pct_usagecapless1000 pct_usagecap1000   pct_rural\n1   0.058823529  0.117647059          0.176470588      0.823529412 0.000000000\n2   0.098591549  0.098591549          0.126760563      0.873239437 0.056338028\n3   0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n4   0.000000000  0.403508772          0.403508772      0.596491228 0.842105263\n5   0.000000000  0.083333333          0.083333333      0.916666667 0.833333333\n6   0.467811159  0.437768240          0.905579399      0.094420601 0.875536481\n7   0.088235294  0.147058824          0.235294118      0.764705882 0.205882353\n8   0.117647059  0.168067227          0.294117647      0.705882353 0.000000000\n9   0.072368421  0.598684211          0.671052632      0.328947368 0.953947368\n10  0.333333333  0.015151515          0.348484848      0.651515152 0.727272727\n11  0.025641026  0.307692308          0.333333333      0.666666667 0.538461538\n12  0.059259259  0.340740741          0.407407407      0.592592593 0.844444444\n13  0.000000000  0.460317460          0.460317460      0.539682540 0.285714286\n14  0.289062500  0.671875000          0.968750000      0.031250000 0.976562500\n15  0.252873563  0.091954023          0.344827586      0.655172414 0.548850575\n16  0.106508876  0.538461538          0.668639053      0.331360947 0.278106509\n17  0.311320755  0.301886792          0.613207547      0.386792453 0.726415094\n18  0.155913978  0.526881720          0.682795699      0.317204301 0.720430108\n19  0.375000000  0.437500000          0.812500000      0.187500000 0.828125000\n20  0.000000000  0.537634409          0.537634409      0.462365591 0.204301075\n21  0.024691358  0.888888889          0.913580247      0.086419753 1.000000000\n22  0.066666667  0.000000000          0.083333333      0.916666667 0.000000000\n23  0.736842105  0.000000000          0.763157895      0.236842105 0.657894737\n24  0.017699115  0.849557522          0.867256637      0.132743363 1.000000000\n25  0.306666667  0.013333333          0.320000000      0.680000000 0.240000000\n26  0.000000000  0.157894737          0.157894737      0.842105263 0.736842105\n27  0.000000000  0.000000000          0.000000000      1.000000000 0.785714286\n28  0.198473282  0.503816794          0.727735369      0.272264631 0.834605598\n29  0.165714286  0.508571429          0.680000000      0.320000000 0.817142857\n30  0.209302326  0.581395349          0.790697674      0.209302326 1.000000000\n31  0.000000000  0.446153846          0.446153846      0.553846154 1.000000000\n32  0.375000000  0.500000000          0.875000000      0.125000000 0.000000000\n33  0.000000000  0.940594059          0.940594059      0.059405941 1.000000000\n34  0.360000000  0.336000000          0.696000000      0.304000000 1.000000000\n35  0.240223464  0.374301676          0.620111732      0.379888268 0.759776536\n36  0.000000000  0.769480519          0.769480519      0.230519481 0.987012987\n37  0.000000000  0.193548387          0.193548387      0.806451613 0.870967742\n38  0.000000000  0.475770925          0.519823789      0.480176211 0.339207048\n39  0.020833333  0.652777778          0.673611111      0.326388889 0.819444444\n40  0.000000000  0.480769231          0.506410256      0.493589744 1.000000000\n41  0.000000000  0.617449664          0.617449664      0.382550336 0.479865772\n42  0.304687500  0.238281250          0.542968750      0.457031250 1.000000000\n43  0.142857143  0.285714286          0.428571429      0.571428571 0.642857143\n44  0.000000000  0.702127660          0.702127660      0.297872340 0.978723404\n45  0.000000000  0.400000000          0.433333333      0.566666667 0.100000000\n46  0.005555556  0.627777778          0.633333333      0.366666667 0.794444444\n47  0.000000000  0.912328767          0.915068493      0.084931507 0.909589041\n48  0.000000000  0.409523810          0.409523810      0.590476190 1.000000000\n49  0.228395062  0.015432099          0.243827160      0.756172840 0.000000000\n50  0.000000000  0.906250000          0.906250000      0.093750000 0.864583333\n51  0.300000000  0.050000000          0.350000000      0.650000000 0.100000000\n52  0.521739130  0.478260870          1.000000000      0.000000000 1.000000000\n53  0.203703704  0.462962963          0.685185185      0.314814815 1.000000000\n54  0.479452055  0.000000000          0.479452055      0.520547945 0.287671233\n55  0.000000000  0.117647059          0.117647059      0.882352941 0.647058824\n56  0.600000000  0.400000000          1.000000000      0.000000000 0.525000000\n57  0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n58  0.153846154  0.307692308          0.461538462      0.538461538 1.000000000\n59  0.000000000  0.840000000          0.840000000      0.160000000 1.000000000\n60  0.037037037  0.277777778          0.333333333      0.666666667 0.833333333\n61  0.076923077  0.794871795          0.871794872      0.128205128 1.000000000\n62  1.000000000  0.000000000          1.000000000      0.000000000 0.000000000\n63  0.165876777  0.729857820          0.895734597      0.104265403 1.000000000\n64  0.000000000  0.290000000          0.290000000      0.710000000 1.000000000\n65  0.000000000  0.630769231          0.630769231      0.369230769 0.723076923\n66  0.440000000  0.080000000          0.600000000      0.400000000 0.840000000\n67  0.070422535  0.661971831          0.732394366      0.267605634 0.992957746\n68  0.000000000  0.042553191          0.127659574      0.872340426 0.234042553\n69  0.000000000  0.666666667          0.694444444      0.305555556 1.000000000\n70  0.147982063  0.547085202          0.695067265      0.304932735 1.000000000\n71  0.130081301  0.613821138          0.752032520      0.247967480 0.991869919\n72  0.321428571  0.214285714          0.535714286      0.464285714 0.401785714\n73  0.223214286  0.473214286          0.696428571      0.303571429 0.821428571\n74  0.000000000  0.791044776          0.805970149      0.194029851 1.000000000\n75  0.000000000  0.994604317          0.994604317      0.005395683 0.964028777\n76  0.032258065  0.591397849          0.623655914      0.376344086 1.000000000\n77  0.269230769  0.500000000          0.807692308      0.192307692 0.730769231\n78  0.771428571  0.000000000          0.771428571      0.228571429 1.000000000\n79  0.550000000  0.150000000          0.700000000      0.300000000 0.475000000\n80  0.242424242  0.303030303          0.545454545      0.454545455 0.666666667\n81  0.000000000  0.850111857          0.850111857      0.149888143 1.000000000\n82  0.180952381  0.104761905          0.285714286      0.714285714 0.761904762\n83  0.000000000  0.674050633          0.677215190      0.322784810 0.724683544\n84  0.000000000  0.796116505          0.805825243      0.194174757 0.786407767\n85  0.000000000  0.932142857          0.932142857      0.067857143 0.935714286\n86  0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n87  0.000000000  0.816618911          0.816618911      0.183381089 0.865329513\n88  0.000000000  0.705128205          0.756410256      0.243589744 1.000000000\n89  0.000000000  0.841509434          0.845283019      0.154716981 0.864150943\n90  0.120996441  0.722419929          0.843416370      0.156583630 1.000000000\n91  1.000000000  0.989898990          0.989898990      0.010101010 0.181818182\n92  0.379790941  0.480836237          0.867595819      0.132404181 0.958188153\n93  0.042944785  0.809815951          0.852760736      0.147239264 1.000000000\n94  0.000000000  0.746031746          0.746031746      0.253968254 1.000000000\n95  0.412060302  0.432160804          0.844221106      0.155778894 0.989949749\n96  0.000000000  0.763358779          0.770992366      0.229007634 0.954198473\n97  0.000000000  0.806250000          0.806250000      0.193750000 0.843750000\n98  0.000000000  0.870967742          0.870967742      0.129032258 0.683870968\n99  0.000000000  0.740740741          0.771043771      0.228956229 1.000000000\n100 0.000000000  0.791666667          0.791666667      0.208333333 1.000000000\n101 0.000000000  0.963414634          0.963414634      0.036585366 1.000000000\n102 0.324607330  0.445026178          0.769633508      0.230366492 1.000000000\n103 0.500000000  0.066666667          0.566666667      0.433333333 0.816666667\n104 0.335877863  0.366412214          0.702290076      0.297709924 1.000000000\n105 0.000000000  0.940828402          0.940828402      0.059171598 0.952662722\n106 0.000000000  0.053941909          0.058091286      0.941908714 0.008298755\n107 0.000000000  0.835978836          0.835978836      0.164021164 0.910052910\n108 0.000000000  0.904059041          0.904059041      0.095940959 1.000000000\n109 0.000000000  0.577319588          0.577319588      0.422680412 1.000000000\n110 0.000000000  0.984536082          0.988402062      0.011597938 1.000000000\n111 0.000000000  1.000000000          1.000000000      0.000000000 0.761006289\n112 0.000000000  0.880239521          0.880239521      0.119760479 0.844311377\n113 0.016666667  0.241666667          0.241666667      0.758333333 0.591666667\n114 0.000000000  0.865979381          0.865979381      0.134020619 1.000000000\n115 0.000000000  0.726027397          0.726027397      0.273972603 0.178082192\n116 0.000000000  0.265306122          0.265306122      0.734693878 0.744897959\n117 0.008064516  0.903225806          0.911290323      0.088709677 1.000000000\n118 0.240223464  0.558659218          0.798882682      0.201117318 1.000000000\n119 0.416666667  0.442982456          0.859649123      0.140350877 0.951754386\n120 0.116279070  0.558139535          0.674418605      0.325581395 0.883720930\n121 0.000000000  0.750000000          0.750000000      0.250000000 1.000000000\n122 0.000000000  1.000000000          1.000000000      0.000000000 0.000000000\n123 0.027777778  0.814814815          0.842592593      0.157407407 0.944444444\n124 0.073446328  0.672316384          0.745762712      0.254237288 0.192090395\n125 0.045112782  0.879699248          0.932330827      0.067669173 0.954887218\n126 0.000000000  0.136363636          0.136363636      0.863636364 0.909090909\n127 0.000000000  0.984802432          0.984802432      0.015197568 1.000000000\n128 0.000000000  0.944444444          0.944444444      0.055555556 0.933333333\n129 0.000000000  0.742857143          0.742857143      0.257142857 0.742857143\n130 0.000000000  0.905511811          0.905511811      0.094488189 1.000000000\n131 0.000000000  0.687116564          0.687116564      0.312883436 0.957055215\n132 0.000000000  0.381443299          0.381443299      0.618556701 1.000000000\n133 0.210227273  0.647727273          0.863636364      0.136363636 1.000000000\n134 0.142857143  0.428571429          0.571428571      0.428571429 1.000000000\n135 0.016949153  0.533898305          0.550847458      0.449152542 0.618644068\n136 0.475609756  0.060975610          0.536585366      0.463414634 0.121951220\n137 0.082191781  0.493150685          0.575342466      0.424657534 0.123287671\n138 0.000000000  0.958333333          0.958333333      0.041666667 0.013888889\n139 0.000000000  0.868020305          0.878172589      0.121827411 0.817258883\n140 0.000000000  0.606060606          0.636363636      0.363636364 0.666666667\n141 0.000000000  1.000000000          1.000000000      0.000000000 1.000000000\n142 0.000000000  0.572463768          0.572463768      0.427536232 0.000000000\n143 0.000000000  0.000000000          0.000000000      1.000000000 0.358974359\n144 0.000000000  0.851351351          0.851351351      0.148648649 0.702702703\n145 0.000000000  0.822660099          0.822660099      0.177339901 0.842364532\n146 1.000000000  1.000000000          1.000000000      0.000000000 0.111111111\n147 0.000000000  0.765625000          0.765625000      0.234375000 1.000000000\n148 0.000000000  0.727272727          0.727272727      0.272727273 0.933333333\n149 0.000000000  0.765217391          0.765217391      0.234782609 0.730434783\n150 0.000000000  0.363636364          0.363636364      0.636363636 0.935064935\n151 0.000000000  0.629629630          0.629629630      0.370370370 1.000000000\n152 0.000000000  0.922222222          0.922222222      0.077777778 0.855555556\n153 0.000000000  0.956521739          0.956521739      0.043478261 0.892976589\n154 0.000000000  0.631578947          0.631578947      0.368421053 0.473684211\n155 0.000000000  0.905213270          0.905213270      0.094786730 0.815165877\n156 0.000000000  0.986013986          0.986013986      0.013986014 0.825174825\n157 0.125000000  0.125000000          0.250000000      0.750000000 0.750000000\n158 0.000000000  0.105769231          0.105769231      0.894230769 0.942307692\n159 0.000000000  0.846153846          0.923076923      0.076923077 1.000000000\n160 1.000000000  0.950000000          0.950000000      0.050000000 0.075000000\n161 0.000000000  0.945454545          0.945454545      0.054545455 1.000000000\n162 0.011363636  0.250000000          0.250000000      0.750000000 0.443181818\n163 0.124324324  0.751351351          0.875675676      0.124324324 0.848648649\n164 0.000000000  0.772058824          0.772058824      0.227941176 1.000000000\n165 0.111111111  0.044444444          0.155555556      0.844444444 0.244444444\n166 0.000000000  0.935064935          0.935064935      0.064935065 0.889610390\n167 0.000000000  0.700000000          0.725000000      0.275000000 1.000000000\n168 0.000000000  0.880258900          0.880258900      0.119741100 0.867313916\n169 0.000000000  0.240000000          0.240000000      0.760000000 1.000000000\n170 0.576923077  0.365384615          0.942307692      0.057692308 0.930769231\n171 0.005319149  0.531914894          0.537234043      0.462765957 1.000000000\n172 0.115740741  0.518518519          0.638888889      0.361111111 0.296296296\n173 0.239726027  0.643835616          0.890410959      0.109589041 0.931506849\n174 0.000000000  0.687500000          0.687500000      0.312500000 0.796875000\n175 0.288888889  0.444444444          0.733333333      0.266666667 0.644444444\n176 0.416666667  0.066666667          0.533333333      0.466666667 0.766666667\n177 0.125000000  0.031250000          0.156250000      0.843750000 0.437500000\n178 0.319587629  0.494845361          0.814432990      0.185567010 0.515463918\n179 0.238993711  0.559748428          0.798742138      0.201257862 0.723270440\n180 0.000000000  0.000000000          0.000000000      1.000000000 0.000000000\n181 0.042553191  0.063829787          0.106382979      0.893617021 0.425531915\n182 0.082304527  0.837448560          0.921810700      0.078189300 0.619341564\n183 0.000000000  0.181818182          0.181818182      0.818181818 0.909090909\n184 0.000000000  0.088235294          0.088235294      0.911764706 0.808823529\n185 0.000000000  0.633663366          0.648514851      0.351485149 1.000000000\n186 0.311111111  0.544444444          0.866666667      0.133333333 0.522222222\n187 0.111111111  0.506172840          0.617283951      0.382716049 0.450617284\n188 0.162393162  0.542735043          0.709401709      0.290598291 0.777777778\n189 0.861111111  0.000000000          0.861111111      0.138888889 0.194444444\n190 0.000000000  0.500000000          0.500000000      0.500000000 0.500000000\n191 0.000000000  0.833333333          0.833333333      0.166666667 1.000000000\n192 0.276923077  0.415384615          0.692307692      0.307692308 0.584615385\n193 0.217391304  0.347826087          0.565217391      0.434782609 0.217391304\n194 0.125000000  0.375000000          0.833333333      0.166666667 0.041666667\n195 0.526315789  0.315789474          0.578947368      0.421052632 0.263157895\n196 0.154589372  0.111111111          0.299516908      0.700483092 0.739130435\n197 0.156250000  0.062500000          0.218750000      0.781250000 0.812500000\n198 0.000000000  0.058823529          0.058823529      0.941176471 0.588235294\n199 0.000000000  0.071428571          0.071428571      0.928571429 1.000000000\n200 0.000000000  0.205882353          0.205882353      0.794117647 0.705882353\n201 0.000000000  0.189189189          0.189189189      0.810810811 0.990990991\n202 0.000000000  0.289473684          0.289473684      0.710526316 1.000000000\n203 0.000000000  0.034482759          0.034482759      0.965517241 0.913793103\n204 0.315789474  0.052631579          0.368421053      0.631578947 1.000000000\n205 0.000000000  0.090909091          0.136363636      0.863636364 0.954545455\n206 0.000000000  0.120000000          0.200000000      0.800000000 0.840000000\n207 0.210526316  0.000000000          0.210526316      0.789473684 0.105263158\n208 0.000000000  0.098039216          0.098039216      0.901960784 1.000000000\n209 0.000000000  0.200000000          0.200000000      0.800000000 0.914285714\n210 0.041666667  0.208333333          0.250000000      0.750000000 1.000000000\n211 0.023809524  0.071428571          0.095238095      0.904761905 0.880952381\n212 0.000000000  0.000000000          0.000000000      1.000000000 0.409090909\n213 0.212121212  0.412121212          0.624242424      0.375757576 1.000000000\n214 0.555555556  0.013888889          0.569444444      0.430555556 0.986111111\n215 0.647058824  0.000000000          0.647058824      0.352941176 1.000000000\n216 0.392857143  0.000000000          0.392857143      0.607142857 0.535714286\n217 0.412087912  0.563186813          0.975274725      0.024725275 0.991758242\n218 0.378980892  0.573248408          0.952229299      0.047770701 0.942675159\n219 0.000000000  0.841269841          0.841269841      0.158730159 0.079365079\n220 0.000000000  0.854545455          0.854545455      0.145454545 0.800000000\n221 0.000000000  0.852173913          0.857971014      0.142028986 1.000000000\n222 0.000000000  0.000000000          0.000000000      1.000000000 0.947368421\n223 0.000000000  0.461538462          0.461538462      0.538461538 1.000000000\n224 0.000000000  0.736842105          0.736842105      0.263157895 0.673684211\n225 0.000000000  0.014084507          0.014084507      0.985915493 0.704225352\n226 0.000000000  0.628571429          0.628571429      0.371428571 0.500000000\n227 0.000000000  0.843137255          0.843137255      0.156862745 1.000000000\n228 0.000000000  0.661016949          0.661016949      0.338983051 1.000000000\n229 0.000000000  0.991011236          0.991011236      0.008988764 1.000000000\n230 0.000000000  0.950338600          0.950338600      0.049661400 0.882618510\n231 0.000000000  0.950617284          0.950617284      0.049382716 0.913580247\n232 0.000000000  0.714285714          0.714285714      0.285714286 0.642857143\n233 0.000000000  0.969976905          0.972286374      0.027713626 1.000000000\n234 0.000000000  0.842696629          0.853932584      0.146067416 0.662921348\n235 0.000000000  0.926380368          0.926380368      0.073619632 1.000000000\n236 0.133333333  0.775757576          0.909090909      0.090909091 1.000000000\n237 0.215094340  0.637735849          0.856603774      0.143396226 0.860377358\n238 0.000000000  1.000000000          1.000000000      0.000000000 0.824742268\n239 0.000000000  0.537142857          0.548571429      0.451428571 1.000000000\n240 0.242268041  0.530927835          0.731958763      0.268041237 0.804123711\n241 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n242 0.000000000  0.893992933          0.893992933      0.106007067 0.950530035\n243 0.000000000  0.963636364          0.963636364      0.036363636 0.972727273\n244 0.000000000  0.600000000          0.600000000      0.400000000 0.933333333\n245 0.000000000  0.945736434          0.945736434      0.054263566 0.682170543\n246 0.000000000  0.000000000          0.000000000      1.000000000 0.500000000\n247 0.000000000  0.485714286          0.485714286      0.514285714 0.000000000\n248 0.000000000  0.777777778          0.777777778      0.222222222 0.800000000\n249 0.000000000  0.571428571          0.571428571      0.428571429 0.928571429\n250 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n251 0.000000000  0.475000000          0.475000000      0.525000000 1.000000000\n252 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n253 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n254 0.205128205  0.649572650          0.854700855      0.145299145 1.000000000\n255 0.000000000  0.624020888          0.624020888      0.375979112 0.644908616\n256 0.000000000  0.925373134          0.925373134      0.074626866 0.582089552\n257 0.256097561  0.621951220          0.878048780      0.121951220 0.975609756\n258 0.000000000  0.988338192          0.988338192      0.011661808 1.000000000\n259 0.000000000  0.875000000          0.875000000      0.125000000 0.781250000\n260 0.000000000  0.590909091          0.590909091      0.409090909 0.772727273\n261 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n262 0.000000000  0.692982456          0.692982456      0.307017544 0.903508772\n263 0.016949153  0.610169492          0.618644068      0.381355932 0.889830508\n264 0.000000000  0.854838710          0.854838710      0.145161290 0.000000000\n265 0.000000000  0.806122449          0.806122449      0.193877551 1.000000000\n266 0.000000000  0.894230769          0.913461538      0.086538462 0.971153846\n267 0.000000000  0.868421053          0.881578947      0.118421053 0.644736842\n268 0.039682540  0.793650794          0.841269841      0.158730159 0.920634921\n269 0.047619048  0.761904762          0.809523810      0.190476190 0.904761905\n270 0.000000000  0.980198020          0.980198020      0.019801980 1.000000000\n271 1.000000000  0.659090909          0.659090909      0.340909091 0.522727273\n272 0.000000000  0.937500000          0.937500000      0.062500000 0.052083333\n273 0.000000000  0.656250000          0.656250000      0.343750000 1.000000000\n274 0.000000000  0.750000000          0.750000000      0.250000000 1.000000000\n275 0.333333333  0.060606061          0.393939394      0.606060606 0.000000000\n276 0.070866142  0.307086614          0.377952756      0.622047244 0.000000000\n277 0.045977011  0.057471264          0.114942529      0.885057471 0.000000000\n278 0.222222222  0.194444444          0.444444444      0.555555556 0.000000000\n279 0.084112150  0.233644860          0.317757009      0.682242991 0.009345794\n280 0.000000000  0.382352941          0.382352941      0.617647059 1.000000000\n281 0.205741627  0.578947368          0.784688995      0.215311005 0.440191388\n282 0.284313725  0.431372549          0.715686275      0.284313725 0.617647059\n283 0.217171717  0.535353535          0.752525253      0.247474747 0.616161616\n284 0.172932331  0.037593985          0.210526316      0.789473684 0.872180451\n285 0.000000000  0.250000000          0.250000000      0.750000000 0.900000000\n286 0.000000000  0.018518519          0.018518519      0.981481481 0.925925926\n287 0.134146341  0.780487805          0.914634146      0.085365854 1.000000000\n288 0.000000000  0.078431373          0.078431373      0.921568627 0.882352941\n289 0.000000000  0.491525424          0.491525424      0.508474576 0.254237288\n290 0.009615385  0.865384615          0.875000000      0.125000000 0.903846154\n291 0.642857143  0.000000000          0.642857143      0.357142857 0.714285714\n292 0.434782609  0.000000000          0.434782609      0.565217391 0.565217391\n293 0.857142857  0.020408163          0.877551020      0.122448980 0.040816327\n294 0.803571429  0.035714286          0.839285714      0.160714286 0.000000000\n295 0.194174757  0.320388350          0.514563107      0.485436893 0.834951456\n296 0.541666667  0.229166667          0.812500000      0.187500000 0.708333333\n297 0.163934426  0.016393443          0.180327869      0.819672131 0.000000000\n298 0.025974026  0.525974026          0.551948052      0.448051948 0.181818182\n299 0.081218274  0.461928934          0.543147208      0.456852792 0.218274112\n300 0.072992701  0.525547445          0.605839416      0.394160584 1.000000000\n301 0.101123596  0.640449438          0.747191011      0.252808989 0.904494382\n302 0.226190476  0.488095238          0.714285714      0.285714286 1.000000000\n303 0.000000000  0.741935484          0.741935484      0.258064516 0.619354839\n304 0.004991681  0.693843594          0.698835275      0.301164725 0.893510815\n305 0.063492063  0.579365079          0.642857143      0.357142857 0.301587302\n306 0.783132530  0.000000000          0.783132530      0.216867470 0.277108434\n307 0.000000000  0.931740614          0.931740614      0.068259386 0.873720137\n308 0.000000000  0.250000000          0.250000000      0.750000000 1.000000000\n309 0.454545455  0.068181818          0.545454545      0.454545455 0.659090909\n310 0.452380952  0.000000000          0.452380952      0.547619048 0.904761905\n311 0.529411765  0.000000000          0.529411765      0.470588235 0.852941176\n312 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n313 0.564885496  0.435114504          1.000000000      0.000000000 0.137404580\n314 0.277777778  0.055555556          0.416666667      0.583333333 0.555555556\n315 0.774193548  0.032258065          0.806451613      0.193548387 1.000000000\n316 0.250000000  0.203125000          0.515625000      0.484375000 0.484375000\n317 0.244444444  0.044444444          0.288888889      0.711111111 0.688888889\n318 0.206896552  0.051724138          0.258620690      0.741379310 0.258620690\n319 0.208737864  0.543689320          0.757281553      0.242718447 0.708737864\n320 0.000000000  0.491803279          0.500000000      0.500000000 0.844262295\n321 0.000000000  0.142857143          0.142857143      0.857142857 1.000000000\n322 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n323 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n324 0.000000000  0.868613139          0.868613139      0.131386861 0.824817518\n325 0.533333333  0.000000000          0.533333333      0.466666667 0.844444444\n326 0.333333333  0.142857143          0.571428571      0.428571429 0.000000000\n327 0.526315789  0.000000000          0.526315789      0.473684211 0.526315789\n328 0.103092784  0.628865979          0.731958763      0.268041237 0.072164948\n329 0.297297297  0.529729730          0.827027027      0.172972973 0.648648649\n330 0.263681592  0.402985075          0.666666667      0.333333333 0.885572139\n331 0.000000000  0.063492063          0.063492063      0.936507937 1.000000000\n332 0.191666667  0.020833333          0.300000000      0.700000000 0.462500000\n333 0.000000000  0.155172414          0.155172414      0.844827586 0.896551724\n334 0.000000000  0.021276596          0.021276596      0.978723404 0.893617021\n335 0.000000000  0.015151515          0.015151515      0.984848485 0.242424242\n336 0.000000000  0.454545455          0.454545455      0.545454545 0.787878788\n337 0.635220126  0.333333333          0.968553459      0.031446541 0.984276730\n338 0.476635514  0.046728972          0.523364486      0.476635514 0.822429907\n339 0.179190751  0.473988439          0.658959538      0.341040462 0.479768786\n340 0.000000000  0.000000000          0.000000000      1.000000000 0.793103448\n341 0.007194245  0.568345324          0.575539568      0.424460432 0.625899281\n342 0.238095238  0.476190476          0.738095238      0.261904762 1.000000000\n343 0.165467626  0.309352518          0.474820144      0.525179856 0.079136691\n344 0.041237113  0.536082474          0.577319588      0.422680412 0.010309278\n345 0.000000000  0.477272727          0.477272727      0.522727273 0.878787879\n346 0.000000000  0.648648649          0.648648649      0.351351351 0.450450450\n347 0.000000000  0.666666667          0.666666667      0.333333333 0.274509804\n348 0.000000000  0.529411765          0.535947712      0.464052288 0.026143791\n349 0.878787879  0.000000000          0.878787879      0.121212121 0.787878788\n350 0.000000000  0.924242424          0.929292929      0.070707071 1.000000000\n351 0.000000000  0.217391304          0.217391304      0.782608696 0.956521739\n352 0.253968254  0.031746032          0.285714286      0.714285714 0.952380952\n353 0.000000000  0.149425287          0.149425287      0.850574713 0.632183908\n354 0.254237288  0.364406780          0.618644068      0.381355932 0.245762712\n355 0.000000000  0.615384615          0.623076923      0.376923077 0.888461538\n356 0.125000000  0.317307692          0.451923077      0.548076923 0.096153846\n357 0.371681416  0.371681416          0.743362832      0.256637168 0.991150442\n358 0.099099099  0.459459459          0.558558559      0.441441441 0.459459459\n359 0.000000000  0.584905660          0.603773585      0.396226415 0.584905660\n360 0.314285714  0.457142857          0.771428571      0.228571429 0.657142857\n361 0.632075472  0.094339623          0.726415094      0.273584906 0.669811321\n362 0.356557377  0.581967213          0.938524590      0.061475410 0.991803279\n363 0.241379310  0.758620690          0.879310345      0.120689655 0.879310345\n364 0.415730337  0.168539326          0.584269663      0.415730337 0.932584270\n365 0.234375000  0.031250000          0.265625000      0.734375000 0.890625000\n366 0.131578947  0.000000000          0.131578947      0.868421053 0.552631579\n367 0.025806452  0.574193548          0.600000000      0.400000000 1.000000000\n368 0.327868852  0.081967213          0.409836066      0.590163934 1.000000000\n369 0.195121951  0.544715447          0.739837398      0.260162602 0.585365854\n370 0.000000000  0.076923077          0.076923077      0.923076923 0.717948718\n371 0.000000000  0.125000000          0.125000000      0.875000000 0.843750000\n372 0.625000000  0.000000000          0.625000000      0.375000000 0.541666667\n373 0.000000000  0.874125874          0.874125874      0.125874126 1.000000000\n374 0.338028169  0.197183099          0.535211268      0.464788732 0.788732394\n375 0.016666667  0.050000000          0.066666667      0.933333333 0.950000000\n376 0.454545455  0.386363636          0.840909091      0.159090909 0.727272727\n377 0.211764706  0.501960784          0.713725490      0.286274510 1.000000000\n378 0.206250000  0.343750000          0.550000000      0.450000000 0.256250000\n379 0.686520376  0.282131661          0.968652038      0.031347962 0.993730408\n380 0.000000000  0.967320261          0.967320261      0.032679739 0.843137255\n381 0.000000000  0.571428571          0.571428571      0.428571429 0.714285714\n382 0.000000000  0.958333333          0.958333333      0.041666667 0.905303030\n383 0.000000000  0.171428571          0.200000000      0.800000000 0.742857143\n384 0.108695652  0.768115942          0.876811594      0.123188406 0.275362319\n385 0.000000000  0.912698413          0.912698413      0.087301587 0.753968254\n386 0.000000000  0.398648649          0.398648649      0.601351351 0.574324324\n387 0.000000000  0.918088737          0.918088737      0.081911263 0.812286689\n388 0.256578947  0.434210526          0.440789474      0.559210526 0.388157895\n389 0.000000000  0.831578947          0.831578947      0.168421053 0.726315789\n390 0.417910448  0.467661692          0.890547264      0.109452736 1.000000000\n391 0.276923077  0.369230769          0.646153846      0.353846154 0.261538462\n392 0.310160428  0.540106952          0.898395722      0.101604278 0.572192513\n393 0.000000000  0.630136986          0.630136986      0.369863014 0.849315068\n394 0.000000000  1.000000000          1.000000000      0.000000000 1.000000000\n395 0.000000000  0.956730769          0.961538462      0.038461538 1.000000000\n396 0.000000000  0.775862069          0.775862069      0.224137931 0.000000000\n397 0.000000000  0.932432432          0.932432432      0.067567568 0.000000000\n398 0.000000000  1.000000000          1.000000000      0.000000000 1.000000000\n399 0.000000000  0.837398374          0.837398374      0.162601626 1.000000000\n400 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n401 0.000000000  0.962162162          0.962162162      0.037837838 0.913513514\n402 0.048543689  0.854368932          0.902912621      0.097087379 0.592233010\n403 0.000000000  0.800664452          0.800664452      0.199335548 1.000000000\n404 0.219101124  0.494382022          0.713483146      0.286516854 0.292134831\n405 0.000000000  0.951048951          0.951048951      0.048951049 1.000000000\n406 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n407 0.000000000  0.600000000          0.600000000      0.400000000 1.000000000\n408 0.000000000  0.820000000          0.820000000      0.180000000 0.683333333\n409 0.420689655  0.500000000          0.931034483      0.068965517 0.893103448\n410 0.000000000  0.685039370          0.685039370      0.314960630 0.795275591\n411 0.316964286  0.616071429          0.933035714      0.066964286 1.000000000\n412 0.000000000  0.820143885          0.820143885      0.179856115 0.769784173\n413 0.000000000  0.693965517          0.693965517      0.306034483 0.000000000\n414 0.000000000  0.661764706          0.661764706      0.338235294 1.000000000\n415 0.000000000  1.000000000          1.000000000      0.000000000 0.982300885\n416 0.185185185  0.623456790          0.808641975      0.191358025 1.000000000\n417 0.078651685  0.337078652          0.415730337      0.584269663 0.808988764\n418 0.000000000  0.728813559          0.728813559      0.271186441 0.838983051\n419 0.173913043  0.717391304          0.891304348      0.108695652 1.000000000\n420 0.000000000  0.579545455          0.579545455      0.420454545 0.090909091\n421 0.335443038  0.556962025          0.892405063      0.107594937 0.924050633\n422 0.000000000  0.994555354          0.994555354      0.005444646 1.000000000\n423 0.000000000  0.914893617          0.914893617      0.085106383 0.822695035\n424 0.000000000  0.894736842          0.894736842      0.105263158 0.863157895\n425 0.000000000  0.982658960          0.982658960      0.017341040 1.000000000\n426 0.000000000  0.563968668          0.563968668      0.436031332 0.519582245\n427 0.000000000  0.636363636          0.636363636      0.363636364 0.831168831\n428 0.000000000  0.640625000          0.656250000      0.343750000 1.000000000\n429 0.000000000  0.220779221          0.220779221      0.779220779 0.116883117\n430 0.066666667  0.000000000          0.066666667      0.933333333 0.933333333\n431 0.000000000  0.934272300          0.962441315      0.037558685 1.000000000\n432 0.103448276  0.804597701          0.816091954      0.183908046 1.000000000\n433 0.000000000  0.555110220          0.557114228      0.442885772 1.000000000\n434 0.013215859  0.911894273          0.911894273      0.088105727 0.859030837\n435 0.000000000  0.918478261          0.983695652      0.016304348 0.918478261\n436 0.000000000  0.528571429          0.542857143      0.457142857 1.000000000\n437 0.000000000  0.804054054          0.804054054      0.195945946 0.621621622\n438 0.009523810  0.676190476          0.685714286      0.314285714 1.000000000\n439 0.050000000  0.000000000          0.050000000      0.950000000 1.000000000\n440 0.333333333  0.666666667          0.666666667      0.333333333 1.000000000\n441 0.293628809  0.659279778          0.950138504      0.049861496 0.975069252\n442 0.024691358  0.925925926          0.950617284      0.049382716 0.098765432\n443 0.137931034  0.293103448          0.431034483      0.568965517 0.000000000\n444 0.000000000  0.958333333          0.958333333      0.041666667 0.912500000\n445 0.000000000  1.000000000          1.000000000      0.000000000 1.000000000\n446 0.083916084  0.286713287          0.370629371      0.629370629 0.902097902\n447 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n448 0.000000000  0.921568627          0.921568627      0.078431373 0.490196078\n449 0.000000000  0.976562500          0.976562500      0.023437500 1.000000000\n450 0.000000000  0.893129771          0.893129771      0.106870229 0.496183206\n451 0.000000000  0.864077670          0.864077670      0.135922330 1.000000000\n452 0.153061224  0.765306122          0.928571429      0.071428571 1.000000000\n453 0.000000000  0.882352941          0.882352941      0.117647059 1.000000000\n454 0.011235955  0.550561798          0.561797753      0.438202247 0.904494382\n455 0.000000000  0.773333333          0.773333333      0.226666667 0.986666667\n456 0.126436782  0.735632184          0.862068966      0.137931034 0.988505747\n457 0.000000000  0.427480916          0.480916031      0.519083969 0.954198473\n458 0.000000000  1.000000000          1.000000000      0.000000000 1.000000000\n459 0.040590406  0.309963100          0.350553506      0.649446494 0.549815498\n460 0.168000000  0.440000000          0.608000000      0.392000000 0.832000000\n461 0.000000000  0.135135135          0.135135135      0.864864865 0.000000000\n462 0.261904762  0.023809524          0.309523810      0.690476190 0.000000000\n463 0.000000000  1.000000000          1.000000000      0.000000000 1.000000000\n464 0.341333333  0.597333333          0.938666667      0.061333333 0.880000000\n465 0.358695652  0.445652174          0.815217391      0.184782609 1.000000000\n466 0.008474576  0.618644068          0.627118644      0.372881356 0.661016949\n467 0.142045455  0.750000000          0.892045455      0.107954545 1.000000000\n468 0.010000000  0.440000000          0.450000000      0.550000000 1.000000000\n469 0.000000000  0.983695652          0.983695652      0.016304348 0.989130435\n470 0.312925170  0.564625850          0.870748299      0.129251701 0.945578231\n471 0.000000000  0.526315789          0.526315789      0.473684211 0.473684211\n472 0.000000000  0.729729730          0.729729730      0.270270270 1.000000000\n473 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n474 0.000000000  0.960000000          0.988571429      0.011428571 0.965714286\n475 1.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n476 0.050000000  0.920000000          0.970000000      0.030000000 0.970000000\n477 0.000000000  0.777777778          0.777777778      0.222222222 0.777777778\n478 0.000000000  0.625498008          0.625498008      0.374501992 0.768924303\n479 0.315789474  0.165413534          0.172932331      0.827067669 0.030075188\n480 0.000000000  0.935294118          0.935294118      0.064705882 0.794117647\n481 0.000000000  0.823529412          0.823529412      0.176470588 0.882352941\n482 0.000000000  0.660000000          0.660000000      0.340000000 1.000000000\n483 0.000000000  0.198113208          0.198113208      0.801886792 1.000000000\n484 0.032608696  0.630434783          0.663043478      0.336956522 0.228260870\n485 0.000000000  0.984126984          0.984126984      0.015873016 0.892857143\n486 0.000000000  0.854166667          0.875000000      0.125000000 0.750000000\n487 0.338607595  0.537974684          0.879746835      0.120253165 0.901898734\n488 0.000000000  0.813793103          0.848275862      0.151724138 1.000000000\n489 0.000000000  0.781250000          0.791666667      0.208333333 1.000000000\n490 0.008474576  0.872881356          0.881355932      0.118644068 1.000000000\n491 0.000000000  0.912280702          0.912280702      0.087719298 0.807017544\n492 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n493 0.000000000  0.742514970          0.754491018      0.245508982 1.000000000\n494 0.035714286  0.732142857          0.767857143      0.232142857 1.000000000\n495 0.000000000  0.622950820          0.631147541      0.368852459 0.737704918\n496 0.000000000  0.834196891          0.854922280      0.145077720 1.000000000\n497 0.000000000  0.916666667          0.916666667      0.083333333 1.000000000\n498 0.527272727  0.000000000          0.527272727      0.472727273 0.909090909\n499 0.000000000  0.166666667          0.166666667      0.833333333 1.000000000\n500 0.000000000  0.800000000          0.800000000      0.200000000 0.850000000\n501 0.000000000  0.953125000          0.953125000      0.046875000 1.000000000\n502 0.345762712  0.559322034          0.911864407      0.088135593 1.000000000\n503 0.000000000  0.902912621          0.902912621      0.097087379 1.000000000\n504 0.000000000  0.938931298          0.938931298      0.061068702 0.625954198\n505 0.000000000  0.286956522          0.286956522      0.713043478 0.973913043\n506 0.381578947  0.407894737          0.789473684      0.210526316 0.697368421\n507 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n508 0.000000000  0.421052632          0.421052632      0.578947368 0.757894737\n509 1.000000000  0.961538462          0.961538462      0.038461538 0.423076923\n510 0.000000000  0.662790698          0.662790698      0.337209302 1.000000000\n511 0.034285714  0.828571429          0.862857143      0.137142857 1.000000000\n512 0.000000000  0.000000000          0.000000000      1.000000000 0.000000000\n513 0.000000000  0.000000000          0.000000000      1.000000000 0.000000000\n514 0.000000000  0.909090909          0.916083916      0.083916084 1.000000000\n515 0.093750000  0.000000000          0.093750000      0.906250000 0.000000000\n516 0.000000000  0.936842105          0.936842105      0.063157895 1.000000000\n517 0.000000000  0.628378378          0.628378378      0.371621622 1.000000000\n518 0.000000000  0.054054054          0.081081081      0.918918919 1.000000000\n519 0.000000000  0.480000000          0.480000000      0.520000000 0.000000000\n520 0.062068966  0.517241379          0.586206897      0.413793103 0.772413793\n521 0.018867925  0.503144654          0.528301887      0.471698113 0.886792453\n522 0.000000000  0.325301205          0.469879518      0.530120482 1.000000000\n523 0.000000000  0.152173913          0.152173913      0.847826087 0.956521739\n524 0.000000000  0.186046512          0.255813953      0.744186047 0.813953488\n525 1.000000000  0.930000000          0.930000000      0.070000000 0.160000000\n526 0.000000000  0.000000000          0.000000000      0.000000000 0.000000000\n527 0.000000000  0.939130435          0.939130435      0.060869565 1.000000000\n528 0.485294118  0.029411765          0.514705882      0.485294118 0.897058824\n529 0.000000000  0.880630631          0.880630631      0.119369369 0.549549550\n530 0.000000000  0.967391304          0.967391304      0.032608696 0.771739130\n531 0.466666667  0.000000000          0.466666667      0.533333333 0.266666667\n532 0.294117647  0.411764706          0.705882353      0.294117647 0.264705882\n533 0.611111111  0.370370370          0.981481481      0.018518519 1.000000000\n534 0.329113924  0.443037975          0.784810127      0.215189873 0.721518987\n535 0.030303030  0.090909091          0.121212121      0.878787879 0.242424242\n536 0.435897436  0.025641026          0.461538462      0.538461538 0.000000000\n537 0.909090909  0.030303030          0.939393939      0.060606061 0.515151515\n538 0.000000000  0.132352941          0.132352941      0.867647059 1.000000000\n539 0.000000000  0.081632653          0.081632653      0.918367347 1.000000000\n540 0.000000000  0.090909091          0.090909091      0.909090909 1.000000000\n541 0.625000000  0.000000000          0.607142857      0.392857143 0.642857143\n542 0.000000000  0.000000000          0.000000000      1.000000000 0.000000000\n543 0.250000000  0.035714286          0.285714286      0.714285714 0.000000000\n544 0.409090909  0.075757576          0.484848485      0.515151515 0.893939394\n545 0.285714286  0.417582418          0.703296703      0.296703297 0.983516484\n546 0.216867470  0.698795181          0.921686747      0.078313253 0.945783133\n547 0.000000000  0.534090909          0.534090909      0.465909091 1.000000000\n548 0.167630058  0.271676301          0.439306358      0.560693642 0.982658960\n549 0.000000000  0.256000000          0.272000000      0.728000000 0.672000000\n550 0.044554455  0.509900990          0.554455446      0.445544554 0.990099010\n551 0.031746032  0.079365079          0.111111111      0.888888889 1.000000000\n552 0.409090909  0.000000000          0.409090909      0.590909091 0.515151515\n553 0.163090129  0.575107296          0.738197425      0.261802575 0.862660944\n554 0.246861925  0.422594142          0.669456067      0.330543933 0.899581590\n555 0.513274336  0.168141593          0.690265487      0.309734513 0.805309735\n556 0.000000000  0.500000000          0.500000000      0.500000000 0.953488372\n557 0.154605263  0.509868421          0.664473684      0.335526316 0.871710526\n558 0.194805195  0.064935065          0.272727273      0.727272727 0.987012987\n559 0.053892216  0.281437126          0.347305389      0.652694611 1.000000000\n560 0.000000000  0.601063830          0.606382979      0.393617021 0.180851064\n561 0.000000000  0.205882353          0.205882353      0.794117647 1.000000000\n562 0.241935484  0.064516129          0.306451613      0.693548387 0.612903226\n563 0.197530864  0.209876543          0.395061728      0.604938272 0.938271605\n564 0.304347826  0.239130435          0.543478261      0.456521739 0.282608696\n565 0.000000000  0.875000000          0.875000000      0.125000000 1.000000000\n566 0.030000000  0.090000000          0.120000000      0.880000000 0.040000000\n567 0.008620690  0.344827586          0.353448276      0.646551724 0.146551724\n568 0.043010753  0.419354839          0.462365591      0.537634409 0.930107527\n569 0.377289377  0.421245421          0.798534799      0.201465201 0.893772894\n570 0.000000000  0.270833333          0.291666667      0.708333333 1.000000000\n571 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n572 0.040540541  0.094594595          0.135135135      0.864864865 1.000000000\n573 0.232323232  0.272727273          0.505050505      0.494949495 0.939393939\n574 0.289473684  0.078947368          0.368421053      0.631578947 0.578947368\n575 0.129213483  0.685393258          0.820224719      0.179775281 1.000000000\n576 0.356363636  0.530909091          0.887272727      0.112727273 0.770909091\n577 0.397759104  0.568627451          0.963585434      0.036414566 1.000000000\n578 0.000000000  0.907692308          0.907692308      0.092307692 1.000000000\n579 0.526315789  0.026315789          0.552631579      0.447368421 1.000000000\n580 0.459770115  0.034482759          0.494252874      0.505747126 0.195402299\n581 0.014652015  0.930402930          0.945054945      0.054945055 0.959706960\n582 0.004830918  0.714975845          0.743961353      0.256038647 1.000000000\n583 0.000000000  0.594594595          0.608108108      0.391891892 0.324324324\n584 0.000000000  0.190000000          0.200000000      0.800000000 0.000000000\n585 0.097560976  0.000000000          0.121951220      0.878048780 0.682926829\n586 0.000000000  0.160000000          0.160000000      0.840000000 0.786666667\n587 0.013513514  0.081081081          0.094594595      0.905405405 0.864864865\n588 0.230769231  0.076923077          0.384615385      0.615384615 0.692307692\n589 0.135593220  0.864406780          0.898305085      0.101694915 0.966101695\n590 0.000000000  0.333333333          0.500000000      0.500000000 0.000000000\n591 0.391891892  0.418918919          0.810810811      0.189189189 1.000000000\n592 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n593 0.121546961  0.552486188          0.674033149      0.325966851 0.370165746\n594 0.363636364  0.252525253          0.626262626      0.373737374 0.484848485\n595 0.364864865  0.459459459          0.864864865      0.135135135 0.554054054\n596 0.000000000  0.486486486          0.486486486      0.513513514 1.000000000\n597 0.000000000  0.400000000          0.400000000      0.600000000 1.000000000\n598 0.228070175  0.429824561          0.657894737      0.342105263 0.570175439\n599 0.000000000  0.585185185          0.585185185      0.414814815 0.992592593\n600 0.000000000  0.515527950          0.515527950      0.484472050 0.434782609\n601 0.319634703  0.634703196          0.958904110      0.041095890 1.000000000\n602 0.846153846  0.000000000          0.846153846      0.153846154 0.076923077\n603 0.416666667  0.083333333          0.500000000      0.500000000 0.000000000\n604 0.000000000  0.190476190          0.190476190      0.809523810 0.634920635\n605 0.000000000  0.454545455          0.545454545      0.454545455 0.636363636\n606 0.000000000  0.043478261          0.043478261      0.956521739 0.000000000\n607 0.357142857  0.469387755          0.826530612      0.173469388 0.275510204\n608 0.000000000  0.009009009          0.009009009      0.990990991 1.000000000\n609 0.418410042  0.430962343          0.849372385      0.150627615 1.000000000\n610 0.181467181  0.432432432          0.613899614      0.386100386 0.996138996\n611 0.352941176  0.058823529          0.411764706      0.588235294 0.313725490\n612 0.075000000  0.508333333          0.600000000      0.400000000 0.525000000\n613 0.000000000  0.200000000          0.200000000      0.800000000 0.450000000\n614 0.200000000  0.050000000          0.250000000      0.750000000 0.250000000\n615 0.615384615  0.000000000          0.615384615      0.384615385 0.897435897\n616 0.585365854  0.073170732          0.658536585      0.341463415 0.585365854\n617 0.000000000  0.220338983          0.220338983      0.779661017 0.983050847\n618 0.575757576  0.106060606          0.681818182      0.318181818 0.893939394\n619 0.484848485  0.000000000          0.484848485      0.515151515 0.484848485\n620 0.000000000  0.460000000          0.480000000      0.520000000 1.000000000\n621 0.000000000  0.030303030          0.030303030      0.969696970 0.818181818\n622 0.000000000  0.086956522          0.086956522      0.913043478 0.347826087\n623 0.319148936  0.042553191          0.382978723      0.617021277 0.000000000\n624 0.431818182  0.068181818          0.295454545      0.704545455 0.681818182\n625 0.087209302  0.360465116          0.459302326      0.540697674 0.127906977\n626 0.112903226  0.758064516          0.870967742      0.129032258 0.983870968\n627 0.084337349  0.000000000          0.084337349      0.915662651 0.771084337\n628 0.038961039  0.012987013          0.051948052      0.948051948 1.000000000\n629 0.015873016  0.063492063          0.079365079      0.920634921 1.000000000\n630 0.000000000  0.068181818          0.068181818      0.931818182 1.000000000\n631 0.290322581  0.129032258          0.419354839      0.580645161 0.161290323\n632 0.250000000  0.029411765          0.279411765      0.720588235 0.647058824\n633 0.196721311  0.311475410          0.508196721      0.491803279 0.918032787\n634 0.000000000  0.464088398          0.464088398      0.535911602 0.375690608\n635 0.154929577  0.556338028          0.711267606      0.288732394 0.760563380\n636 0.383561644  0.000000000          0.383561644      0.616438356 0.410958904\n637 0.000000000  0.411764706          0.411764706      0.588235294 1.000000000\n638 0.261363636  0.306818182          0.568181818      0.431818182 0.431818182\n639 0.531250000  0.109375000          0.640625000      0.359375000 0.515625000\n640 0.000000000  0.707462687          0.716417910      0.283582090 0.895522388\n641 0.010638298  0.882978723          0.893617021      0.106382979 0.691489362\n642 0.429648241  0.487437186          0.917085427      0.082914573 0.944723618\n643 0.000000000  0.181818182          0.272727273      0.727272727 1.000000000\n644 0.029090909  0.676363636          0.705454545      0.294545455 0.650909091\n645 0.000000000  0.695652174          0.947826087      0.052173913 0.026086957\n646 0.000000000  0.250000000          0.250000000      0.750000000 0.513888889\n647 0.368115942  0.544927536          0.918840580      0.081159420 0.965217391\n648 0.000000000  0.587301587          0.587301587      0.412698413 1.000000000\n649 0.000000000  0.871212121          0.871212121      0.128787879 1.000000000\n650 0.000000000  0.910000000          0.920000000      0.080000000 0.690000000\n651 0.295454545  0.136363636          0.431818182      0.568181818 0.636363636\n652 0.072847682  0.788079470          0.860927152      0.139072848 0.847682119\n653 0.000000000  0.714285714          0.714285714      0.285714286 1.000000000\n654 0.000000000  0.969879518          0.981927711      0.018072289 0.993975904\n655 0.000000000  0.875000000          0.881944444      0.118055556 0.652777778\n656 0.414473684  0.470394737          0.891447368      0.108552632 1.000000000\n657 0.000000000  0.886486486          0.886486486      0.113513514 0.902702703\n658 0.000000000  0.946666667          0.946666667      0.053333333 1.000000000\n659 0.000000000  0.762626263          0.762626263      0.237373737 0.265151515\n660 0.000000000  0.805194805          0.805194805      0.194805195 1.000000000\n661 0.000000000  0.744186047          0.767441860      0.232558140 0.837209302\n662 0.000000000  0.937888199          0.950310559      0.049689441 1.000000000\n663 0.000000000  0.209677419          0.258064516      0.741935484 0.951612903\n664 0.000000000  0.896551724          0.903448276      0.096551724 0.841379310\n665 0.137614679  0.449541284          0.587155963      0.412844037 1.000000000\n666 0.229729730  0.486486486          0.722972973      0.277027027 0.168918919\n667 0.000000000  0.706422018          0.761467890      0.238532110 1.000000000\n668 0.000000000  0.941558442          0.941558442      0.058441558 0.954545455\n669 0.000000000  0.083333333          0.083333333      0.916666667 0.416666667\n670 0.160000000  0.740000000          0.900000000      0.100000000 0.840000000\n671 0.352459016  0.016393443          0.368852459      0.631147541 0.213114754\n672 0.000000000  0.173076923          0.173076923      0.826923077 1.000000000\n673 0.000000000  0.854368932          0.854368932      0.145631068 1.000000000\n674 0.000000000  0.634146341          0.634146341      0.365853659 1.000000000\n675 0.000000000  0.771084337          0.771084337      0.228915663 1.000000000\n676 0.000000000  0.888888889          0.888888889      0.111111111 0.888888889\n677 0.481308411  0.450934579          0.932242991      0.067757009 0.911214953\n678 0.000000000  0.885350318          0.885350318      0.114649682 0.783439490\n679 0.000000000  0.897560976          0.897560976      0.102439024 0.892682927\n680 0.110091743  0.798165138          0.908256881      0.091743119 0.954128440\n681 0.000000000  0.888446215          0.888446215      0.111553785 1.000000000\n682 0.214285714  0.000000000          0.214285714      0.785714286 0.000000000\n683 0.000000000  0.466666667          0.466666667      0.533333333 1.000000000\n684 0.000000000  0.917675545          0.917675545      0.082324455 0.937046005\n685 0.000000000  0.151515152          0.151515152      0.848484848 0.000000000\n686 0.000000000  0.320000000          0.320000000      0.680000000 0.000000000\n687 0.000000000  0.785714286          0.785714286      0.214285714 0.892857143\n688 0.000000000  0.096774194          0.645161290      0.354838710 0.967741935\n689 0.000000000  0.898969072          0.898969072      0.101030928 1.000000000\n690 0.000000000  0.804878049          0.804878049      0.195121951 0.195121951\n691 0.000000000  0.963898917          0.967509025      0.032490975 0.949458484\n692 0.000000000  0.800000000          0.800000000      0.200000000 0.900000000\n693 0.098360656  0.196721311          0.327868852      0.672131148 0.000000000\n694 0.031746032  0.523809524          0.582010582      0.417989418 0.947089947\n695 0.000000000  0.687500000          0.687500000      0.312500000 0.984375000\n696 0.015625000  0.875000000          0.875000000      0.125000000 0.929687500\n697 0.000000000  0.000000000          0.000000000      1.000000000 1.000000000\n698 0.000000000  0.930337079          0.930337079      0.069662921 0.883146067\n699 0.077777778  0.766666667          0.850000000      0.150000000 0.716666667\n700 0.000000000  0.721925134          0.721925134      0.278074866 0.834224599\n701 0.000000000  0.483146067          0.483146067      0.516853933 0.831460674\n702 0.000000000  0.562500000          0.562500000      0.437500000 1.000000000\n703 0.000000000  0.880597015          0.895522388      0.104477612 0.000000000\n704 0.196428571  0.741071429          0.937500000      0.062500000 0.959821429\n705 0.000000000  0.055555556          0.055555556      0.944444444 0.833333333\n706 0.000000000  0.987969925          0.990977444      0.009022556 1.000000000\n707 0.000000000  0.891891892          0.891891892      0.108108108 1.000000000\n708 0.030075188  0.939849624          0.947368421      0.052631579 1.000000000\n709 0.017094017  0.358974359          0.376068376      0.623931624 1.000000000\n710 0.000000000  0.800000000          0.800000000      0.200000000 1.000000000\n711 0.000000000  0.844221106          0.849246231      0.150753769 0.819095477\n712 0.000000000  0.961290323          0.961290323      0.038709677 0.812903226\n713 0.000000000  0.846153846          0.857988166      0.142011834 0.869822485\n714 0.000000000  0.585585586          0.585585586      0.414414414 1.000000000\n715 0.727272727  0.000000000          0.727272727      0.272727273 0.772727273\n716 0.676190476  0.009523810          0.714285714      0.285714286 0.800000000\n717 0.000000000  0.727272727          0.727272727      0.272727273 0.818181818\n718 0.000000000  0.111111111          0.111111111      0.888888889 1.000000000\n719 0.075471698  0.245283019          0.396226415      0.603773585 0.886792453\n720 0.000000000  0.320000000          0.320000000      0.680000000 1.000000000\n721 0.238636364  0.477272727          0.750000000      0.250000000 0.943181818\n722 0.031746032  0.031746032          0.079365079      0.920634921 0.952380952\n723 0.000000000  0.380952381          0.380952381      0.619047619 0.976190476\n724 0.265822785  0.632911392          0.898734177      0.101265823 0.949367089\n725 0.077777778  0.533333333          0.611111111      0.388888889 1.000000000\n726 0.185483871  0.266129032          0.451612903      0.548387097 1.000000000\n727 0.000000000  0.203703704          0.203703704      0.796296296 0.907407407\n728 0.568181818  0.090909091          0.659090909      0.340909091 0.840909091\n729 0.351351351  0.162162162          0.527027027      0.472972973 0.405405405\n730 0.436893204  0.077669903          0.514563107      0.485436893 0.631067961\n731 0.000000000  0.953642384          0.953642384      0.046357616 0.675496689\n732 0.500000000  0.333333333          0.833333333      0.166666667 0.500000000\n733 0.000000000  0.104166667          0.145833333      0.854166667 0.979166667\n734 0.000000000  0.178571429          0.178571429      0.821428571 0.964285714\n735 0.296943231  0.637554585          0.921397380      0.078602620 1.000000000\n736 0.108108108  0.735135135          0.843243243      0.156756757 1.000000000\n737 0.000000000  0.181818182          0.363636364      0.636363636 0.181818182\n738 0.000000000  0.050000000          0.050000000      0.950000000 0.675000000\n739 0.880000000  0.160000000          0.920000000      0.080000000 1.000000000\n740 0.339285714  0.553571429          0.875000000      0.125000000 0.934523810\n741 0.000000000  0.358024691          0.358024691      0.641975309 0.864197531\n742 0.009803922  0.490196078          0.519607843      0.480392157 1.000000000\n743 0.000000000  0.974874372          0.974874372      0.025125628 0.984924623\n744 0.000000000  0.985454545          0.985454545      0.014545455 1.000000000\n745 0.000000000  0.033333333          0.033333333      0.966666667 0.633333333\n746 0.000000000  0.538461538          0.557692308      0.442307692 0.288461538\n747 0.000000000  0.285714286          0.428571429      0.571428571 1.000000000\n748 0.000000000  0.760000000          0.760000000      0.240000000 0.771428571\n749 0.342696629  0.376404494          0.724719101      0.275280899 0.797752809\n750 0.000000000  0.791666667          0.875000000      0.125000000 0.819444444\n751 0.193415638  0.740740741          0.934156379      0.065843621 0.679012346\n752 0.000000000  0.152542373          0.152542373      0.847457627 0.762711864\n753 0.000000000  0.877697842          0.877697842      0.122302158 1.000000000\n754 0.000000000  0.707317073          0.707317073      0.292682927 1.000000000\n755 0.000000000  0.542372881          0.542372881      0.457627119 0.864406780\n756 0.000000000  0.680672269          0.680672269      0.319327731 0.722689076\n757 0.101538462  0.664615385          0.766153846      0.233846154 0.603076923\n758 0.415929204  0.401179941          0.817109145      0.182890855 0.949852507\n759 0.000000000  0.810483871          0.810483871      0.189516129 0.983870968\n760 0.000000000  0.969026549          0.973451327      0.026548673 1.000000000\n761 0.000000000  0.884615385          0.884615385      0.115384615 0.615384615\n762 0.000000000  0.259259259          0.259259259      0.740740741 0.888888889\n763 0.000000000  0.346153846          0.346153846      0.653846154 0.192307692\n764 0.000000000  0.692307692          0.692307692      0.307692308 0.307692308\n765 0.160804020  0.748743719          0.909547739      0.090452261 0.939698492\n766 0.000000000  0.000000000          0.000000000      1.000000000 0.666666667\n767 0.000000000  0.357142857          0.357142857      0.642857143 1.000000000\n768 0.000000000  0.943262411          0.943262411      0.056737589 0.907801418\n769 0.000000000  0.523364486          0.523364486      0.476635514 0.831775701\n770 0.000000000  0.943444730          0.943444730      0.056555270 1.000000000\n771 0.000000000  0.949843260          0.949843260      0.050156740 0.291536050\n772 0.110526316  0.773684211          0.889473684      0.110526316 0.852631579\n773 0.000000000  0.790697674          0.798449612      0.201550388 1.000000000\n774 0.000000000  0.900000000          0.900000000      0.100000000 0.842857143\n    pct_qualityok\n1      0.76470588\n2      0.80281690\n3      0.00000000\n4      0.98245614\n5      0.72916667\n6      0.42060086\n7      0.73529412\n8      0.86554622\n9      0.56578947\n10     0.53030303\n11     0.87179487\n12     0.91111111\n13     0.74603175\n14     0.48437500\n15     0.70977011\n16     0.54437870\n17     0.47169811\n18     0.38709677\n19     0.50000000\n20     0.96774194\n21     0.58024691\n22     0.88333333\n23     0.18421053\n24     0.96460177\n25     0.64000000\n26     0.78947368\n27     0.21428571\n28     0.69211196\n29     0.73714286\n30     0.66279070\n31     0.76923077\n32     0.50000000\n33     0.99504950\n34     0.48000000\n35     0.70391061\n36     0.97402597\n37     0.67741935\n38     0.77973568\n39     0.85416667\n40     0.89102564\n41     0.79194631\n42     0.60156250\n43     0.35714286\n44     0.95744681\n45     0.95000000\n46     0.78888889\n47     0.93150685\n48     0.99047619\n49     0.66975309\n50     0.92708333\n51     0.55000000\n52     0.33333333\n53     0.74074074\n54     0.34246575\n55     0.29411765\n56     0.00000000\n57     1.00000000\n58     0.69230769\n59     0.81333333\n60     0.66666667\n61     0.46153846\n62     0.00000000\n63     0.80094787\n64     0.95000000\n65     0.95384615\n66     0.40000000\n67     0.79577465\n68     0.63829787\n69     0.97222222\n70     0.73094170\n71     0.73577236\n72     0.59821429\n73     0.65178571\n74     0.74626866\n75     0.83633094\n76     0.80645161\n77     0.11538462\n78     0.22857143\n79     0.42500000\n80     0.48484848\n81     0.93176734\n82     0.68571429\n83     0.89556962\n84     0.78640777\n85     0.80714286\n86     0.00000000\n87     0.87965616\n88     1.00000000\n89     0.79622642\n90     0.85409253\n91     0.00000000\n92     0.44250871\n93     0.88343558\n94     0.60317460\n95     0.44221106\n96     0.93129771\n97     0.88125000\n98     0.90967742\n99     0.88215488\n100    0.97222222\n101    0.34146341\n102    0.42931937\n103    0.48333333\n104    0.35114504\n105    0.91124260\n106    0.99585062\n107    0.94708995\n108    0.96678967\n109    0.83505155\n110    0.96391753\n111    0.99371069\n112    0.91017964\n113    0.95833333\n114    0.93814433\n115    0.57534247\n116    0.80612245\n117    0.95161290\n118    0.54189944\n119    0.49561404\n120    0.75193798\n121    0.50000000\n122    1.00000000\n123    0.85185185\n124    0.80790960\n125    0.78195489\n126    0.18181818\n127    0.98480243\n128    0.95555556\n129    0.88571429\n130    0.95275591\n131    0.93865031\n132    1.00000000\n133    0.53409091\n134    0.28571429\n135    0.92372881\n136    0.31707317\n137    0.69863014\n138    0.84722222\n139    0.95939086\n140    0.54545455\n141    0.25000000\n142    0.96376812\n143    0.97435897\n144    0.82432432\n145    0.95073892\n146    0.00000000\n147    0.85937500\n148    0.93939394\n149    0.93913043\n150    0.92207792\n151    0.85185185\n152    0.70000000\n153    0.91304348\n154    0.89473684\n155    0.72511848\n156    0.92307692\n157    0.37500000\n158    0.76923077\n159    0.84615385\n160    0.00000000\n161    0.99090909\n162    0.86363636\n163    0.83783784\n164    1.00000000\n165    0.77777778\n166    0.90259740\n167    0.95000000\n168    0.88025890\n169    0.08000000\n170    0.30769231\n171    0.99468085\n172    0.71296296\n173    0.67808219\n174    0.85546875\n175    0.46666667\n176    0.58333333\n177    0.87500000\n178    0.45360825\n179    0.68553459\n180    0.71153846\n181    0.85106383\n182    0.82098765\n183    0.45454545\n184    0.95588235\n185    0.52970297\n186    0.57777778\n187    0.50617284\n188    0.54700855\n189    0.13888889\n190    1.00000000\n191    0.66666667\n192    0.70769231\n193    0.65217391\n194    0.75000000\n195    0.10526316\n196    0.81642512\n197    0.68750000\n198    0.76470588\n199    0.67857143\n200    0.67647059\n201    0.62162162\n202    0.77631579\n203    0.68965517\n204    0.52631579\n205    0.90909091\n206    0.92000000\n207    0.05263158\n208    0.68627451\n209    0.28571429\n210    0.72916667\n211    0.92857143\n212    0.81818182\n213    0.59393939\n214    0.38888889\n215    0.17647059\n216    0.51785714\n217    0.46703297\n218    0.19745223\n219    0.96825397\n220    0.89090909\n221    0.91304348\n222    1.00000000\n223    1.00000000\n224    0.83157895\n225    1.00000000\n226    0.78571429\n227    1.00000000\n228    0.74576271\n229    0.99325843\n230    0.93679458\n231    0.91358025\n232    0.85714286\n233    0.99769053\n234    0.84269663\n235    1.00000000\n236    0.78787879\n237    0.76226415\n238    0.99484536\n239    0.97142857\n240    0.53092784\n241    0.00000000\n242    0.99646643\n243    0.94545455\n244    0.86666667\n245    0.77519380\n246    1.00000000\n247    0.82857143\n248    1.00000000\n249    0.83333333\n250    0.00000000\n251    0.97500000\n252    0.00000000\n253    1.00000000\n254    0.52136752\n255    0.98433420\n256    0.64179104\n257    0.68292683\n258    0.96501458\n259    0.94791667\n260    0.95454545\n261    0.00000000\n262    0.93859649\n263    0.97457627\n264    0.70967742\n265    0.83673469\n266    0.95192308\n267    0.93421053\n268    0.64285714\n269    0.47619048\n270    0.88613861\n271    0.00000000\n272    0.97916667\n273    0.75000000\n274    1.00000000\n275    0.63636364\n276    0.92125984\n277    0.88505747\n278    0.66666667\n279    0.84112150\n280    0.70588235\n281    0.69856459\n282    0.71568627\n283    0.77777778\n284    0.72180451\n285    0.55000000\n286    0.92592593\n287    0.80487805\n288    0.54901961\n289    0.88135593\n290    0.75961538\n291    0.35714286\n292    0.47826087\n293    0.14285714\n294    0.10714286\n295    0.74757282\n296    0.31250000\n297    0.77049180\n298    0.81818182\n299    0.88324873\n300    0.81751825\n301    0.75280899\n302    0.69047619\n303    0.83225806\n304    0.90183028\n305    0.78571429\n306    0.20481928\n307    0.43003413\n308    0.95833333\n309    0.52272727\n310    0.47619048\n311    0.47058824\n312    0.85714286\n313    0.38167939\n314    0.63888889\n315    0.22580645\n316    0.60937500\n317    0.75555556\n318    0.77586207\n319    0.47572816\n320    0.93442623\n321    0.22448980\n322    1.00000000\n323    0.93333333\n324    0.89051095\n325    0.46666667\n326    0.66666667\n327    0.44736842\n328    0.85567010\n329    0.61621622\n330    0.51741294\n331    0.82539683\n332    0.67500000\n333    0.48275862\n334    0.80851064\n335    0.96969697\n336    0.96969697\n337    0.11949686\n338    0.46728972\n339    0.49710983\n340    0.13793103\n341    0.74100719\n342    0.54761905\n343    0.74820144\n344    0.80412371\n345    0.85606061\n346    0.87387387\n347    0.91176471\n348    0.90196078\n349    0.09090909\n350    0.64141414\n351    0.73913043\n352    0.71428571\n353    0.88505747\n354    0.70338983\n355    0.70769231\n356    0.71153846\n357    0.40707965\n358    0.65765766\n359    0.88679245\n360    0.65714286\n361    0.28301887\n362    0.17213115\n363    0.15517241\n364    0.51685393\n365    0.68750000\n366    0.68421053\n367    0.80645161\n368    0.52459016\n369    0.71544715\n370    0.69230769\n371    0.62500000\n372    0.37500000\n373    0.95104895\n374    0.53521127\n375    0.70000000\n376    0.25000000\n377    0.76078431\n378    0.68750000\n379    0.25391850\n380    0.56209150\n381    0.71428571\n382    0.87121212\n383    0.94285714\n384    0.84057971\n385    0.96825397\n386    0.87162162\n387    0.32764505\n388    0.67105263\n389    0.93684211\n390    0.46268657\n391    0.62307692\n392    0.48128342\n393    0.94520548\n394    1.00000000\n395    0.72115385\n396    0.77586207\n397    0.93918919\n398    0.99593496\n399    0.95934959\n400    0.00000000\n401    0.91351351\n402    0.90776699\n403    0.96013289\n404    0.68539326\n405    0.70629371\n406    0.00000000\n407    0.97142857\n408    0.85333333\n409    0.41034483\n410    0.99212598\n411    0.59375000\n412    0.79856115\n413    0.03017241\n414    0.92647059\n415    0.74336283\n416    0.77777778\n417    0.79213483\n418    0.98305085\n419    0.78260870\n420    0.75000000\n421    0.58860759\n422    0.97277677\n423    0.48226950\n424    0.87368421\n425    0.86705202\n426    0.97389034\n427    0.79220779\n428    0.75000000\n429    0.83116883\n430    0.48888889\n431    0.94366197\n432    0.94252874\n433    0.96593186\n434    0.97797357\n435    0.99637681\n436    0.61428571\n437    0.90540541\n438    0.81904762\n439    0.65000000\n440    0.66666667\n441    0.59002770\n442    0.92592593\n443    0.72413793\n444    0.79583333\n445    0.81168831\n446    0.86013986\n447    0.00000000\n448    0.84313725\n449    0.93750000\n450    0.83969466\n451    0.98543689\n452    0.78061224\n453    0.97058824\n454    0.97752809\n455    0.98000000\n456    0.62068966\n457    0.89312977\n458    0.66666667\n459    0.84870849\n460    0.83200000\n461    0.64864865\n462    0.66666667\n463    1.00000000\n464    0.49066667\n465    0.42391304\n466    0.92372881\n467    0.84090909\n468    0.92000000\n469    0.87500000\n470    0.52380952\n471    0.84210526\n472    0.97297297\n473    0.00000000\n474    0.96571429\n475    0.00000000\n476    0.81000000\n477    0.77777778\n478    0.97211155\n479    0.60902256\n480    0.87647059\n481    1.00000000\n482    0.84000000\n483    1.00000000\n484    0.77173913\n485    0.98412698\n486    0.96875000\n487    0.56645570\n488    0.98620690\n489    0.94791667\n490    0.92372881\n491    0.83333333\n492    0.00000000\n493    0.44910180\n494    0.71428571\n495    0.79508197\n496    0.96891192\n497    1.00000000\n498    0.47272727\n499    0.50000000\n500    0.65000000\n501    0.92187500\n502    0.53220339\n503    0.97572816\n504    0.93893130\n505    0.53043478\n506    0.32894737\n507    0.00000000\n508    0.93684211\n509    0.00000000\n510    0.88372093\n511    0.90857143\n512    0.00000000\n513    1.00000000\n514    0.91608392\n515    0.84375000\n516    0.85263158\n517    0.99324324\n518    0.91891892\n519    0.38000000\n520    0.71034483\n521    0.83647799\n522    0.80722892\n523    0.84782609\n524    0.25581395\n525    0.00000000\n526    0.00000000\n527    0.77391304\n528    0.47058824\n529    0.93243243\n530    0.94565217\n531    0.53333333\n532    0.67647059\n533    0.14814815\n534    0.51898734\n535    0.96969697\n536    0.48717949\n537    0.09090909\n538    0.85294118\n539    0.65306122\n540    0.67045455\n541    0.39285714\n542    1.00000000\n543    0.64285714\n544    0.36363636\n545    0.52747253\n546    0.56626506\n547    0.87500000\n548    0.80346821\n549    0.95200000\n550    0.77722772\n551    0.39682540\n552    0.56060606\n553    0.54077253\n554    0.58158996\n555    0.44247788\n556    0.80813953\n557    0.79934211\n558    0.80519481\n559    0.62275449\n560    0.72872340\n561    0.82352941\n562    0.56451613\n563    0.71604938\n564    0.45652174\n565    0.47500000\n566    0.87000000\n567    0.95689655\n568    0.94623656\n569    0.43956044\n570    0.64583333\n571    1.00000000\n572    0.85135135\n573    0.75757576\n574    0.26315789\n575    0.79213483\n576    0.32363636\n577    0.49019608\n578    0.75384615\n579    0.15789474\n580    0.42528736\n581    0.91208791\n582    0.66666667\n583    0.83783784\n584    0.65000000\n585    0.85365854\n586    0.96000000\n587    0.55405405\n588    0.69230769\n589    0.42372881\n590    1.00000000\n591    0.52702703\n592    0.60869565\n593    0.71823204\n594    0.46464646\n595    0.48648649\n596    0.45945946\n597    0.60000000\n598    0.72807018\n599    0.77037037\n600    0.87577640\n601    0.28995434\n602    0.15384615\n603    0.50000000\n604    1.00000000\n605    0.09090909\n606    0.98550725\n607    0.39795918\n608    0.76576577\n609    0.48953975\n610    0.68339768\n611    0.62745098\n612    0.76666667\n613    0.50000000\n614    0.70000000\n615    0.35897436\n616    0.39024390\n617    0.38983051\n618    0.39393939\n619    0.42424242\n620    0.94666667\n621    0.72727273\n622    0.60869565\n623    0.65957447\n624    0.52272727\n625    0.83720930\n626    0.51612903\n627    0.68674699\n628    0.72727273\n629    0.79365079\n630    0.93181818\n631    0.67741935\n632    0.70588235\n633    0.78688525\n634    0.83977901\n635    0.79577465\n636    0.54794521\n637    0.76470588\n638    0.72727273\n639    0.26562500\n640    0.77910448\n641    0.78723404\n642    0.47738693\n643    0.36363636\n644    0.85090909\n645    0.81739130\n646    0.98611111\n647    0.51594203\n648    0.95238095\n649    1.00000000\n650    0.89000000\n651    0.68181818\n652    0.68211921\n653    0.95604396\n654    0.98192771\n655    0.94444444\n656    0.48684211\n657    0.99459459\n658    0.87111111\n659    0.95454545\n660    0.93506494\n661    0.93023256\n662    0.94409938\n663    0.51612903\n664    0.67586207\n665    0.77064220\n666    0.70270270\n667    0.95412844\n668    0.79220779\n669    1.00000000\n670    0.76000000\n671    0.64754098\n672    0.96153846\n673    0.91262136\n674    0.97560976\n675    0.85542169\n676    0.88888889\n677    0.42289720\n678    0.98089172\n679    0.97073171\n680    0.73394495\n681    0.96414343\n682    0.57142857\n683    0.95000000\n684    0.92493947\n685    0.87878788\n686    0.88000000\n687    1.00000000\n688    0.09677419\n689    0.99175258\n690    0.90243902\n691    0.90613718\n692    0.98333333\n693    0.73770492\n694    0.85185185\n695    0.93750000\n696    0.96875000\n697    0.66666667\n698    0.98426966\n699    0.81666667\n700    0.87700535\n701    0.96629213\n702    0.92187500\n703    0.80597015\n704    0.57142857\n705    0.94444444\n706    0.98195489\n707    1.00000000\n708    0.93984962\n709    0.88888889\n710    1.00000000\n711    0.98492462\n712    0.99354839\n713    0.24852071\n714    0.90090090\n715    0.27272727\n716    0.29523810\n717    0.27272727\n718    0.72222222\n719    0.73584906\n720    0.44000000\n721    0.65909091\n722    0.85714286\n723    0.16666667\n724    0.41772152\n725    0.74444444\n726    0.77419355\n727    0.77777778\n728    0.25000000\n729    0.50000000\n730    0.40776699\n731    0.94701987\n732    0.16666667\n733    0.64583333\n734    0.51785714\n735    0.51528384\n736    0.80000000\n737    0.63636364\n738    0.66250000\n739    0.16000000\n740    0.55952381\n741    0.86419753\n742    0.75490196\n743    0.73869347\n744    0.90545455\n745    0.53333333\n746    0.75000000\n747    0.00000000\n748    0.91428571\n749    0.53932584\n750    0.94444444\n751    0.74074074\n752    0.96610169\n753    0.87050360\n754    0.69512195\n755    1.00000000\n756    0.94957983\n757    0.63076923\n758    0.40412979\n759    1.00000000\n760    0.94690265\n761    0.92307692\n762    0.59259259\n763    0.69230769\n764    0.92307692\n765    0.81407035\n766    1.00000000\n767    0.95238095\n768    0.95508274\n769    0.98130841\n770    0.75064267\n771    0.96865204\n772    0.87368421\n773    0.81395349\n774    0.98571429\n\n\n\ncluster_vars.cor = cor(clustv2)\ncluster_vars.cor\n\n                     wpt functional wpt non-functional pct_functional\nwpt functional            1.0000000          0.4475400      0.4817609\nwpt non-functional        0.4475400          1.0000000     -0.1136198\npct_functional            0.4817609         -0.1136198      1.0000000\npct_non-functional       -0.2636365          0.3833730     -0.4827042\npct_unknown              -0.2320828         -0.1684556     -0.5209396\npct_handpump              0.5038236          0.3165643      0.4714837\npct_usagecapless1000      0.4162994          0.2633216      0.2269378\npct_usagecap1000         -0.3778650         -0.2047671     -0.1135819\npct_rural                 0.1925452          0.2202927      0.1015811\npct_qualityok             0.3470112          0.2012806      0.6497247\n                     pct_non-functional pct_unknown pct_handpump\nwpt functional              -0.26363647  -0.2320828   0.50382363\nwpt non-functional           0.38337304  -0.1684556   0.31656426\npct_functional              -0.48270425  -0.5209396   0.47148373\npct_non-functional           1.00000000  -0.3181339  -0.09399316\npct_unknown                 -0.31813394   1.0000000  -0.34070417\npct_handpump                -0.09399316  -0.3407042   1.00000000\npct_usagecapless1000        -0.25724412   0.1640389   0.82782919\npct_usagecap1000             0.36138355  -0.1322355  -0.76074385\npct_rural                    0.21058043  -0.1544148   0.31989334\npct_qualityok                0.09442245  -0.6445270   0.41561642\n                     pct_usagecapless1000 pct_usagecap1000  pct_rural\nwpt functional                 0.41629937      -0.37786502  0.1925452\nwpt non-functional             0.26332163      -0.20476713  0.2202927\npct_functional                 0.22693784      -0.11358193  0.1015811\npct_non-functional            -0.25724412       0.36138355  0.2105804\npct_unknown                    0.16403885      -0.13223545 -0.1544148\npct_handpump                   0.82782919      -0.76074385  0.3198933\npct_usagecapless1000           1.00000000      -0.90557046  0.2771644\npct_usagecap1000              -0.90557046       1.00000000 -0.1552130\npct_rural                      0.27716436      -0.15521298  1.0000000\npct_qualityok                  0.09872844       0.05664832  0.2069775\n                     pct_qualityok\nwpt functional          0.34701120\nwpt non-functional      0.20128056\npct_functional          0.64972471\npct_non-functional      0.09442245\npct_unknown            -0.64452698\npct_handpump            0.41561642\npct_usagecapless1000    0.09872844\npct_usagecap1000        0.05664832\npct_rural               0.20697753\npct_qualityok           1.00000000\n\n\nHow to change the correlation coefficient in the plot and how to change the labels size.\nhttps://statisticsglobe.com/change-font-size-corrplot-r\n\ncorrplot.mixed(cluster_vars.cor,\n               lower ='ellipse',\n               upper= 'number',\n               tl.pos = 'lt',\n               diag = 'l',\n               tl.col='black',\n               number.cex = 1.75,\n               tl.cex = 2)\n\n\n\n\nWhen the ellipse is very thin, correlation is strong. the direction of the ellipse tells us the sign of correlation. From the plot above, we can see that pct_usagecapless1000 is strongly correlated to pct_usagecap1000, with r value -0.91. We will be dropping the variable pct_usagecapless1000."
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#hierarchy-cluster-analysis",
    "href": "Take-home_Ex02/Take-home_Ex02.html#hierarchy-cluster-analysis",
    "title": "Take-home_Ex02",
    "section": "3 Hierarchy Cluster Analysis",
    "text": "3 Hierarchy Cluster Analysis\n\n3.1 Extracting clustering variables\nThe code chunk below will be used to extract the clustering variables from the nga_wp2 simple feature object into data.frame. The pct_usagecapless1000 variable is intentionally left out as it is highly correlated with “pct_usagecap1000”. The shapeName column is also extracted as it contains the 774 Local Government Areas. After cleaning the repeated LGA names, this column will be converted to Row Id later for plotting map.\n\ncluster_vars <- nga_wp2 %>%\n  select(\"shapeName\", \"wpt functional\", \"wpt non-functional\", \"pct_functional\", \"pct_handpump\", \"pct_non-functional\", \"pct_qualityok\", \"pct_rural\",  \"pct_usagecap1000\") %>% \n  st_set_geometry(NULL)\n\nhead(cluster_vars,10)\n\n        shapeName wpt functional wpt non-functional pct_functional pct_handpump\n1       Aba North              7                  9      0.4117647   0.11764706\n2       Aba South             29                 35      0.4084507   0.09859155\n3          Abadam              0                  0      0.0000000   0.00000000\n4           Abaji             23                 34      0.4035088   0.40350877\n5            Abak             23                 25      0.4791667   0.08333333\n6       Abakaliki             82                 42      0.3519313   0.43776824\n7  Abeokuta North             16                 15      0.4705882   0.14705882\n8  Abeokuta South             72                 33      0.6050420   0.16806723\n9             Abi             79                 62      0.5197368   0.59868421\n10    Aboh-Mbaise             18                 26      0.2727273   0.01515152\n   pct_non-functional pct_qualityok  pct_rural pct_usagecap1000\n1           0.5294118     0.7647059 0.00000000        0.8235294\n2           0.4929577     0.8028169 0.05633803        0.8732394\n3           0.0000000     0.0000000 0.00000000        0.0000000\n4           0.5964912     0.9824561 0.84210526        0.5964912\n5           0.5208333     0.7291667 0.83333333        0.9166667\n6           0.1802575     0.4206009 0.87553648        0.0944206\n7           0.4411765     0.7352941 0.20588235        0.7647059\n8           0.2773109     0.8655462 0.00000000        0.7058824\n9           0.4078947     0.5657895 0.95394737        0.3289474\n10          0.3939394     0.5303030 0.72727273        0.6515152\n\n\n\nclass(cluster_vars)\n\n[1] \"data.frame\"\n\n\nTAKE NOTE: input of hclust() function must strictly contain only the clustering variables we need. Cannot have ‘shapeName’ column. Is it more for the dist() function used to compute the proximity matrix instead?\nNext, we need to change the rows ID by township name instead of row number by using the code chunk below. However, Row Id cannot have duplicates, thus we have to ensure the shapeName rows are all unique. We will perform the similar transformation as we have done for ‘clean_adm2’ column in the wp_nga shapefile earlier.\n\ncluster_vars$shapeName[duplicated(cluster_vars$shapeName)]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nFirst locate the row Ids of the above five (x2) LGAs and rename the second LGA with prefix ‘_2’ just to make all LGAs unique.\n\ncluster_vars[95,1] <- 'Bassa_2'\ncluster_vars[305,1] <- 'Ifelodun_2'\ncluster_vars[356,1] <- 'Irepodun_2'\ncluster_vars[520,1] <- 'Nasarawa_2'\ncluster_vars[547,1] <- 'Obi_2'\ncluster_vars[694,1] <- 'Surulere_2'\n\nSet the shapeName column as ROW ID column\n\nrow.names(cluster_vars) <- cluster_vars$\"shapeName\"\nhead(cluster_vars, 10)\n\n                    shapeName wpt functional wpt non-functional pct_functional\nAba North           Aba North              7                  9      0.4117647\nAba South           Aba South             29                 35      0.4084507\nAbadam                 Abadam              0                  0      0.0000000\nAbaji                   Abaji             23                 34      0.4035088\nAbak                     Abak             23                 25      0.4791667\nAbakaliki           Abakaliki             82                 42      0.3519313\nAbeokuta North Abeokuta North             16                 15      0.4705882\nAbeokuta South Abeokuta South             72                 33      0.6050420\nAbi                       Abi             79                 62      0.5197368\nAboh-Mbaise       Aboh-Mbaise             18                 26      0.2727273\n               pct_handpump pct_non-functional pct_qualityok  pct_rural\nAba North        0.11764706          0.5294118     0.7647059 0.00000000\nAba South        0.09859155          0.4929577     0.8028169 0.05633803\nAbadam           0.00000000          0.0000000     0.0000000 0.00000000\nAbaji            0.40350877          0.5964912     0.9824561 0.84210526\nAbak             0.08333333          0.5208333     0.7291667 0.83333333\nAbakaliki        0.43776824          0.1802575     0.4206009 0.87553648\nAbeokuta North   0.14705882          0.4411765     0.7352941 0.20588235\nAbeokuta South   0.16806723          0.2773109     0.8655462 0.00000000\nAbi              0.59868421          0.4078947     0.5657895 0.95394737\nAboh-Mbaise      0.01515152          0.3939394     0.5303030 0.72727273\n               pct_usagecap1000\nAba North             0.8235294\nAba South             0.8732394\nAbadam                0.0000000\nAbaji                 0.5964912\nAbak                  0.9166667\nAbakaliki             0.0944206\nAbeokuta North        0.7647059\nAbeokuta South        0.7058824\nAbi                   0.3289474\nAboh-Mbaise           0.6515152\n\n\nNotice that the row number has been replaced into the shapeName variable.\nNow, we will delete the shapeName field by using the code chunk below.\n‘nga_hclust_var’ is a data frame containing all clustering variables (shapeName as Row ID) before standardisation.\n\nnga_hclust_var <- select(cluster_vars, c(2:9))\nhead(nga_hclust_var, 10)\n\n               wpt functional wpt non-functional pct_functional pct_handpump\nAba North                   7                  9      0.4117647   0.11764706\nAba South                  29                 35      0.4084507   0.09859155\nAbadam                      0                  0      0.0000000   0.00000000\nAbaji                      23                 34      0.4035088   0.40350877\nAbak                       23                 25      0.4791667   0.08333333\nAbakaliki                  82                 42      0.3519313   0.43776824\nAbeokuta North             16                 15      0.4705882   0.14705882\nAbeokuta South             72                 33      0.6050420   0.16806723\nAbi                        79                 62      0.5197368   0.59868421\nAboh-Mbaise                18                 26      0.2727273   0.01515152\n               pct_non-functional pct_qualityok  pct_rural pct_usagecap1000\nAba North               0.5294118     0.7647059 0.00000000        0.8235294\nAba South               0.4929577     0.8028169 0.05633803        0.8732394\nAbadam                  0.0000000     0.0000000 0.00000000        0.0000000\nAbaji                   0.5964912     0.9824561 0.84210526        0.5964912\nAbak                    0.5208333     0.7291667 0.83333333        0.9166667\nAbakaliki               0.1802575     0.4206009 0.87553648        0.0944206\nAbeokuta North          0.4411765     0.7352941 0.20588235        0.7647059\nAbeokuta South          0.2773109     0.8655462 0.00000000        0.7058824\nAbi                     0.4078947     0.5657895 0.95394737        0.3289474\nAboh-Mbaise             0.3939394     0.5303030 0.72727273        0.6515152\n\n\n\n\n3.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is biased to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n3.2.1 Min-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to standardise the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\nI have chosen min-max standardisation as ‘wpt functional’ and ‘wpt non-functional’ are the only two variables that are not in percentage. This function will not change the values of the other 6 variables.\n\nnga_hclust_var.std <- normalize(nga_hclust_var)\nsummary(nga_hclust_var.std)\n\n wpt functional    wpt non-functional pct_functional    pct_handpump   \n Min.   :0.00000   Min.   :0.00000    Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.02261   1st Qu.:0.04406    1st Qu.:0.3261   1st Qu.:0.1670  \n Median :0.06051   Median :0.12230    Median :0.4741   Median :0.5099  \n Mean   :0.08957   Mean   :0.14962    Mean   :0.4984   Mean   :0.4873  \n 3rd Qu.:0.11669   3rd Qu.:0.21853    3rd Qu.:0.6699   3rd Qu.:0.7778  \n Max.   :1.00000   Max.   :1.00000    Max.   :1.0000   Max.   :1.0000  \n pct_non-functional pct_qualityok      pct_rural      pct_usagecap1000\n Min.   :0.0000     Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2105     1st Qu.:0.5425   1st Qu.:0.5727   1st Qu.:0.1220  \n Median :0.3505     Median :0.7706   Median :0.8645   Median :0.3127  \n Mean   :0.3592     Mean   :0.7052   Mean   :0.7271   Mean   :0.3754  \n 3rd Qu.:0.5076     3rd Qu.:0.9209   3rd Qu.:1.0000   3rd Qu.:0.5771  \n Max.   :1.0000     Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\nclass(nga_hclust_var.std)\n\n[1] \"data.frame\"\n\n\n\n\n3.3.2 Visualising the standardised clustering variables\n\nr1 <- ggplot(data = nga_hclust_var,\n            aes(x=`wpt functional`)) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green')\n\ns1 <- ggplot (data= nga_hclust_var.std, aes(x=`wpt functional`)) +\n    geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green') +\n  ggtitle('Min-Max standardisation')\n\nr2 <- ggplot(data = nga_hclust_var,\n            aes(x=`wpt non-functional`)) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green')\n\ns2 <- ggplot (data= nga_hclust_var.std, aes(x=`wpt non-functional`)) +\n    geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light green') +\n  ggtitle('Min-Max standardisation')\n\nggarrange (r1,s1, r2, s2,\n          ncol = 2, \n          nrow = 2)\n\n\n\n\n\n\n3.3 Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nI can try out different distance methods if I have the time.\n\nproxmat <- dist(nga_hclust_var.std, method = 'euclidean')\n\n\nclass(proxmat)\n\n[1] \"dist\"\n\n\n\n\n3.4 Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\nhclust() needs two inputs: proximty matrix and method for the hierachical clustering that we are using.\nHow we transformed the data for hierarchical clustering\nclustv2 (all numerical variables only) -> cluster_vars (selected clustering variables with shapeName as Row ID) -> nga_hclust_var (same as cluster_vars without shapeName col) -> nga_hclust_var.std (standardised) -> proxmat (distance matrix for h-clustering)\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\n\nstr(hclust_ward)\n\nList of 7\n $ merge      : int [1:773, 1:2] -3 -86 -241 -250 -252 -261 -400 -406 -447 -473 ...\n $ height     : num [1:773] 0 0 0 0 0 0 0 0 0 0 ...\n $ order      : int [1:774] 100 489 481 687 274 710 50 128 243 394 ...\n $ labels     : chr [1:774] \"Aba North\" \"Aba South\" \"Abadam\" \"Abaji\" ...\n $ method     : chr \"ward.D\"\n $ call       : language hclust(d = proxmat, method = \"ward.D\")\n $ dist.method: chr \"euclidean\"\n - attr(*, \"class\")= chr \"hclust\"\n\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\ncex. A numerical value giving the amount by which plotting text and symbols should be magnified relative to the default. cex = 0.6 means to scale down to 60% (when knitting to html) to prevent overlapping Base R plot will know to plot a dendrogram without specifying the type, because its a hclust object?\n\nplot(hclust_ward, cex = 0.3)\n\n\n\n\n\n\n\n\n\n3.5 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients (ac) of all hierarchical clustering algorithms.\nBreaking down the big formula into smaller\n\nattributes(agnes(nga_hclust_var.std, method = 'average'))\n\n$names\n[1] \"order\"     \"height\"    \"ac\"        \"merge\"     \"diss\"      \"call\"     \n[7] \"method\"    \"order.lab\" \"data\"     \n\n$class\n[1] \"agnes\" \"twins\"\n\n\n\nagnes(nga_hclust_var.std, method = 'average')$ac\n\n[1] 0.8898868\n\n\nDefine a function ac, this function input is m, which inputs various clustering algorithms into the function agnes(). Next, use the map_dbl function to map the the m into agnes()\n$ac means to call the ‘agglomerative coeeficients’ component of agnes function (see above)\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(nga_hclust_var.std, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8898868 0.8085012 0.9280459 0.9879530 \n\n\nagnes() calculates an index to measure level of homogeneity between different methods of hclustering.\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\n\n\n3.6 Determining Optimal Clusters\n\n3.6.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\nK.max - maximum number of clusters to consider, minimum 2\nB = integer, number of Monte Carlo (‘bootstrap’) samples\nnstart <- isnt this only applicable to Kmeans clustering, is it about initialising a centroid?\n\nset.seed(12345)\ngap_stat <- clusGap(nga_hclust_var.std,\n                    FUN = hcut,\n                    nstart = 25,\n                    K.max= 20, \n                    B= 50)\n\n#print the results\nprint(gap_stat, method = 'firstmax')\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = nga_hclust_var.std, FUNcluster = hcut, K.max = 20, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..20; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 20\n          logW   E.logW       gap      SE.sim\n [1,] 5.189961 5.773600 0.5836386 0.006856363\n [2,] 5.007187 5.676210 0.6690230 0.012601046\n [3,] 4.918676 5.617416 0.6987400 0.008210811\n [4,] 4.850604 5.569268 0.7186646 0.008940640\n [5,] 4.760962 5.532011 0.7710487 0.010317574\n [6,] 4.713693 5.500828 0.7871351 0.009983877\n [7,] 4.671059 5.473503 0.8024442 0.010150944\n [8,] 4.627567 5.449304 0.8217371 0.009763610\n [9,] 4.585810 5.427619 0.8418096 0.009638030\n[10,] 4.552949 5.408230 0.8552816 0.009360992\n[11,] 4.525789 5.390233 0.8644435 0.008945314\n[12,] 4.504572 5.373717 0.8691448 0.008245354\n[13,] 4.485480 5.358492 0.8730117 0.007626385\n[14,] 4.468447 5.344323 0.8758756 0.007377525\n[15,] 4.445435 5.331253 0.8858182 0.007076816\n[16,] 4.427117 5.318937 0.8918192 0.006809362\n[17,] 4.409696 5.307141 0.8974445 0.006756812\n[18,] 4.392931 5.296011 0.9030797 0.006776031\n[19,] 4.377965 5.285200 0.9072352 0.006861416\n[20,] 4.363827 5.274823 0.9109960 0.006796213\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nFrom the chart above and for simplicity sake, the optimal cluster selected is 5.\nBelow: Obtain the optimal number of cluster using ‘nga_hclust_var’ data frame, before standardisation.\n\nset.seed(12345)\ngap_stat2 <- clusGap(nga_hclust_var,\n                    FUN = hcut,\n                    nstart = 25,\n                    K.max= 20, \n                    B= 50)\n\n#print the results\nprint(gap_stat2, method = 'firstmax')\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = nga_hclust_var, FUNcluster = hcut, K.max = 20, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..20; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW    E.logW       gap     SE.sim\n [1,] 9.759074 10.929298 1.1702238 0.01229123\n [2,] 9.530908 10.478896 0.9479881 0.03772118\n [3,] 9.233834 10.253163 1.0193288 0.02461054\n [4,] 9.174787 10.135407 0.9606200 0.01609944\n [5,] 8.979842 10.037653 1.0578112 0.01328087\n [6,] 8.904400  9.944226 1.0398260 0.01495424\n [7,] 8.875064  9.856619 0.9815551 0.01658325\n [8,] 8.818549  9.780014 0.9614652 0.01588492\n [9,] 8.731682  9.711205 0.9795230 0.01642536\n[10,] 8.675585  9.650595 0.9750107 0.01724378\n[11,] 8.646438  9.598268 0.9518296 0.01772805\n[12,] 8.536957  9.550322 1.0133656 0.01719008\n[13,] 8.485661  9.505244 1.0195836 0.01664787\n[14,] 8.440565  9.463681 1.0231159 0.01511373\n[15,] 8.423202  9.424162 1.0009599 0.01412621\n[16,] 8.399895  9.387479 0.9875847 0.01388992\n[17,] 8.375068  9.352196 0.9771275 0.01360228\n[18,] 8.339178  9.318625 0.9794470 0.01349733\n[19,] 8.289147  9.287377 0.9982300 0.01343451\n[20,] 8.225245  9.257990 1.0327456 0.01349828\n\n\n\nfviz_gap_stat(gap_stat2)\n\n\n\n\nBefore data normalisation, the optimal number of clusters is also 5, so it re-confirms that the optimal cluster is 5.\n\n\n\n3.7 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hierarchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n3.7.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make the heatmap.\n\nnga_hclust_var_std_mat <- as.matrix(nga_hclust_var.std)\nclass(nga_hclust_var_std_mat)\n\n[1] \"matrix\" \"array\" \n\n\n\n\n3.7.2 Plotting interactive cluster heatmap using heatmaply()\n\n# first perform min-max normalisation\nheatmaply(normalize(nga_hclust_var_std_mat),\n          Colv=NA,\n          dist_method = 'euclidean',\n          hclust_method = 'ward.D',\n          seriate = 'OLO',\n          colors= Blues,\n          k_row = 5,\n          margins = c(NA, 200, 60, NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main = 'Geographic Segmentation of Nigeria LGAs by water point indicators',\n          xlab= 'water point indicators',\n          ylab = 'Local Government Area of Nigeria'\n)\n\n\n\n\n\n\n\n\n3.8 Mapping the clusters formed\nWith closed examination of the dendrogram above, we have decided to retain five clusters.\ncutree() of R Base will be used in the code chunk below to derive a 5-cluster model.\nEach region will be assigned an integer representing their cluster number.\n\ncutree(hclust_ward, k=5)\n\n         Aba North          Aba South             Abadam              Abaji \n                 1                  1                  2                  3 \n              Abak          Abakaliki     Abeokuta North     Abeokuta South \n                 4                  3                  1                  1 \n               Abi        Aboh-Mbaise         Abua/Odual    Abuja Municipal \n                 3                  2                  3                  3 \n             Adavi                Ado        Ado-Odo/Ota          Ado Ekiti \n                 1                  3                  3                  1 \n            Afijio       Afikpo North       Afikpo South              Agaie \n                 3                  3                  3                  1 \n             Agatu              Agege             Aguata             Agwara \n                 3                  1                  2                  3 \n     Ahiazu-Mbaise        Ahoada East        Ahoada West           Aiyedade \n                 1                  4                  1                  3 \n          Aiyedire Aiyekire (Gbonyin)           Ajaokuta   Ajeromi-Ifelodun \n                 3                  3                  3                  1 \n            Ajingi            Akamkpa           Akinyele               Akko \n                 5                  3                  3                  3 \n         Akoko-Edo   Akoko North East   Akoko North West   Akoko South East \n                 4                  1                  3                  3 \n  Akoko South West           Akpabuyo         Akuku Toru        Akure North \n                 3                  3                  2                  3 \n       Akure South            Akwanga             Albasu             Aleiro \n                 1                  3                  5                  3 \n          Alimosho           Alkaleri       Amuwo-Odofin       Anambra East \n                 1                  5                  1                  3 \n      Anambra West            Anaocha             Andoni             Aninri \n                 3                  1                  4                  2 \n     Aniocha North      Aniocha South               Anka              Ankpa \n                 4                  3                  5                  3 \n               Apa              Apapa          Ardo-Kola        Arewa-Dandi \n                 3                  2                  5                  3 \n           Argungu          Arochukwu                Asa         Asari-Toru \n                 3                  2                  5                  1 \n        Askira/Uba     Atakumosa East     Atakumosa West              Atiba \n                 3                  3                  3                  2 \n            Atigbo              Augie               Auyo                Awe \n                 3                  5                  5                  3 \n              Awgu         Awka North         Awka South           Ayamelum \n                 2                  2                  2                  2 \n            Babura            Badagry               Bade             Bagudo \n                 5                  3                  3                  5 \n            Bagwai            Bakassi             Bakori             Bakura \n                 5                  2                  5                  3 \n           Balanga               Bali               Bama       Barikin Ladi \n                 3                  5                  1                  3 \n           Baruten              Bassa            Bassa_2         Batagarawa \n                 5                  3                  3                  3 \n           Batsari             Bauchi              Baure               Bayo \n                 5                  5                  5                  5 \n            Bebeji            Bekwara              Bende              Biase \n                 5                  3                  2                  3 \n             Bichi               Bida            Billiri            Bindawa \n                 5                  1                  3                  5 \n             Binji           Biriniwa         Birni Kudu       Birnin-Gwari \n                 3                  5                  5                  3 \n      Birnin Kebbi      Birnin Magaji                Biu            Bodinga \n                 3                  5                  1                  3 \n            Bogoro               Boki             Bokkos         Boluwaduro \n                 5                  3                  3                  3 \n            Bomadi              Bonny              Borgu             Boripe \n                 3                  1                  5                  1 \n             Bosso              Brass               Buji           Bukkuyum \n                 5                  4                  5                  5 \n           Bungudu            Bunkure              Bunza            Bursari \n                 5                  5                  3                  3 \n            Buruku             Burutu              Bwari  Calabar-Municipal \n                 3                  2                  3                  1 \n     Calabar South          Chanchaga          Charanchi             Chibok \n                 1                  1                  5                  3 \n            Chikun               Dala           Damaturu             Damban \n                 3                  1                  1                  3 \n          Dambatta             Damboa           Dan Musa              Dandi \n                 5                  1                  3                  3 \n           Dandume        Dange-Shuni              Danja             Darazo \n                 5                  3                  3                  3 \n              Dass              Daura       Dawakin Kudu       Dawakin Tofa \n                 5                  1                  5                  5 \n            Degema             Dekina              Demsa              Dikwa \n                 2                  4                  5                  1 \n            Doguwa               Doma              Donga              Dukku \n                 3                  3                  3                  3 \n         Dunukofia              Dutse              Dutsi          Dutsin-Ma \n                 1                  5                  3                  5 \n     Eastern Obolo             Ebonyi              Edati          Ede North \n                 4                  3                  3                  1 \n         Ede South                Edu               Efon       Egbado North \n                 3                  3                  3                  2 \n      Egbado South             Egbeda           Egbedore               Egor \n                 1                  1                  1                  1 \n       Ehime-Mbano             Ejigbo           Ekeremor               Eket \n                 1                  3                  4                  4 \n             Ekiti         Ekiti East   Ekiti South West         Ekiti West \n                 3                  3                  1                  3 \n          Ekwusigo              Eleme             Emohua              Emure \n                 2                  3                  5                  1 \n        Enugu East        Enugu North        Enugu South                Epe \n                 1                  1                  2                  3 \n      Esan Central    Esan North East    Esan South East          Esan West \n                 4                  4                  4                  4 \n           Ese-Odo        Esit - Eket        Essien Udim              Etche \n                 4                  3                  4                  4 \n      Ethiope East       Ethiope West            Eti-Osa          Etim Ekpo \n                 4                  4                  1                  4 \n            Etinan     Etsako Central        Etsako East        Etsako West \n                 4                  4                  4                  1 \n             Etung            Ewekoro             Ezeagu         Ezinihitte \n                 3                  2                  2                  2 \n        Ezza North         Ezza South              Fagge              Fakai \n                 3                  3                  1                  5 \n           Faskari               Fika             Fufore           Funakaye \n                 5                  3                  3                  3 \n              Fune             Funtua           Gabasawa               Gada \n                 3                  3                  5                  3 \n          Gagarawa             Gamawa            Ganjuwa              Ganye \n                 5                  5                  5                  5 \n             Garki              Garko       Garum Mallam            Gashaka \n                 5                  5                  5                  3 \n            Gassol               Gaya              Gbako              Gboko \n                 3                  5                  3                  3 \n            Geidam             Gezawa              Giade              Girei \n                 2                  5                  5                  3 \n              Giwa             Gokana              Gombe              Gombi \n                 3                  1                  1                  5 \n           Goronyo              Gubio               Gudu              Gujba \n                 3                  2                  3                  2 \n            Gulani               Guma              Gumel              Gummi \n                 4                  3                  3                  5 \n            Gurara               Guri              Gusau              Guyuk \n                 3                  5                  5                  3 \n          Guzamala          Gwadabawa         Gwagwalada              Gwale \n                 2                  3                  3                  1 \n            Gwandu             Gwaram             Gwarzo          Gwer East \n                 3                  5                  5                  3 \n         Gwer West              Gwiwa              Gwoza            Hadejia \n                 3                  5                  2                  1 \n             Hawul               Hong       Ibadan North  Ibadan North East \n                 3                  5                  1                  1 \n Ibadan North West  Ibadan South East  Ibadan South West              Ibaji \n                 1                  1                  1                  3 \n   Ibarapa Central       Ibarapa East      Ibarapa North        Ibeju/Lekki \n                 1                  1                  1                  4 \n             Ibeno    Ibesikpo Asutan                Ibi        Ibiono Ibom \n                 4                  4                  5                  4 \n              Idah             Idanre       Ideato North       Ideato South \n                 1                  3                  2                  2 \n     Idemili North      Idemili South                Ido            Ido-Osi \n                 2                  2                  3                  2 \n       Ifako-Ijaye        Ife Central           Ife East          Ife North \n                 1                  1                  1                  3 \n         Ife South            Ifedayo            Ifedore           Ifelodun \n                 3                  3                  3                  3 \n        Ifelodun_2                Ifo              Igabi    Igalamela-Odolu \n                 1                  2                  3                  4 \n        Igbo-Etiti     Igbo-Eze North     Igbo-Eze South            Igueben \n                 2                  2                  2                  4 \n            Ihiala       Ihitte/Uboma         Ijebu East        Ijebu North \n                 1                  2                  2                  2 \n  Ijebu North East          Ijebu Ode              Ijero              Ijumu \n                 2                  1                  3                  3 \n               Ika     Ika North East          Ika South              Ikara \n                 4                  3                  4                  5 \n           Ikeduru              Ikeja             Ikenne              Ikere \n                 2                  1                  2                  1 \n             Ikole               Ikom              Ikono            Ikorodu \n                 1                  3                  4                  1 \n        Ikot Abasi        Ikot Ekpene        Ikpoba-Okha            Ikwerre \n                 4                  4                  1                  3 \n              Ikwo            Ikwuano                Ila              Ilaje \n                 3                  2                  1                  4 \n Ile-Oluji-Okeigbo          Ilejemeji        Ilesha East        Ilesha West \n                 1                  3                  1                  1 \n            Illela        Ilorin East       Ilorin South        Ilorin West \n                 3                  3                  1                  1 \n        Imeko-Afon             Ingawa                Ini             Ipokia \n                 2                  5                  4                  4 \n             Irele              Irepo           Irepodun         Irepodun_2 \n                 4                  1                  3                  1 \n Irepodun/Ifelodun            Irewole                Isa           Ise/Orun \n                 3                  1                  3                  3 \n            Iseyin            Ishielu            Isi-Uzo  Isiala-Ngwa North \n                 2                  3                  3                  2 \n Isiala-Ngwa South       Isiala Mbano               Isin         Isiukwuato \n                 4                  4                  3                  4 \n            Isokan        Isoko North        Isoko South                Isu \n                 1                  4                  4                  2 \n        Itas/Gadau          Itesiwaju                Itu                Ivo \n                 5                  2                  4                  2 \n           Iwajowa                Iwo               Izzi               Jaba \n                 3                  1                  3                  3 \n              Jada              Jahun            Jakusko            Jalingo \n                 3                  5                  3                  1 \n          Jama'are               Jega             Jema'a               Jere \n                 5                  3                  3                  1 \n             Jibia           Jos East          Jos North          Jos South \n                 5                  3                  1                  1 \n        Kabba/Bunu               Kabo             Kachia       Kaduna North \n                 3                  5                  5                  1 \n      Kaduna South        Kafin Hausa              Kafur               Kaga \n                 1                  5                  5                  2 \n           Kagarko             Kaiama              Kaita             Kajola \n                 3                  5                  5                  1 \n            Kajuru         Kala/Balge              Kalgo           Kaltungo \n                 5                  2                  3                  3 \n             Kanam            Kankara              Kanke             Kankia \n                 3                  3                  3                  5 \n    Kano Municipal           Karasuwa             Karaye       Karim-Lamido \n                 1                  3                  3                  3 \n              Karu            Katagum             Katcha            Katsina \n                 3                  5                  5                  1 \n       Katsina-Ala            Kaugama              Kaura       Kaura Namoda \n                 3                  5                  3                  5 \n             Kauru            Kazaure              Keana              Kebbe \n                 5                  3                  3                  3 \n             Keffi              Khana             Kibiya              Kirfi \n                 1                  4                  5                  3 \n      Kiri Kasamma               Kiru             Kiyawa               Kogi \n                 3                  5                  5                  3 \n        Koko/Besse             Kokona   Kolokuma/Opokuma            Konduga \n                 3                  3                  3                  3 \n         Konshisha          Kontagora             Kosofe              Kubau \n                 3                  1                  1                  5 \n             Kudan               Kuje             Kukawa           Kumbotso \n                 3                  3                  2                  5 \n            Kunchi               Kura              Kurfi              Kurmi \n                 5                  5                  5                  3 \n            Kusada              Kwali              Kwami             Kwande \n                 5                  3                  3                  3 \n             Kware        Kwaya Kusar              Lafia             Lagelu \n                 3                  5                  3                  3 \n      Lagos Island     Lagos Mainland            Lamurde     Langtang North \n                 1                  1                  5                  3 \n    Langtang South              Lapai                Lau              Lavun \n                 3                  3                  3                  3 \n              Lere               Logo             Lokoja            Machina \n                 5                  3                  3                  3 \n          Madagali             Madobi               Mafa             Magama \n                 2                  5                  4                  3 \n          Magumeri           Mai'adua          Maiduguri          Maigatari \n                 5                  3                  1                  5 \n             Maiha            Maiyama             Makoda            Makurdi \n                 5                  3                  3                  1 \n      Malam Madori         Malumfashi              Mangu               Mani \n                 5                  5                  3                  3 \n           Maradun             Mariga            Markafi              Marte \n                 5                  3                  5                  2 \n              Maru            Mashegu              Mashi             Matazu \n                 3                  3                  3                  5 \n        Mayo-Belwa           Mbaitoli                Mbo            Michika \n                 5                  2                  4                  5 \n              Miga             Mikang           Minjibir              Misau \n                 5                  3                  5                  5 \n        Mkpat Enin               Moba             Mobbar              Mokwa \n                 4                  2                  2                  3 \n           Monguno          Mopa-Muro               Moro         Mubi North \n                 1                  3                  3                  1 \n        Mubi South             Musawa             Mushin               Muya \n                 1                  5                  1                  3 \n            Nafada            Nangere           Nasarawa         Nasarawa_2 \n                 3                  3                  1                  3 \n    Nasarawa-Eggon        Ndokwa East        Ndokwa West              Nembe \n                 3                  3                  4                  4 \n             Ngala            Nganzai             Ngaski        Ngor-Okpala \n                 1                  2                  3                  2 \n             Nguru              Ningi              Njaba            Njikoka \n                 3                  5                  1                  1 \n        Nkanu East         Nkanu West            Nkwerre        Nnewi North \n                 3                  3                  1                  1 \n       Nnewi South          Nsit Atai          Nsit Ibom         Nsit Ubium \n                 2                  4                  4                  4 \n            Nsukka              Numan           Nwangele      Obafemi-Owode \n                 2                  1                  1                  2 \n          Obanliku                Obi              Obi_2           Obi Ngwa \n                 3                  3                  3                  3 \n        Obia/Akpor             Obokun         Obot Akara              Obowo \n                 3                  3                  4                  2 \n            Obubra              Obudu              Odeda             Odigbo \n                 3                  3                  2                  3 \n          Odo-Otin           Odogbolu           Odukpani               Offa \n                 3                  4                  4                  1 \n               Ofu  Ogba/Egbema/Ndoni           Ogbadibo             Ogbaru \n                 4                  2                  4                  2 \n             Ogbia    Ogbomosho North    Ogbomosho South          Ogo Oluwa \n                 3                  1                  1                  3 \n             Ogoja      Ogori/Magongo           Ogu/Bolo     Ogun waterside \n                 3                  4                  3                  4 \n             Oguta             Ohafia       Ohaji/Egbema           Ohaozara \n                 3                  4                  5                  3 \n           Ohaukwu            Ohimini          Oji-River                Ojo \n                 3                  3                  2                  1 \n               Oju            Oke-Ero              Okehi              Okene \n                 5                  3                  1                  1 \n            Okigwe          Okitipupa              Okobo               Okpe \n                 4                  4                  4                  2 \n           Okpokwu             Okrika          Ola-oluwa          Olamabolo \n                 3                  1                  3                  4 \n          Olorunda         Olorunsogo            Oluyole              Omala \n                 1                  2                  1                  3 \n            Omumma            Ona-Ara          Ondo East          Ondo West \n                 3                  1                  3                  1 \n            Onicha      Onitsha North      Onitsha South               Onna \n                 3                  2                  1                  4 \n       Opobo/Nkoro              Oredo            Orelope         Orhionmwon \n                 2                  1                  1                  4 \n           Ori Ire             Oriade               Orlu              Orolu \n                 3                  3                  2                  1 \n              Oron               Orsu           Oru East           Oru West \n                 1                  1                  2                  2 \n         Oruk Anam       Orumba North       Orumba South                Ose \n                 4                  2                  2                  3 \n    Oshimili North     Oshimili South       Oshodi-Isolo      Osisioma Ngwa \n                 3                  1                  1                  2 \n            Osogbo            Oturkpo    Ovia North East    Ovia South West \n                 1                  3                  4                  4 \n         Owan East          Owan West   Owerri-Municipal       Owerri North \n                 4                  4                  1                  2 \n       Owerri West                Owo                Oye                Oyi \n                 3                  1                  3                  2 \n            Oyigbo           Oyo East           Oyo West               Oyun \n                 3                  1                  2                  3 \n           Paikoro           Pankshin             Patani             Pategi \n                 5                  3                  4                  3 \n     Port-Harcourt           Potiskum         Qua'an Pan              Rabah \n                 1                  3                  3                  3 \n              Rafi               Rano         Remo North              Rijau \n                 5                  5                  2                  3 \n              Rimi         Rimin Gado             Ringim              Riyom \n                 3                  5                  5                  3 \n              Rogo               Roni         Sabon-Gari        Sabon Birni \n                 5                  5                  1                  3 \n            Sabuwa             Safana            Sagbama             Sakaba \n                 3                  5                  4                  3 \n         Saki East          Saki West            Sandamu              Sanga \n                 3                  1                  3                  3 \n            Sapele           Sardauna            Shagamu            Shagari \n                 1                  3                  1                  4 \n            Shanga              Shani            Shanono           Shelleng \n                 3                  3                  5                  5 \n           Shendam           Shinkafi              Shira            Shiroro \n                 3                  5                  5                  5 \n           Shomgom            Shomolu             Silame               Soba \n                 3                  1                  3                  5 \n      Sokoto North       Sokoto South               Song      Southern Ijaw \n                 1                  1                  5                  4 \n    Sule-Tankarkar             Suleja            Sumaila               Suru \n                 5                  1                  5                  3 \n          Surulere         Surulere_2               Tafa      Tafawa-Balewa \n                 1                  3                  3                  5 \n               Tai              Takai              Takum      Talata Mafara \n                 4                  5                  3                  5 \n          Tambuwal            Tangaza            Tarauni              Tarka \n                 3                  3                  1                  3 \n            Tarmua              Taura               Tofa               Toro \n                 3                  5                  5                  5 \n              Toto             Toungo              Tsafe           Tsanyawa \n                 3                  5                  5                  5 \n        Tudun Wada             Tureta              Udenu                Udi \n                 3                  3                  2                  2 \n               Udu          Udung Uko      Ughelli North      Ughelli South \n                 3                  4                  3                  4 \n         Ugwunagbo         Uhunmwonde           Ukanafun               Ukum \n                 3                  4                  4                  3 \n         Ukwa East          Ukwa West            Ukwuani        Umu-Nneochi \n                 3                  3                  4                  2 \n     Umuahia North      Umuahia South             Ungogo             Unuimo \n                 2                  2                  5                  2 \n             Uruan  Urue-Offong/Oruko            Ushongo               Ussa \n                 4                  4                  3                  3 \n             Uvwie                Uyo          Uzo-Uwani          Vandeikya \n                 1                  4                  2                  3 \n            Wamako              Wamba             Warawa              Warji \n                 3                  3                  5                  5 \n       Warri North        Warri South   Warri South West       Wasagu/Danko \n                 4                  1                  4                  5 \n              Wase              Wudil             Wukari              Wurno \n                 3                  5                  3                  4 \n          Wushishi               Yabo         Yagba East         Yagba West \n                 3                  3                  3                  3 \n            Yakurr               Yala       Yamaltu/Deba          Yankwashi \n                 3                  3                  3                  5 \n             Yauri            Yenegoa         Yola North         Yola South \n                 3                  4                  1                  1 \n             Yorro           Yunusari           Yusufari               Zaki \n                 5                  3                  3                  5 \n             Zango        Zango-Kataf              Zaria               Zing \n                 3                  5                  1                  5 \n             Zurmi               Zuru \n                 5                  5 \n\n\nTabulating a frequency table using ‘table()’ function.\n\ntable(cutree(hclust_ward, k=5))\n\n\n  1   2   3   4   5 \n146  88 300  90 150 \n\n\n\nclass(cutree(hclust_ward, k=5))\n\n[1] \"integer\"\n\n\nConvert numeric to categorical variable.\n\ngroups <- as.factor(cutree(hclust_ward, k=5))\n\n\nstr(groups)\nattributes(groups)\n\n$levels\n[1] “1” “2” “3” “4” “5”\n$names\n[1] “Aba North” “Aba South” “Abadam” “Abaji” “Abak” “Abakaliki”\n[7] “Abeokuta North” “Abeokuta South” “Abi” “Aboh-Mbaise” “Abua/Odual” “Abuja Municipal” …\n[771] “Zaria” “Zing” “Zurmi” “Zuru”\nThe output groups is a list object.\nIn order to visualise the clusters using qtm(), the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix (aka table) onto nga_wp2 (a sf obj) to produce an output simple feature object called nga_hclust_var_std_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nnga_hclust_var_std_cluster <- cbind(nga_wp2, as.matrix(groups))\n\nRename ‘as.matrix.group’ column to CLUSTER\n\nnga_hclust_var_std_cluster <- nga_hclust_var_std_cluster %>%  rename('CLUSTER' = 'as.matrix.groups.')\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(nga_hclust_var_std_cluster, 'CLUSTER')\n\n\n\n\n\nnga_hclust_var_std_cluster %>% group_by(CLUSTER) %>% summarise(count=n())\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 3\n  CLUSTER count                                                         geometry\n  <chr>   <int>                                               <MULTIPOLYGON [°]>\n1 1         146 (((11.45467 8.796714, 11.44734 8.806765, 11.44367 8.81179, 11.4…\n2 2          88 (((6.762457 4.760527, 6.740396 4.756952, 6.72797 4.757517, 6.71…\n3 3         300 (((4.563555 8.472913, 4.570925 8.472156, 4.57687 8.472228, 4.58…\n4 4          90 (((7.714596 5.810416, 7.71494 5.803184, 7.713735 5.789065, 7.71…\n5 5         150 (((7.558717 12.70204, 7.557861 12.70452, 7.556674 12.70683, 7.5…\n\n\nAccording to the table above, there are 146 members in cluster 1, 88 in cluster 2, 300 in cluster 3, 90 in cluster 4 and 150 in cluster 5.\nFrom interactive heatmap:\nThe biggest cluster is characterised by high % of rural areas, high % of functional hand pumps with high % of acceptable water quality with low percentage of water capacity (under 1000).\nSecond largest cluster is characterised by high percentage of rural areas that have mainly hand pump, with average % of functional wpt and acceptable water quality. There is a mixed of high % of functional and non-functional handpump.\nThe third biggest cluster has a high% with usage capacity of 1000 and a large percentage serves the rural regions. They also have the highest percentage of non functional pumps but majority of the pumps also NOT hand pumps.\nThe second smallest cluster serves a mixed of rural and urban areas with high5 of them getting good water quality and majority of the pumps serving more than 1000 people per pump. Most of the water points are also functional but lower percentage are hand pumps.\nThe smallest cluster is characterised by LGAs with high % or rural areas with low % of functional and non-functional water points (are they unknown?) . The water quality is also not acceptable. The water pumps are also not hand pumps.\n\n#tapply(nga_hclust_var_std_cluster$wpt.functional, nga_hclust_var_std_cluster$CLUSTER, summary) \n\n\nls(nga_hclust_var_std_cluster)\n\n [1] \"CLUSTER\"              \"geometry\"             \"Level\"               \n [4] \"pct_functional\"       \"pct_handpump\"         \"pct_non.functional\"  \n [7] \"pct_qualityok\"        \"pct_rural\"            \"pct_unknown\"         \n[10] \"pct_usagecap1000\"     \"pct_usagecapless1000\" \"shapeGroup\"          \n[13] \"shapeID\"              \"shapeName\"            \"shapeType\"           \n[16] \"total.wpt\"            \"wpt.functional\"       \"wpt.handpump\"        \n[19] \"wpt.non.functional\"   \"wpt.qualityok\"        \"wpt.rural\"           \n[22] \"wpt.unknown\"          \"wpt.usagecap1000\"     \"wpt.usagecapless1000\"\n\n\n\nnga_hclust_var_std_cluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            q1 = quantile(pct_non.functional, 0.25),\n            median = median(pct_non.functional),\n            mean=mean(pct_non.functional),\n            q3 = quantile(pct_non.functional, 0.75),\n            max = max(pct_non.functional))\n\nSimple feature collection with 5 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 8\n  CLUSTER count     q1 median  mean    q3   max                         geometry\n  <chr>   <int>  <dbl>  <dbl> <dbl> <dbl> <dbl>               <MULTIPOLYGON [°]>\n1 1         146 0.177   0.347 0.337 0.49  1     (((11.45467 8.796714, 11.44734 …\n2 2          88 0.0586  0.215 0.204 0.333 0.576 (((6.762457 4.760527, 6.740396 …\n3 3         300 0.281   0.418 0.411 0.533 1     (((4.563555 8.472913, 4.570925 …\n4 4          90 0.527   0.608 0.606 0.714 0.879 (((7.714596 5.810416, 7.71494 5…\n5 5         150 0.132   0.231 0.221 0.308 0.448 (((7.558717 12.70204, 7.557861 …\n\n\n\nnga_hclust_var_std_cluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            q1 = quantile(pct_functional, 0.25),\n            median = median(pct_functional),\n            mean=mean(pct_functional),\n            q3 = quantile(pct_functional, 0.75),\n            max = max(pct_functional))\n\nSimple feature collection with 5 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 8\n  CLUSTER count    q1 median  mean    q3   max                          geometry\n  <chr>   <int> <dbl>  <dbl> <dbl> <dbl> <dbl>                <MULTIPOLYGON [°]>\n1 1         146 0.397  0.492 0.511 0.651 1     (((11.45467 8.796714, 11.44734 8…\n2 2          88 0.112  0.213 0.217 0.301 0.625 (((6.762457 4.760527, 6.740396 4…\n3 3         300 0.339  0.460 0.483 0.576 1     (((4.563555 8.472913, 4.570925 8…\n4 4          90 0.236  0.354 0.352 0.438 0.673 (((7.714596 5.810416, 7.71494 5.…\n5 5         150 0.675  0.760 0.769 0.868 1     (((7.558717 12.70204, 7.557861 1…\n\n\n\nnga_hclust_var_std_cluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            q1 = quantile(pct_rural, 0.25),\n            median = median(pct_rural),\n            mean=mean(pct_rural),\n            q3 = quantile(pct_rural, 0.75),\n            max = max(pct_rural))\n\nSimple feature collection with 5 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 8\n  CLUSTER count    q1 median  mean    q3   max                          geometry\n  <chr>   <int> <dbl>  <dbl> <dbl> <dbl> <dbl>                <MULTIPOLYGON [°]>\n1 1         146 0      0.182 0.203 0.300 0.786 (((11.45467 8.796714, 11.44734 8…\n2 2          88 0.380  0.636 0.549 0.792 1     (((6.762457 4.760527, 6.740396 4…\n3 3         300 0.832  0.954 0.893 1     1     (((4.563555 8.472913, 4.570925 8…\n4 4          90 0.866  0.953 0.905 1     1     (((7.714596 5.810416, 7.71494 5.…\n5 5         150 0.827  0.953 0.904 1     1     (((7.558717 12.70204, 7.557861 1…\n\n\n\nnga_hclust_var_std_cluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            q1 = quantile(pct_handpump, 0.25),\n            median = median(pct_handpump),\n            mean=mean(pct_handpump),\n            q3 = quantile(pct_handpump, 0.75),\n            max = max(pct_handpump))\n\nSimple feature collection with 5 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 8\n  CLUSTER count     q1 median   mean    q3   max                        geometry\n  <chr>   <int>  <dbl>  <dbl>  <dbl> <dbl> <dbl>              <MULTIPOLYGON [°]>\n1 1         146 0.0687 0.388  0.373  0.544 1     (((11.45467 8.796714, 11.44734…\n2 2          88 0      0.0313 0.0960 0.140 0.659 (((6.762457 4.760527, 6.740396…\n3 3         300 0.443  0.574  0.570  0.714 1     (((4.563555 8.472913, 4.570925…\n4 4          90 0.05   0.0957 0.117  0.185 0.381 (((7.714596 5.810416, 7.71494 …\n5 5         150 0.832  0.898  0.885  0.951 1     (((7.558717 12.70204, 7.557861…"
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#spatially-constrained-clustering---skater-approach",
    "href": "Take-home_Ex02/Take-home_Ex02.html#spatially-constrained-clustering---skater-approach",
    "title": "Take-home_Ex02",
    "section": "4 Spatially Constrained Clustering - SKATER approach",
    "text": "4 Spatially Constrained Clustering - SKATER approach\n\n4.1 Converting into SpatialPolygonsDataFrame (required by SKATER 2006 function\nhttps://sparkbyexamples.com/r-programming/drop-dataframe-rows-in-r/\nFirst, we need to convert nga_wp2 from sf into SpatialPolygonsDataFrame (sp). This is because SKATER function only support sp objects such as SpatialPolygonDataFrame. Both SKATER and sp are older libraries while sf is newer.\nThe code chunk below uses as_Spatial() of sf package to convert nga_wp2 into a SpatialPolygonDataFrame called nga_wp2_sp\nWe will remove row 86 of nga_wp2 because this polygon is an island and has no neighbour when we use the contiguity method. This will lead to an error when calculating the edge cost later. There is no R methods to drop rows, so we do it via negative slicing.\n\nnga_wp2_sp <- as_Spatial(nga_wp2[-86,])\n\nQuick examples of deleting selected Rows from data frame in R.\nhttps://sparkbyexamples.com/r-programming/drop-dataframe-rows-in-r/\n\n\n4.2 Computing Neighbour List\nNext, poly2nb() of spdep package will be used to compute the neighbours list from polygon list. SKATER is based on contiguity concept, so use poly2nb() here.\n\nnga_wp2.nb <- poly2nb(nga_wp2_sp)\nsummary(nga_wp2.nb)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7430602 \nAverage number of links: 5.743855 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nRow / Region 86 , shapeName of Bakassi has no neighbour. We might have to delete this row later\nWith nga_wp2_sp,\nFirstly, plot boundaries on the bottom-most layer first.\nSecondly, plot neighbours list object on top of boundaries map. The centroid coordinates of each polygons/ neighbours can be extracted using coordinates(nga_wp2_sp) on the sp object. Set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(nga_wp2_sp, \n     border=grey(.5))\n\nplot(nga_wp2.nb, coordinates(nga_wp2_sp),\n     col='blue',\n     add=TRUE)\n\n\n\n\n\n\n4.3 Computing minimum spanning tree\n\n4.3.1 Calculating edge costs (‘cost’ from one polygon to another polygon and it reflects dissimilarity between the polygons/nodes)\nNext, nbcosts() of spdep package is used to compute the cost of each edge / connection. It is the distance between each nodes. This function computes this distance using a data.frame with observations ( variables like pct_functional, pct_non-functional etc..) vector in each node. lcost is a ‘nbdist’ class object.\nThe code chunk below is used to compute the cost of each edge. Recall that nga_hclust_var.std is a df containing 5 variables. nga_wp2.nb is a neighbour list object\n\nclass(nga_hclust_var.std)\n\n[1] \"data.frame\"\n\n\n\nlcost <- nbcosts(nga_wp2.nb, nga_hclust_var.std)\n\n\nclass(lcost)\n\n[1] \"nbdist\"\n\n\n\nstr(lcost)\n\nList of 773\n$ : num [1:4] 0.136 1.188 0.644 1.081\n$ : num [1:3] 0.136 0.652 1.058\n$ : num [1:3] 1.59 1.59 1.02\n$ : num [1:7] 0.944 0.474 1.166 0.899 1.072 …\n$ : num [1:5] 0.483 1.178 0.761 0.826 0.782\nIf I have four neighbours, then I would have four edge costs.\nFor each observation, this gives the pairwise dissimilarity between its values on the selected clustering variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list object to a list weights object by specifying the lcost as the weights.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\n#?nb2listw\nnga.w <- nb2listw(nga_wp2.nb,\n                   glist=lcost,\n                   style ='B')\nsummary(nga.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7430602 \nAverage number of links: 5.743855 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1       S2\nB 773 597529 3855.757 8012.291 92533.61\n\n\n\nstr(nga.w)\n\nList of 3\n$ style : chr “B”\n$ neighbours:List of 773\n..$ : int [1:4] 2 547 623 720\n..$ : int [1:3] 1 623 720\n..$ : int [1:3] 260 446 506\n..$ : int [1:7] 256 262 435 445 453 465 708\n$ weights :List of 773\n..$ : num [1:4] 0.136 1.188 0.644 1.081\n..$ : num [1:3] 0.136 0.652 1.058\n..$ : num [1:3] 1.59 1.59 1.02\n..$ : num [1:7] 0.944 0.474 1.166 0.899 1.072 …\n\n\n\n4.4 Computing minimum spanning tree (Each polygon has exactly one neighbour)\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below. this mstree() function ensures that each polygon to have exactly one neighbour and ensures overall minimum cost.\nRefer to lecture 3 slide 28 to re-understand the algorithm behind the construction of the minimum spanning tree.\n\nnga.mst <- mstree(nga.w)\n\n\nclass(nga.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(nga.mst)\n\n[1] 772   3\n\n\nNote that the dimension is 772 and not 773. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes\nYi xin: We can display the content of nga.mst by using head() as shown in the code chunk below. There are 772 edges in total, but we display only five here. The first node polygon 631 and the minimum cost (or least dissimilarity) is 0.72899 to travel to polygon 632. The tree path is created by considering the minimum cost path from all available paths. The cost is calculated using the neighbours list first, then ICT variables . Each polygon has exactly one neighbour in the Minimum Spanning Tree. This is 100% geospatial relationship as consider neighbour list first.\nHow we transformed our data in Hands-on_05\nshan_sf -> shan_sp -> shan.nb -> lcost = nbcosts(shan.nb, shan_ict) -> shan.w= nb2listw(shan.nb, glist=lcost, style =‘B’) -> shan.mst <- mstree(shan.w)\nHow we transformed our data in Take-home_Ex02 for SKATER\nnga_wp2 -> nga_wp2_sp -> nga_wp2.nb -> lcost = nbcosts(nga_wp2.nb, nga_hclust_var.std) -> nga.w = nb2listw(nga_wp2.nb, glist=lcost, style =‘B’) -> nga.mst <- mstree(nga.w)\nAs compared to how we transformed the data for hierarchical clustering\nclustv2 (all numerical variables only) -> cluster_vars (selected clustering variables with shapeName as Row ID) -> nga_hclust_var (same as cluster_vars without shapeName col) -> nga_hclust_var.std (standardised) -> proxmat (distance matrix for h-clustering)\n\nhead(nga.mst)\n\n     [,1] [,2]      [,3]\n[1,]  631  632 0.7289937\n[2,]  632  574 0.4754026\n[3,]  632  572 0.4908803\n[4,]  572  563 0.3797270\n[5,]  563  561 0.3399712\n[6,]  561   26 0.3497202\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes (polygon ID) in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(nga_wp2_sp,\n     border = grey(.5))\n\nplot.mst(nga.mst,\n         coords=coordinates(nga_wp2_sp),         \n         col='blue',\n         cex.lab= 0.7,\n         cex.circles = 0.005,\n         add=TRUE)\n\n\n\n\n\n\n4.5 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\nnga.mst[, 1:2] refer to the first two components of nga.mst (see above). They refer to the edges literally, not the costs.\nBy cutting the MST 4 times, we get 5 clusters. The first cut will be performed at the edge with this highest cost (aka the most dissimilar nodes will be separated, forming two clusters). Afterall, the aim of clustering is to minimise intra-cluster distance and maximise inter-cluster distance.\nWe have to perform hierarchical clustering first; else do not know optimal clusters is 5 in this case.\n\nclust5 <- spdep::skater(edges = nga.mst[, 1:2],\n                        data = nga_hclust_var.std,\n                        method = 'euclidean',\n                        ncuts = 4)\n\nThe skater() takes three mandatory arguments:\n- the first two columns of the MST matrix (i.e. not the cost),\n- the data matrix (to update the costs as units are being grouped), and\n\nthe number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\n\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust5)\n\nList of 8\n $ groups      : num [1:773] 1 1 2 2 1 1 1 1 1 1 ...\n $ edges.groups:List of 5\n  ..$ :List of 3\n  .. ..$ node: num [1:389] 719 178 31 210 611 470 282 392 610 37 ...\n  .. ..$ edge: num [1:388, 1:3] 31 210 470 392 37 178 292 211 611 563 ...\n  .. ..$ ssw : num 241\n  ..$ :List of 3\n  .. ..$ node: num [1:368] 730 672 769 511 495 220 651 747 701 385 ...\n  .. ..$ edge: num [1:367, 1:3] 672 769 511 220 495 651 740 758 344 409 ...\n  .. ..$ ssw : num 230\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 447 473\n  .. ..$ edge: num [1, 1:3] 447 473 0\n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num [1:5] 177 275 277 276 278\n  .. ..$ edge: num [1:4, 1:3] 177 276 277 275 275 ...\n  .. ..$ ssw : num 1.52\n  ..$ :List of 3\n  .. ..$ node: num [1:9] 120 182 662 687 125 761 642 133 438\n  .. ..$ edge: num [1:8, 1:3] 120 182 120 687 120 662 687 687 182 662 ...\n  .. ..$ ssw : num 3.46\n $ not.prune   : NULL\n $ candidates  : int [1:5] 1 2 3 4 5\n $ ssto        : num 514\n $ ssw         : num [1:5] 514 485 482 479 477\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:773] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nUsing str(clust5), we can see several results:\n\nclust5$groups shows us the cluster number each polygon is assigned to.\ndetailed summary for each of the clusters in the edges.groups list, containing the node, edge and ssw??\nSum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\n\nWe can check the cluster assignment by using the conde chunk below.\n\nccs5 <- clust5$groups\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\nFreq table\n\ntable(ccs5)\n\nccs5\n  1   2   3   4   5 \n389 368   2   5   9 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(nga_wp2_sp , border = grey(.5))\n\nplot(clust5,\n     coords = coordinates(nga_wp2_sp),\n     cex.lab = .7,\n     groups.colors=c(\"orange\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles = 0.005,\n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n4.6 Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\nFirst, set the cluster groups as matrix (as.matrix means table form) to get it ready to be appended to shan_sf_cluster (from shan_sf + hierarchical clustering results) to get another data frame called shan_sf_spatialcluster\n\ngroups_mat <- as.matrix(clust5$groups)\nhead(groups_mat)\n\n     [,1]\n[1,]    1\n[2,]    1\n[3,]    2\n[4,]    2\n[5,]    1\n[6,]    1\n\n\nAppend it to the shan_sf_cluster sf data frame because tmap prefers sf to sp object.. Avoid sorting to prevent appending issues.\nas.factor() is only to convert continuous to categorical data for plotting tmap.\n\nnga_sf_spatialcluster <- cbind(nga_hclust_var_std_cluster[-86,], \n                                as.factor(groups_mat)) %>% \n  rename('SP_CLUSTER' = 'as.factor.groups_mat.')\n\nqtm(nga_sf_spatialcluster, 'SP_CLUSTER')\n\n\n\n\nNotice this is mainly spatial relationship and some on attribute relationship but inflexibility to change the threshold.\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map <- qtm(nga_hclust_var_std_cluster,\n                  'CLUSTER') +\n  tm_borders(alpha = 0.5)\n\nskclust.map <- qtm(nga_sf_spatialcluster,\n                   'SP_CLUSTER') +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(hclust.map, skclust.map,\n             asp =NA, ncol =2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\nThe plot on the left is 100% based on attribute relationship while the plot on the right is based mainly on spatial relationship. To get a plot that enables us to vary the cut-off value for balance between attributes and spatial relationship, we can consider the spatially constrained clustering via the ClustGeo method, all for its choicealpha() function."
  },
  {
    "objectID": "Take-home_Ex02/Take-home_Ex02.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Take-home_Ex02/Take-home_Ex02.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Take-home_Ex02",
    "section": "5 Spatially Constrained Clustering: ClustGeo Method",
    "text": "5 Spatially Constrained Clustering: ClustGeo Method\nI will use ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis. ‘Proxmat’ and “distmat’ are used respectively.\n\n5.1 A short note about ClustGeo package (only Ward method for hierachical clsutering, can use any distance method or proximity matrix)\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1].\nD0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space.\nD1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n5.2 Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix (proxmat?) as shown in the code chunk below\n\nnongeo_cluster <-hclustgeo(proxmat)\nplot(nongeo_cluster, cex =0.5)\nrect.hclust(nongeo_cluster, \n            k=5,\n            border = 2:6)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n5.2.1 Mapping the clusters formed\nSimilarly to what we have done earlier, convert the cluster ID to categorical data, and then to a matrix (means table form). Finally append it to nga_wp2 (sf obj), creating a new data frame called nga_sf_nongeo_cluster\n\ngroups <- as.factor(cutree(nongeo_cluster, k=5))\n\n\nnga_sf_nongeo_cluster <- cbind(nga_wp2, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(nga_sf_nongeo_cluster,'CLUSTER')\n\n\n\n\n\n\n\n5.3 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package. (Earlier we had use proxmat, a non-spatial distance matrix based on attributes)\n\ndist <- st_distance(nga_wp2,nga_wp2)\nclass(dist)\n\n[1] \"units\"\n\n\n\ndistmat <- as.dist(dist)\nclass(distmat)\n\n[1] \"dist\"\n\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\nFirst argument is non-spatial proxmat, and the second argument is the spatial distmat.\nMin is 0, max is 1 and in steps of 0.1\nK is in uppercase\n\ncr <- choicealpha(proxmat, distmat,\n                  range.alpha = seq(0,1, 0.1),\n                  K =5,\n                  graph = TRUE)\n\n\n\n\n\n\n\nY-axis refers to the amount of spatial or non-spatial relationship captured\nD0: attribute homogeneity (black line)\nD1: spatial homogeneity, contiguity matrix (red line)\nchoicealpha- balance attribute and spatial homogeneity\ncut-off values\n1. when alpha = 0, consider only attribute relationship\n2. when alpha = 1, we consider only the spatial relationship\nIn short, increase alpha increase spatial relationship.\nAt cut-off value of 0.40, lose only about 20% of black and capture about 70% of red. This is he most balanced value. At any cut-off bigger than 0.4, we lose black info at a greater rate and gain red info at a slower rate.\nThere are two graphs here, Qnorm means the normalised value. Use Qnorm when skewness is big.\nWith reference to the graphs above, alpha = 0.4 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.4)\nclustG\n\n\nCall:\nstats::hclust(d = delta, method = \"ward.D\", members = wt)\n\nCluster method   : ward.D \nDistance         : euclidean \nNumber of objects: 774 \n\n\nNext, cutree() is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=5))\n\nWe will then join back the group list with nga_wp2 polygon simple feature data frame by using the code chunk below.\n\nnga_sf_Gcluster <- cbind(nga_wp2, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(nga_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n5.4 Visual interpretation of Clusters\n\n5.4.1 Visualising individual clustering variable\nExamine the distribution of pct_non.functional water pumps by cluster\n\nggplot(data = nga_sf_Gcluster,\n       aes(x = CLUSTER, y = pct_non.functional)) +\n  geom_boxplot()\n\n\n\n\n\n\n5.4.2 Multivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nstr(nga_sf_Gcluster)\n\nClasses 'sf' and 'data.frame':  774 obs. of  24 variables:\n $ shapeName           : chr  \"Aba North\" \"Aba South\" \"Abadam\" \"Abaji\" ...\n $ Level               : chr  \"ADM2\" \"ADM2\" \"ADM2\" \"ADM2\" ...\n $ shapeID             : chr  \"NGA-ADM2-72505758B79815894\" \"NGA-ADM2-72505758B67905963\" \"NGA-ADM2-72505758B57073987\" \"NGA-ADM2-72505758B61968000\" ...\n $ shapeGroup          : chr  \"NGA\" \"NGA\" \"NGA\" \"NGA\" ...\n $ shapeType           : chr  \"ADM2\" \"ADM2\" \"ADM2\" \"ADM2\" ...\n $ total.wpt           : int  17 71 0 57 48 233 34 119 152 66 ...\n $ wpt.functional      : int  7 29 0 23 23 82 16 72 79 18 ...\n $ wpt.non.functional  : int  9 35 0 34 25 42 15 33 62 26 ...\n $ wpt.unknown         : int  1 7 0 0 0 109 3 14 11 22 ...\n $ wpt.handpump        : int  2 7 0 23 4 102 5 20 91 1 ...\n $ wpt.usagecapless1000: int  3 9 0 23 4 211 8 35 102 23 ...\n $ wpt.usagecap1000    : int  14 62 0 34 44 22 26 84 50 43 ...\n $ wpt.rural           : int  0 4 0 48 40 204 7 0 145 48 ...\n $ wpt.qualityok       : int  13 57 0 56 35 98 25 103 86 35 ...\n $ pct_functional      : num  0.412 0.408 0 0.404 0.479 ...\n $ pct_non.functional  : num  0.529 0.493 0 0.596 0.521 ...\n $ pct_unknown         : num  0.0588 0.0986 0 0 0 ...\n $ pct_handpump        : num  0.1176 0.0986 0 0.4035 0.0833 ...\n $ pct_usagecapless1000: num  0.1765 0.1268 0 0.4035 0.0833 ...\n $ pct_usagecap1000    : num  0.824 0.873 0 0.596 0.917 ...\n $ pct_rural           : num  0 0.0563 0 0.8421 0.8333 ...\n $ pct_qualityok       : num  0.765 0.803 0 0.982 0.729 ...\n $ CLUSTER             : chr  \"1\" \"1\" \"2\" \"3\" ...\n $ geometry            :sfc_MULTIPOLYGON of length 774; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:71, 1:2] 7.4 7.4 7.4 7.4 7.39 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:23] \"shapeName\" \"Level\" \"shapeID\" \"shapeGroup\" ...\n\n\n\nggparcoord(data = nga_sf_Gcluster, \n           columns = c(15:16, 18, 20:22), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = FALSE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\n\nggparcoord(data= nga_sf_Gcluster,\n    columns = c(15:16, 18, 20:22), groupColumn = 23, alphaLines = 0.15\n    ) +\n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\n\n\n5.4.3 Using summary statistics\n\nnga_sf_Gcluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            min = min(pct_non.functional),\n            q1 = quantile(pct_non.functional, 0.25),\n            median = median(pct_non.functional),\n            mean=mean(pct_non.functional),\n            q3 = quantile(pct_non.functional, 0.75),\n            max = max(pct_non.functional))\n\nSimple feature collection with 5 features and 8 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 9\n  CLUSTER count    min    q1 median  mean    q3   max                   geometry\n  <chr>   <int>  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>             <GEOMETRY [°]>\n1 1          92 0      0.211  0.352 0.351 0.518 0.730 MULTIPOLYGON (((4.189266 …\n2 2          18 0      0      0     0     0     0     POLYGON ((14.58302 11.751…\n3 3         253 0.0185 0.327  0.416 0.431 0.525 1     MULTIPOLYGON (((5.730215 …\n4 4         187 0      0.230  0.427 0.423 0.608 0.879 MULTIPOLYGON (((5.847348 …\n5 5         224 0      0.124  0.241 0.257 0.355 1     MULTIPOLYGON (((7.229989 …\n\n\n\nnga_sf_Gcluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            min = min(pct_functional),\n            q1 = quantile(pct_functional, 0.25),\n            median = median(pct_functional),\n            mean=mean(pct_functional),\n            q3 = quantile(pct_functional, 0.75),\n            max = max(pct_functional))\n\nSimple feature collection with 5 features and 8 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 9\n  CLUSTER count   min    q1 median  mean    q3   max                    geometry\n  <chr>   <int> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>              <GEOMETRY [°]>\n1 1          92 0.143 0.438  0.512 0.550 0.667 1     MULTIPOLYGON (((4.189266 8…\n2 2          18 0     0      0     0     0     0     POLYGON ((14.58302 11.7511…\n3 3         253 0     0.329  0.430 0.436 0.540 0.875 MULTIPOLYGON (((5.730215 1…\n4 4         187 0     0.214  0.309 0.338 0.429 1     MULTIPOLYGON (((5.847348 4…\n5 5         224 0     0.612  0.752 0.721 0.870 1     MULTIPOLYGON (((7.229989 9…\n\n\n\nnga_sf_Gcluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            min = min(pct_rural),\n            q1 = quantile(pct_rural, 0.25),\n            median = median(pct_rural),\n            mean=mean(pct_rural),\n            q3 = quantile(pct_rural, 0.75),\n            max = max(pct_rural))\n\nSimple feature collection with 5 features and 8 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 9\n  CLUSTER count   min    q1 median   mean    q3   max                   geometry\n  <chr>   <int> <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl>             <GEOMETRY [°]>\n1 1          92 0     0      0.175 0.187  0.298 0.626 MULTIPOLYGON (((4.189266 …\n2 2          18 0     0      0     0.0819 0.102 0.523 POLYGON ((14.58302 11.751…\n3 3         253 0.276 0.821  0.945 0.882  1     1     MULTIPOLYGON (((5.730215 …\n4 4         187 0     0.636  0.844 0.763  0.989 1     MULTIPOLYGON (((5.847348 …\n5 5         224 0     0.729  0.910 0.796  1     1     MULTIPOLYGON (((7.229989 …\n\n\n\nnga_sf_Gcluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            min = min(pct_handpump),\n            q1 = quantile(pct_handpump, 0.25),\n            median = median(pct_handpump),\n            mean=mean(pct_handpump),\n            q3 = quantile(pct_handpump, 0.75),\n            max = max(pct_handpump))\n\nSimple feature collection with 5 features and 8 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 9\n  CLUSTER count   min     q1 median  mean    q3   max                   geometry\n  <chr>   <int> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl>             <GEOMETRY [°]>\n1 1          92 0     0.0598 0.300  0.288 0.492   1   MULTIPOLYGON (((4.189266 …\n2 2          18 0     0      0      0.305 0.862   1   POLYGON ((14.58302 11.751…\n3 3         253 0.153 0.467  0.562  0.601 0.732   1   MULTIPOLYGON (((5.730215 …\n4 4         187 0     0.0175 0.0794 0.114 0.190   0.5 MULTIPOLYGON (((5.847348 …\n5 5         224 0     0.712  0.837  0.766 0.925   1   MULTIPOLYGON (((7.229989 …\n\n\n\nnga_sf_Gcluster %>% \n  group_by(CLUSTER) %>% \n  summarise(count = n(),\n            min = min(pct_qualityok),\n            q1 = quantile(pct_qualityok, 0.25),\n            median = median(pct_qualityok),\n            mean=mean(pct_qualityok),\n            q3 = quantile(pct_qualityok, 0.75),\n            max = max(pct_qualityok))\n\nSimple feature collection with 5 features and 8 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 9\n  CLUSTER count    min    q1 median  mean    q3   max                   geometry\n  <chr>   <int>  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>             <GEOMETRY [°]>\n1 1          92 0.0526 0.687  0.773 0.775 0.871     1 MULTIPOLYGON (((4.189266 …\n2 2          18 0      0      0     0     0         0 POLYGON ((14.58302 11.751…\n3 3         253 0.0909 0.516  0.731 0.683 0.867     1 MULTIPOLYGON (((5.730215 …\n4 4         187 0      0.390  0.55  0.553 0.728     1 MULTIPOLYGON (((5.847348 …\n5 5         224 0      0.841  0.938 0.885 0.974     1 MULTIPOLYGON (((7.229989 …\n\n\nNote: nga_hclust_var_std_cluster, (hierachical sf) nga_sf_spatialcluster (skater sf), nga_sf_nongeo_cluster (clustgeo hierarchical cluster sf) , nga_sf_Gcluster (spatial geo cluster)"
  }
]