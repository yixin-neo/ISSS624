---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangle Geospatial data using appropriate R packages.

## Getting Started

The code chunk below is installed to load [sf](https://r-spatial.github.io/sf/) and tidyverse packages into R environment.

```{r}
pacman::p_load(sf,tidyverse)
```

## Section A: Importing Geospatial Data

The shapefile format can spatially describe vector features: (1) polygons, (2) polylines or (3) points.

### Importing polygon feature data

The st_read() function requires two input arguments ; *dsn* to define data path and *layer* to define the shapefile name.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data

```{r}
cyclingpath <- st_read(dsn="data/geospatial", layer = "CyclingPathGazette")
```

```{r}
class(cyclingpath)
```

### Importing GIS data in kml format

```{r}
preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

*Click [here](https://alemoranordonez.wordpress.com/2015/07/30/what-on-earth-are-coordinate-systems-and-which-one-should-i-use-part-13-lets-clarify-some-concepts/) or [here](https://esriaustraliatechblog.wordpress.com/2021/03/31/understanding-spatial-references-in-australia/) for explanation on coordinate systems!*

Different projection can help to achieve:

-   minimize distortion in **shape**

-   minimize distortion in **distance**

-   minimize distortion in **area**

-   minimize distortion in **direction**.

Google maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.

**"Projected coordinate system flattens the globe whereas the geodesic one is still a spherical/ellipsoid globe"** (Zhu, 2022)

## Section B: Checking the content of a Simple Feature Data Frame

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

Basic information like type of geometry, geographic extent of the features and the coordinate system (syv21) of the data is displayed.

### Working with glimpse() of dplyr

Shows the data type of each field.

```{r}
glimpse(mpsz)
```

### Working with head()

Reveals complete information of a feature object; show first 5 rows.

```{r}
head(mpsz, n =5)
```

## Section C: Plotting the Geospatial Data

The amazing part about Choropleth map is that it is able to plot both numerical and categorical data!

```{r}
plot(mpsz)
```

To plot only the geometry:

```{r}
plot(st_geometry(mpsz))
```

Alternatively, to plot the sf object by using only a specific attribute *PLN_AREA_N*:

```{r}
plot(mpsz["PLN_AREA_N"])
```

*\*Note: plot() is mean for plotting the Geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.*

## Section D: Working with Projection

To perform Geoprocessing using two Geospatial data, both sets of Geospatial data need to be projected using similar coordinate system. In this section, a simple feature data frame will be projected from one coordinate system to another coordinate system. This process is called **projection transformation**.

### Assigning EPSG code to a simple feature data frame

*crs - coordinate reference system*

```{r}
st_crs(mpsz)
```

Note that the EPSG code for svy21 should be 3414, lets get it right.

```{r}
mpsz3414 <- st_set_crs(mpsz,3414)
```

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

We transform original data in geographic coordinate system to projected coordinate system if the analysis requires the use of distance / area measurements.

```{r}
st_geometry(preschool)
```

preschool simple feature data frame is in WSG84 coordinate system. To re-project preschool data frame to another coordinate system mathematically, use the st_transform() function of sf package.

```{r}
preschool3414 <- st_transform(preschool,crs=3414)
```

```{r}
st_geometry(preschool3414)
```

## Section E: Importing and converting an Aspatial Data and save it as tibble data frame, then simple feature data frame

```{r}
library(readr)
listings <- read_csv("data/aspatial/listings.csv")
```

Examine whether data file has been imported correctly using list()

```{r}
list(listings)
```

\*note the latitude and longitude are in decimal degree format. It suggests the data in in WSG84 Geographic Coordinate System.

### Creating a simple feature data frame from an aspatial data frame

To convert listings data frame into a simple feature data frame, use the st_as_sf() of the sf packages.

```{r}
library(dplyr)
library(sf)
library(tidyverse)
listings_sf <- st_as_sf(listings, coords=c("longitude","latitude"),crs=4326) %>% 
  st_transform(crs=3414)
  
```

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

A new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

```{r}
plot(listings_sf)
```

## Section F: Geoprocessing with sf package

### Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

Solution:

1.  st_buffer()
2.  calculate buffer area using st_area() & create new column in sf data frame
3.  sum AREA column

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist= 5, nQuadSegs=30)

```

```{r}
plot(st_geometry(cyclingpath))
```

```{r}
plot(st_buffer(cyclingpath, dist= 5, nQuadSegs=30))
```

```{r}
# add a new and calculate new column AREA
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
# Sum the column AREA
sum(buffer_cycling$AREA)
```

```{r}
class(buffer_cycling)
```

##### Understanding [st_buffer()](https://cran.r-project.org/web/packages/sf/sf.pdf)  \<- page 29

```{r}
l1 = st_as_sfc("LINESTRING(0 0,1 5,4 5,5 2,8 2,9 4,4 6.5)")
op = par(mfrow=c(2,3))
plot(st_buffer(l1, dist = 1, endCapStyle="ROUND"), reset = FALSE, main = "endCapStyle: ROUND")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, endCapStyle="FLAT"), reset = FALSE, main = "endCapStyle: FLAT")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, endCapStyle="SQUARE"), reset = FALSE, main = "endCapStyle: SQUARE")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, nQuadSegs=1), reset = FALSE, main = "nQuadSegs: 1")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, nQuadSegs=2), reset = FALSE, main = "nQuadSegs: 2")
plot(l1,col='blue',add=TRUE)
plot(st_buffer(l1, dist = 1, nQuadSegs= 5), reset = FALSE, main = "nQuadSegs: 5")
plot(l1,col='blue',add=TRUE)
```

##### How to create simple feature (sf) object?

https://mgimond.github.io/Spatial/anatomy-of-simple-feature-objects.html

### Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

Solution:

1.  st_intersects() \<\-- what is this???
2.  lengths() of base R \<\-- what is this???

```{r}
mpsz3414$`Presch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
summary(mpsz3414$`Presch Count`)
```

```{r}
top_n(mpsz3414, 1,`Presch Count`)
```
