---
title: "Hands-on_Ex04"
editor: visual
---

In this hands-on exercises, I will be

1\. computing Global (GSA) by using spdep package.

-   plot Moran Scatterplot

-   compute and plot spatial correlogram

2\. computing Local measure of Spatial Autocorrelation (LISA) to detect clusters and outliers by using spdep packages

3\. computing Getis-Ord's Gi-statistics for detecting hot spot or/ and cold spot area by using spdep package

4\. visualising the analysis output by using tmap package

## 4.2 Getting Started

Recall

-   wm_q is neighbour list (class = nb) \<- **poly2nb()** \| wm_d62 is a fixed distance weight matrix \| knn6 is an adaptive distance weight matrix \<- **knn2nb**( knearneigh(coords, k = 6)). We can plot the neighbours on map.

-   rswm_q is equal weightage spatial matrix via rows standardisation \<- **nb2listw**( nb class obj) \| rswm_ids is a weighted spatial spatial matrix using ids (inverse distance matrix, class list) \<- nb2listw(nb class obj, glist = ids, style='B')

-   GDPPC.lag \<- a spatial lag variable that gives the averaged neighbour GDPPC value for one's neighbours \<- **lag.listw**( weight matrix, shapefile file \$ col)

### 4.2.1 The analytical question

-   is there equal distribution of development in the province?

-   if answer is NO, we ask "is there sign of clustering?" (GLOBAL spatial autocorrelation)

-   if YES, "Where are the clusters" (LOCAL spatial autocorrelation)

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.

### 4.2.2 The Study Area and Data

Two data sets will be used in this hands-on exercise:

1.  geospatial data: Hunan province administrative boundary layer at county level in ESRI shapefile format
2.  aspatial data: Hunan_2012.csv containing local development indicators

### 4.2.3 Setting the Analytical Tools

Packages we need:

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

```{r}
library(sf)
library(spdep)
library(tmap)
library(tidyverse)
```

## 4.3 Getting the Data Into R Environment

### 4.3.1 Import shapefile into r environment

```{r}
hunan <-st_read(dsn='data/geospatial',
                layer= 'Hunan')
```

\*data is in WSG84 format, not projected yet. If we are going to extract the data, better not to st_transform() to project coordinate system first.

### 4.3.2 Import csv file into r environment

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
```

### 4.3.3 Performing relational join

```{r}
hunan <- left_join(hunan, hunan2012) %>% 
  select(1:4, 7, 15)
```

Joined by 'County', selected only columns NAME_2, ID_3, NAME_3, ENGTYPE_3, County, GDPPC, geometry is automatically included as last variable

### 4.3.4 Visualising Regional Development Indicator

Now we will prepare basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package

\*tm_fill() 's n refer to the number of equal intervals

```{r}
equal <- tm_shape(hunan)+
  tm_fill('GDPPC',
          n=5,
          style='equal') +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = 'Equal interval classification',
            main.title.size=0.8,
            legend.height = 0.2,
            legend.width = 0.2)

quantile <- tm_shape(hunan)+
  tm_fill('GDPPC',
          n=5,
          style='quantile') +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = 'Equal quantile classification',
            main.title.size=0.8,
            legend.height = 0.2,
            legend.width = 0.2)

tmap_arrange(equal, quantile, asp =1, ncol=2)

```

## 4.4 Global Spatial Autocorrelation

-   compute **global** spatial autocorrelation statistics

-   perform spatial complete randomness test for global spatial autocorrelation.

### 4.4.1 Computing Contiguity Spatial Weights

-   Construct a spatial weights of study area using poly2nb() of the spdep package. This builds a **neighbour list** using **contiguous boundaries**.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours. The mode is 5 neighbours and there are 24 county with 5 neighbours.

### 4.4.2 Row-standardised weights matrix

This is one of the ways to assign weights to each neighboring polygon. Each neighbouring polygons will be assigned to equal weight (style = "W"). A fraction of (1/ #neighbours) will be assigned to each neighbouring country, then summing up the weighted GDPPC values.

This is an intuitive way to summarise neighbours' values, but the drawback is that polygon along the edges have less neighbours and thus we might over or under estimate the true nature of the spatial autocorrelation in the data. Note that more robust option are available, notably style ="B" of the nb2listw() function.

```{r}
help(nb2listw)
```

```{r}
rswm_q <- nb2listw(wm_q,
                   style = "W",
                   zero.policy=TRUE)
rswm_q
```

```{r}
class(rswm_q)
```

```{r}
attributes(rswm_q)
#attributes(rswm_q)$region.id
```

```{r}
methods(class = "nb")
```

The input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

### 4.4.3 Global Spatial Autocorrelation: Moran's I

In this section, I will perform Moran's I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### 4.4.4 Moran's I test

"na.omit() returns the object with incomplete cases removed"

```{r}
moran.test(hunan$GDPPC,
           listw=rswm_q,
           zero.policy=TRUE,
           na.action=na.omit)
```

**Null hypothesis**: The data observations are randomised.

**Alternative hypothesis:** The data observations are not randomised (etc, clustering or deviations are observed between some observations)

The Moran's I statistic value is **positive**, it implies that some clustering is observed.

**At a p-value of less than 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that some of the observation are not randomly distributed.**

#### 4.4.4.1 Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed. When there is uncertainty in the data (data changes every week), we use Monte Carlo simulation (rand(), randbetween(), poisson(), depending on understanding of data), to generate 1000 random values)

\* simulation starts from '1', to get 1000 simulations, we start at 1 and end with 999 (inclusive)

```{r}
set.seed(1234)

bperm = moran.mc(hunan$GDPPC,
                 listw=rswm_q,
                 nsim=999,
                 zero.policy= TRUE,
                 na.action=na.omit)

bperm
```

With a Moran I value of 0.30075 (positive means clustering, 0 means random, neg means deviation) , and a p value of less than 0.05 (statisfically significant), there are signs of clustering in the GDPPC in Hunan in some regions.

#### 4.4.4.2 Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
str(bperm)
```

```{r}
class(bperm)
```

Are these Moran's I statistic values generated?

```{r}
head(bperm$res)
```

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

[Plot histogram]{.underline} **breaks:** number of histogram cells

**freq:** logical; if **`TRUE`**, the histogram graphic is a representation of frequencies, the **`counts`** component of the result; if **`FALSE`**, probability densities, component **`density`**, are plotted (so that the histogram has a total area of one). Defaults to **`TRUE`** *if and only if* **`breaks`** are equidistant (and **`probability`** is not specified).

```{r}
hist(bperm$res,
     freq=TRUE,
     breaks= 20,
     xlab= "Simulated Moran's I"
     )
abline(v = 0, col="red")
```

Conclusion: Moran I value obtained earlier was 0.30075, it is likely to be more extreme than the critical value, which means highly likely that my dataset is very different from the null hypothesis. In other words, Moran I value of 0.30075 shows that signs of clustering is likely to be true than it is to be expected by chance alone.

Challenge: Plot histogram using ggplot2 instead

```{r}
library(ggplot2)
bperm.df <- as.data.frame(bperm$res)
colnames(bperm.df)[1] <- 'res'

c <- ggplot(bperm.df, aes(res))

c +
  geom_histogram(boundary = 0,
                 colour = 'black',
                 binwidth =0.02,
                 alpha= 0.5) +
  geom_vline(xintercept=0,
             colour = 'red') +
  labs(title = "Histogram of Moran's I",
       x = "Simulated Moran' I ")
  
```

### 4.4.5 Global Spatial Autocorrelation: Geary's

In this section, you will learn how to perform Geary's c statistics testing by using appropriate functions of **spdep** package.

#### 4.4.5.1 Geary's C test

Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

**Null hypothesis**: The data observations are randomised.

**Alternative hypothesis:** The data observations are not randomised (etc, clustering or deviations are observed between some observations)

The Geary's C statistic value (=0.6907223) is **between 0 and 1**, it implies that some clustering is observed.

1 means completely random, 1-3 means deviations

**At a p-value of less than 0.05, we have enough statistical evidence to reject the null hypothesis and conclude that some of the observation are not randomly distributed.**

#### 4.4.5.2 Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bpermg = geary.mc(hunan$GDPPC,
                  listw=rswm_q,
                  nsim=999)
bpermg
```

Same statistical conclusion as above.

```{r}
class(bpermg)
methods(class='htest')
attributes(bperm)
str(bperm)
```

#### 4.4.5.3 Visualising the Monte Carlo Geary's C

Plot a histogram to reveal the distribution of the simulated values

```{r}
mean(bpermg$res[1:999])
```

```{r}
var(bpermg$res[1:999])
```

```{r}
summary(bpermg$res[1:999])
```

```{r}
hist(bpermg$res,
     freq= TRUE,
     breaks=20,
     xlab='Simulated Geary C')

abline(v=1, col='red')
```

For Geary C, 1 means close to randomness. With a Geary C statistic value of 0.6907223, it is highly likely for this value to be more extreme than critical value on the left side. It means high chance we can reject the null hypthesis and conclude that there are signs of clustering. These signs are likely to be real than expected by chance?

## 4.5 Spatial Correlogram

**Spatial correlograms** are great to examine patterns of **spatial autocorrelation** in your data or model residuals. They show how correlated are pairs of spatial observations when you **increase the distance (lag) between them** - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an **exploratory** and **descriptive** tool. For this purpose they actually provide richer information than variograms.

### 4.5.1 Compute Moran's I correlogram

-   to compute 6-lag (means contiguity order = 6) spatial correlogram of GDPPC, use the sp.correlogram() of the spdep package.

# **Spatial correlogram**

Spatial correlograms for **Moran's I** and the **autocorrelation coefficient**, with print and plot helper functions.

    sp.correlogram(neighbours, var, order = 1, method = "corr",
     style = "W", randomisation = TRUE, zero.policy = NULL, spChk=NULL)
    # S3 method for spcor
    plot(x, main, ylab, ylim, ...)
    # S3 method for spcor
    print(x, p.adj.method="none", ...)

## **Arguments**

**neighbours**

:   an object of class `nb`

**var**

:   a numeric vector

**order**

:   maximum lag order

**method**

:   "corr" for correlation, "I" for Moran's I, "C" for Geary's C

**style**

:   `style` can take values W, B, C, and S

**randomisation**

:   variance of I or C calculated under the assumption of randomisation, if FALSE normality

**zero.policy**

:   default NULL, use global option value; if FALSE stop with error for any empty neighbour sets, if TRUE permit the weights list to be formed with zero-length weights vectors

Refer to lecture notes on ORDER, order 1 means first layer of neighbours using the contiguity / boundary method. We want to check how the Moran's I method changes as the neighbours get further and further away.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC,
                          order =6 ,
                          method = "I",
                          style = "W")

plot(MI_corr)
```

Based on the plot above, not all autocorrelation values might be statistically significant, thus its important to print the analysis results as shown below:

```{r}
print(MI_corr)
```

Does it mean that the Moran's I statistic estimate for order =4 is not statically significant? If for order 4 is already not statistically significant, do we continue to consider n = 5 and n = 6?

### 4.5.2 Compute Geary's C correlogram and plot

In the code chunk below, *sp.correlogram()* of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC,
                          order =6 ,
                          method = "C",
                          style = "W")

plot(GC_corr)
```

To check for statistical significance in the Geary C values:

```{r}
print(GC_corr)
```

Geary C order 3,4,6 are not statistically significant? Do we ignore 3,4,6 only? or we ignore all of 3 to 6?

## 4.6 Cluster and Outlier Analysis

Local Indicators of Spatial Association or LISA are statistics that evaluate the **existence of clusters** in the spatial arrangement of a **given variable**. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have **higher or lower rates than is to be expected by chance alone;** that is, the values occurring are above or below those of a random distribution in space.

In this section, I will apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran'I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

### 4.6.1 Computing local Moran's I

**LISA of an observation gives an indication of the extent of significant spatial clustering of similar values around that observation.**

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used.

-   computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran's I of *GDPPC2012* at the county level.

order(hunan\$County) gives 56 10 1 48 70 18 84 ... the 56th element is the smallest, followed by 10th element as second smallest... Run order(c(1,5,2,8)) will get output: 1 3 2 4

```{r}
fips <- order(hunan$County) #by alphabetical order?
fips
```

```{r}
class(fips)
```

```{r}
localMI <- localmoran(hunan$GDPPC,rswm_q)
head(localMI)
```

```{r}
class(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic **under the randomisation hypothesis**

-   Var.Ii: the variance of local moran statistic u**nder the randomisation hypothesis**

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

**Print Coefficient Matrices**

Utility function to be used in higher-level [**`print`**](https://www.rdocumentation.org/link/print?package=stats&version=3.6.2) methods, such as those for [**`summary.lm`**](https://www.rdocumentation.org/link/summary.lm?package=stats&version=3.6.2), [**`summary.glm`**](https://www.rdocumentation.org/link/summary.glm?package=stats&version=3.6.2) and [**`anova`**](https://www.rdocumentation.org/link/anova?package=stats&version=3.6.2). The goal is to provide a flexible interface with smart defaults such that often, only **`x`** needs to be specified.

```{r}
localMI[c(1,2,3,4)]
```

Fips is an object of integer class. It contains the row ids if rows are to be arranged in alphabetical order.

```{r}
printCoefmat(data.frame(
  localMI[fips,],
  row.names=hunan$County[fips],
  check.names = FALSE))
```

YiXin's prac , filter only those p-value \< 0.05

```{r}
xyz <- data.frame(
  localMI[fips,],
  row.names=hunan$County[fips],
  check.names = FALSE)

xyz %>% 
    filter(`Pr(z != E(Ii))`<=0.05)
```

#### 4.6.1.1 Mapping the local Moran's I

-   append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame

```{r}
hunan.localMI <- cbind(hunan,localMI)%>%
  rename(Pr.Ii = Pr.z....E.Ii..)  
#rename the last column 
#colnames(bperm.df)[1] <- 'res'
head(hunan.localMI)
```

#### 4.6.1.2 Mapping local Moran's I values

Use the choropleth mapping functions of tmap package to plot local Moran's I values.

When the variable provided as the `col` argument is numeric, **tmap** will use the `"pretty"` style as a default. In other words, it runs `tm_polygons(col = "colname", style = "pretty")` invisibly to the user. **This style rounds breaks into whole numbers where possible and spaces them evenly.**

```{r}
tm_shape(hunan.localMI)+
  tm_fill(col='Ii',
          style="pretty",
          palette = "RdBu",
          title = "local Moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran' I statistic",
            main.title.size=0.8,
            legend.height = 0.2,
            legend.width = 0.2)
```

#### 4.6.1.3 Mapping local Moran's I p-values

-   more meaningful to set our own breaks (alpha = 0.001, 0.01, 0.05, 0.1 etc) instead of using 'style'

-   inverse the color scheme for smaller p-values to have darker blue

```{r}
tm_shape(hunan.localMI)+
  tm_fill(col='Pr.Ii',
          breaks = c(-Inf,0.001,0.01,0.05,0.1,Inf),
          palette = "-Blues",
          title = "local Moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran' p-values",
            main.title.size=0.8,
            legend.height = 0.2,
            legend.width = 0.2) +
  tm_text('County', size = 0.3)
```

#### 4.6.1.4 Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI)+
  tm_fill(col='Ii',
          style="pretty",
          palette = "RdBu",
          title = "local Moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran' I statistic",
            main.title.size=0.8,
            legend.height = 0.2,
            legend.width = 0.2)

pvalue.map <- tm_shape(hunan.localMI)+
  tm_fill(col='Pr.Ii',
          breaks = c(-Inf,0.001,0.01,0.05,0.1,Inf),
          palette = "-Blues",
          title = "local Moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran' p-values",
            main.title.size=0.8,
            legend.height = 0.2,
            legend.width = 0.2) +
  tm_text('County', size = 0.3)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## 4.7 Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### 4.7.1 Plotting Moran scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

-   plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(hunan$GDPPC,
                  rswm_q,
                  labels=as.character(hunan$County),
                  xlab = "GDPPC 2012",
                  ylab="Spatially Lag GDPPC 2012")
```

Lengshuijiang is in HL quad. "I am a high outlier among low neighbours"

Xiangtan is in LH quad. "I am a low outlier among high neighbours"

Changsha is in the HH quad

### 4.7.2 Plotting Moran scatterplot with standardised variable

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Explaining how to scale() function works:

Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

**The standardised values of GDPPC values have mean of 0 and sd of 1?**

```{r}
#adds a new column in hunan sf dataframe
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

Yixin's observation: without as.vector(), the \['Z.GDPPC'\] column in slotted between \['GDPPC'\] col and \['geometry'\] column. After as.vector(), this variable is after \['geo'\] col!

Now, plot the Moran scatterplot again by using the code chunk below.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC,
                   rswm_q,
                   labels=as.character(hunan$County),
                   xlab = "GDPPC 2012",
                   ylab="Spatially Lag z-GDPPC 2012")
```

### 4.7.3 Preparing LISA map classes

| 1. vector(mode=? , length = ? ) is to create a vector (alternative1: a \<-c(1,2,3)) (alternative2: series \<- 1:10)
| 2. mode = 'numeric', 'character', 'integer', 'logical'
| 3. typeof(a) to see datatype of elements inside. Other ways of examining : (class(a), length(a), str(a), attributes(a))
| 4. other special values : -Inf, Inf
| 5. https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/#:\~:text=R's%20basic%20data%20structures%20include,name%2C%20dimension%2C%20and%20class.

```{r}
quadrant <- vector(mode = "numeric", length = nrow(localMI))
quadrant
```

-   next, derive the lagged variable of interest (GDPPC) and center the spatially lagged variable around its mean

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)
class(DV)
```

-   center the local Moran's around the mean

-   the first col \[ , 1\] of the localMI matrix contains LocalMoran's I values

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])
class(LM_I)
```

-   Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05
```

-   These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

-   Here, are we using filters? Using DV and LM_I vectors to assign value of 1 to quadrant vector (init as all 0)

-   DV \< 0 means GDPPC spatial lag is lower than mean.; spatial lag is low?

-   LM_I \< 0 means Local Moran I value is less than mean. **LISA of an observation gives an indication of the extent of significant spatial clustering of similar values around that observation.** When LM_I \> 0 means clustering of HH or LL values. When LM_I \< 0 means dispersion of HL or LH values.

```{r}
quadrant[DV < 0 & LM_I > 0] <- 1 # low-low
quadrant
```

```{r}
quadrant[DV > 0 & LM_I < 0] <- 2 # low- high
quadrant[DV < 0 & LM_I < 0] <- 3 # high- low
quadrant[DV > 0 & LM_I > 0] <- 4 # high-high
quadrant
```

-   lastly, place non-significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
quadrant
```

Combining all together

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

### 4.7.4 Plotting LISA map

-   now we build the LISA map by using the code chunks below.

`{r} # plus 1 because the indexing in R starts from 1.} c(sort(unique(quadrant)))+1`

-   Now we build LISA map

**popup.vars**

names of data variables that are shown in the popups in **`"view"`** mode. If **`convert2density=TRUE`**, the derived density variable name is suffixed with **`_density`**. If **`NA`** (default), only aesthetic variables (i.e. specified by **`col`** and **`lwd`**) are shown). If they are not specified, all variables are shown. Set popup.vars to **`FALSE`** to disable popups. When a vector of variable names is provided, the names (if specified) are printed in the popups.

```{r}
hunan.localMI$quadrant <- quadrant
colours <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = 'quadrant',
          palette= colours[c(sort(unique(quadrant))) + 1],
          labels = clusters[c(sort(unique(quadrant))) + 1],
          popups.var = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.height = 0.2,
            legend.width = 0.2)
```

-   For effective visualisation, its better to plot both the local Moran's I values map and its corresponding p-values next to each other

```{r}
gdppc <- qtm(hunan, 'GDPPC')

hunan.localMI$quadrant <- quadrant
colours <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = 'quadrant',
          palette= colours[c(sort(unique(quadrant))) + 1],
          labels = clusters[c(sort(unique(quadrant))) + 1],
          popups.var = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.height = 0.2,
            legend.width = 0.2)

tmap_arrange(gdppc, LISAmap, 
             asp = 1, ncol =2)

```

-   Quadrant has removed all insignificant regions, thus hunan.localMI and hence LISA map do not include p \> 0.05

-   The red regions have high GDPCC surrounded regions of by high GDPCC around me (spatial lag gdppc) The dark blue regions have low GDPCC and has low spatial lag (surrounding) gdppc values.

-   can also include the local Moran's I map and p-value map as shown below for easy comparison.

```{r}
tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

This seems like local MI prior to removing P-values \> 0.05

## 4.8 Hot Spot and Cold Spot Area Analysis

| Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.
| 
| The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### 4.8.1 Getis and Ord's G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995).

-   looks at neighbours within a defined proximity to identify where either high or low values clutser spatially

-   statistically significant hot-spots are recognised as areas of high values where where other areas within a neighbourhood range also share high values too.

The analysis consists three steps

1.  Deriving spatial weight matrix

2.  Computing Gi statistics

3.  Mapping Gi statistics

### 4.8.2 Deriving distance-based weight matrix

-   We need to define a new set of neighbours using DISTANCE. (earlier, spatial autocorrelation considered units that shared boundaries / contiguous concept)

-   There are two type of distance-based proximity matrix, they are:

    -   **fixed distance** weight matrix; and

    -   **adaptive distance** weight matrix

#### 4.8.2.1 Deriving the centroid

-   need points (x,y) to associate with each polygon in order to make connectivity graphs
-   need these coordinates in a separate data frame , to do this:
    -   Use a mapping function (**map_dbl()** from the purrr package) to apply a centroid function (**st_centroid()** ) on each element of a vector and returns another vector of the same length

    -   input vector is the geometry column of us.bound
-   To get longitude values:
    -   map the st_centroid() function over the geometry column of us.bound

    -   after st_centroid() function is applied, access the longitude values by using double bracket notation \[\[ \]\] and 1.

    -   to access the latitude values, use \[\[ \]\] and 2.

Others: the map_dbl() outputs double vectors; decimals allowed while map_int() outputs integer vectors.

```{r}
st_geometry(hunan)
```

```{r}
longitude <- map_dbl (hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl (hunan$geometry, ~st_centroid(.x)[[2]])
```

Combine the two vectors using cbind

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

#### 4.8.2.2 Determine the cut-off distance

-   find my nearest neighbour array ID within *coords*, and their corresponding (x,y) coordinates
    using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

```{r}
knearneigh(coords)
knearneigh(coords)$x [1:5,]
```

-   convert the knn object to meighbours list of nb class using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1
```

-   return the length of neighbour relationship edges using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.
    The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   remove the list structure of the returned object using unlist()

```{r}
k1dists <- unlist(nbdists(k1, coords, longlat=TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

Codes can be combined as shown below

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### 4.8.2.3 Computing fixed distance weight matrix

### 4.8.3 Computing adaptive distance weight matrix

## 4.9 Computing Gi statistics

### 4.9.1 Gi statistics using fixed distance

### 4.9.2 Mapping Gi values with fixed distance weights

### 4.9.3 Gi statistics using adaptive distance

### 4.9.4 Mapping Gi values with adaptive distance weights
